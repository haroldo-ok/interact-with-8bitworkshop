export declare function lpad(s: string, n: number): string;
export declare function rpad(s: string, n: number): string;
export declare function byte2signed(b: number): number;
export declare function getFilenameForPath(s: string): string;
export declare function getFolderForPath(s: string): string;
export declare function getFilenamePrefix(s: string): string;
export declare function hex(v: number, nd?: number): string;
export declare function tobin(v: number, nd?: number): string;
export declare function toradix(v: number, nd: number, radix: number): string;
export declare function arrayCompare(a: any[], b: any[]): boolean;
export declare function invertMap(m: {}): {};
export declare function highlightDifferences(s1: string, s2: string): string;
export declare function lzgmini(): void;
export declare function stringToByteArray(s: string): Uint8Array;
export declare function byteArrayToString(data: number[] | Uint8Array): string;
export declare function byteArrayToUTF8(data: number[] | Uint8Array): string;
export declare function removeBOM(s: string): string;
export declare function isProbablyBinary(path: string, data?: number[] | Uint8Array): boolean;
export declare function compressLZG(em_module: any, inBuffer: number[], levelArg?: boolean): Uint8Array;
export declare function safe_extend(deep: any, dest: any, src: any): any;
export declare function printFlags(val: number, names: string[], r2l: boolean): string;
export declare function rgb2bgr(x: any): number;
export declare function RGBA(r: number, g: number, b: number): number;
export declare function clamp(minv: number, maxv: number, v: number): number;
export declare function safeident(s: string): string;
export declare function rle_unpack(src: Uint8Array): Uint8Array;
export declare function getWithBinary(url: string, success: (text: string | Uint8Array) => void, datatype: 'text' | 'arraybuffer'): void;
export declare function getBasePlatform(platform: string): string;
export declare function getRootPlatform(platform: string): string;
export declare function getRootBasePlatform(platform: string): string;
export declare function convertDataToUint8Array(data: string | Uint8Array): Uint8Array;
export declare function convertDataToString(data: string | Uint8Array): string;
