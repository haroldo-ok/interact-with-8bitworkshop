import { ProbeVRAM } from "../devices";
interface CPUInterface {
    setVDPInterrupt(b: boolean): any;
}
export declare class TMS9918A {
    cru: {
        setVDPInterrupt: (b: boolean) => void;
    };
    enableFlicker: boolean;
    probe: ProbeVRAM;
    ram: Uint8Array;
    registers: Uint8Array;
    spriteBuffer: Uint8Array;
    addressRegister: number;
    statusRegister: number;
    palette: number[];
    latch: boolean;
    prefetchByte: number;
    displayOn: boolean;
    interruptsOn: boolean;
    screenMode: number;
    bitmapMode: boolean;
    textMode: boolean;
    colorTable: number;
    nameTable: number;
    charPatternTable: number;
    spriteAttributeTable: number;
    spritePatternTable: number;
    colorTableMask: number;
    patternTableMask: number;
    ramMask: number;
    fgColor: number;
    bgColor: number;
    flicker: boolean;
    redrawRequired: boolean;
    fb32: Uint32Array;
    width: number;
    height: number;
    constructor(fb32: Uint32Array, cru: CPUInterface, enableFlicker: boolean);
    reset(): void;
    drawScanline(y: number): void;
    setReadAddress(i: number): void;
    setWriteAddress(i: number): void;
    setVDPWriteRegister(i: number): void;
    setVDPWriteCommand3(i: number): void;
    writeAddress(i: number): void;
    updateMode(reg0: number, reg1: number): void;
    updateTableMasks(): void;
    writeData(i: number): void;
    readStatus(): number;
    readData(): number;
    getRAM(): Uint8Array;
    colorTableSize(): number;
    patternTableSize(): number;
    getDebugTables(): [string, number, number][];
    getRegsString(): string;
    hexView(start: number, length: number, anchorAddr: number): {
        text: any;
        lineCount: any;
        anchorLine: any;
    };
    getWord(addr: number): number;
    getCharAt(x: number, y: number): number;
    setFlicker(value: boolean): void;
    getState(): {
        ram: Uint8Array;
        registers: Uint8Array;
        addressRegister: number;
        statusRegister: number;
        latch: boolean;
        prefetchByte: number;
        displayOn: boolean;
        interruptsOn: boolean;
        screenMode: number;
        bitmapMode: boolean;
        textMode: boolean;
        colorTable: number;
        nameTable: number;
        charPatternTable: number;
        spriteAttributeTable: number;
        spritePatternTable: number;
        colorTableMask: number;
        patternTableMask: number;
        ramMask: number;
        fgColor: number;
        bgColor: number;
        flicker: boolean;
    };
    restoreState(state: any): void;
}
export declare class SMSVDP extends TMS9918A {
    writeToCRAM: boolean;
    cram: Uint8Array;
    cpalette: Uint32Array;
    registers: Uint8Array;
    vramUntwiddled: Uint8Array;
    numVisibleLines: number;
    lineCounter: number;
    lineInterruptPending: boolean;
    reset(): void;
    readStatus(): number;
    updateMode(reg0: number, reg1: number): void;
    setReadAddress(i: number): void;
    setWriteAddress(i: number): void;
    setVDPWriteRegister(i: number): void;
    setVDPWriteCommand3(i: number): void;
    writeData(i: number): void;
    writeTwiddled(vdp_addr: number, val: number): void;
    getState(): {
        ram: Uint8Array;
        registers: Uint8Array;
        addressRegister: number;
        statusRegister: number;
        latch: boolean;
        prefetchByte: number;
        displayOn: boolean;
        interruptsOn: boolean;
        screenMode: number;
        bitmapMode: boolean;
        textMode: boolean;
        colorTable: number;
        nameTable: number;
        charPatternTable: number;
        spriteAttributeTable: number;
        spritePatternTable: number;
        colorTableMask: number;
        patternTableMask: number;
        ramMask: number;
        fgColor: number;
        bgColor: number;
        flicker: boolean;
    };
    restoreState(state: any): void;
    drawScanline(y: number): void;
    findSprites(line: number): any[];
    rasterize_background(lineAddr: number, pixelOffset: number, tileData: number, tileDef: number, transparent: boolean): void;
    clear_background(lineAddr: number, pixelOffset: number): void;
    rasterize_background_line(lineAddr: number, pixelOffset: number, nameAddr: number, yMod: number): void;
    rasterize_foreground_line(lineAddr: number, pixelOffset: number, nameAddr: number, yMod: number): void;
    rasterize_sprites(line: number, lineAddr: number, pixelOffset: number, sprites: any): void;
    border_clear(lineAddr: number, count: number): void;
    rasterize_line(line: number): void;
    getDebugTables(): [string, number, number][];
}
export {};
