export declare var vl_finished: boolean;
export declare var vl_stopped: boolean;
export declare function VL_UL(x: any): number;
export declare function VL_TIME_Q(): number;
export declare function VL_BITISSET_I(data: any, bit: any): number;
export declare function VL_EXTENDSIGN_I(lbits: any, lhs: any): number;
export declare function VL_EXTEND_II(obits: any, lbits: any, lhs: any): any;
export declare function VL_EXTENDS_II(x: any, lbits: any, lhs: any): number;
export declare function VL_NEGATE_I(x: any): number;
export declare function VL_LTS_III(x: any, lbits: any, y: any, lhs: any, rhs: any): 0 | 1;
export declare function VL_GTS_III(x: any, lbits: any, y: any, lhs: any, rhs: any): 0 | 1;
export declare function VL_LTES_III(x: any, lbits: any, y: any, lhs: any, rhs: any): 0 | 1;
export declare function VL_GTES_III(x: any, lbits: any, y: any, lhs: any, rhs: any): 0 | 1;
export declare function VL_DIV_III(lbits: any, lhs: any, rhs: any): number;
export declare function VL_MULS_III(lbits: any, lhs: any, rhs: any): number;
export declare function VL_MODDIV_III(lbits: any, lhs: any, rhs: any): number;
export declare function VL_DIVS_III(lbits: any, lhs: any, rhs: any): number;
export declare function VL_MODDIVS_III(lbits: any, lhs: any, rhs: any): number;
export declare function VL_REDXOR_32(r: any): any;
export declare var VL_WRITEF: {
    (...data: any[]): void;
    (message?: any, ...optionalParams: any[]): void;
};
export declare function vl_finish(filename: any, lineno: any, hier: any): void;
export declare function vl_stop(filename: any, lineno: any, hier: any): void;
export declare function VL_RAND_RESET_I(bits: any): number;
export declare function VL_RANDOM_I(bits: any): number;
export declare function VL_READMEM_Q(ishex: any, width: any, depth: any, array_lsb: any, fnwords: any, filename: any, memp: any, start: any, end: any): void;
export declare function VL_READMEM_W(ishex: any, width: any, depth: any, array_lsb: any, fnwords: any, filename: any, memp: any, start: any, end: any): void;
