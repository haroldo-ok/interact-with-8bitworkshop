{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap ec3a2f9eb058f846dd7d","webpack:///jsnes.min.js","webpack:///./src/utils.js","webpack:///./src/controller.js","webpack:///./src/tile.js","webpack:///./src/index.js","webpack:///./src/nes.js","webpack:///./src/cpu.js","webpack:///./src/ppu.js","webpack:///./src/papu.js","webpack:///./src/rom.js","webpack:///./src/mappers.js"],"names":["root","factory","exports","module","define","amd","self","this","__webpack_require__","moduleId","installedModules","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","copyArrayElements","src","srcPos","dest","destPos","length","copyArray","slice","fromJSON","obj","state","JSON_PROPERTIES","key","buffer","set","toJSON","Controller","Array","BUTTON_A","BUTTON_B","BUTTON_SELECT","BUTTON_START","BUTTON_UP","BUTTON_DOWN","BUTTON_LEFT","BUTTON_RIGHT","buttonDown","buttonUp","Tile","pix","Uint8Array","fbIndex","tIndex","x","y","w","h","incX","incY","palIndex","tpri","initialized","opaque","setBuffer","scanline","setScanline","sline","b1","b2","render","srcx1","srcy1","srcx2","srcy2","dx","dy","palAdd","palette","flipHorizontal","flipVertical","pri","priTable","isTransparent","NES","CPU","PPU","PAPU","ROM","opts","onFrame","onAudioSample","onStatusUpdate","onBatteryRamWrite","preferredFrameRate","emulateSound","sampleRate","frameTime","ui","writeFrame","updateStatus","cpu","ppu","papu","mmap","controllers","1","2","frame","bind","zapperMove","zapperFireDown","zapperFireUp","fpsFrameCount","romData","reset","lastFpsTime","startFrame","cycles","FRAMELOOP","cyclesToHalt","emulate","clockFrameCounter","curX","spr0HitX","f_spVisibility","spr0HitY","setStatusFlag","STATUS_SPRITE0HIT","requestEndFrame","nmiCounter","startVBlank","endScanline","controller","button","zapperX","zapperY","zapperFired","getFPS","now","Date","fps","reloadROM","loadROM","data","rom","load","createMapper","setMirroring","getMirroringType","setFramerate","rate","setSampleRate","utils","nes","mem","REG_ACC","REG_X","REG_Y","REG_SP","REG_PC","REG_PC_NEW","REG_STATUS","F_CARRY","F_DECIMAL","F_INTERRUPT","F_INTERRUPT_NEW","F_OVERFLOW","F_SIGN","F_ZERO","F_NOTUSED","F_NOTUSED_NEW","F_BRK","F_BRK_NEW","opdata","crash","irqRequested","irqType","IRQ_NORMAL","IRQ_NMI","IRQ_RESET","j","k","setStatus","OpData","temp","add","doIrq","doNonMaskableInterrupt","doResetInterrupt","opinf","cycleCount","cycleAdd","addrMode","opaddr","addr","load16bit","write","push","pull","stackWrap","stop","crashMessage","toString","val","requestIrq","type","value","pageCrossed","addr1","addr2","haltCycles","status","getStatus","st","setOp","INS_ADC","ADDR_IMM","ADDR_ZP","ADDR_ZPX","ADDR_ABS","ADDR_ABSX","ADDR_ABSY","ADDR_PREIDXIND","ADDR_POSTIDXIND","INS_AND","INS_ASL","ADDR_ACC","INS_BCC","ADDR_REL","INS_BCS","INS_BEQ","INS_BIT","INS_BMI","INS_BNE","INS_BPL","INS_BRK","ADDR_IMP","INS_BVC","INS_BVS","INS_CLC","INS_CLD","INS_CLI","INS_CLV","INS_CMP","INS_CPX","INS_CPY","INS_DEC","INS_DEX","INS_DEY","INS_EOR","INS_INC","INS_INX","INS_INY","INS_JMP","ADDR_INDABS","INS_JSR","INS_LDA","INS_LDX","ADDR_ZPY","INS_LDY","INS_LSR","INS_NOP","INS_ORA","INS_PHA","INS_PHP","INS_PLA","INS_PLP","INS_ROL","INS_ROR","INS_RTI","INS_RTS","INS_SBC","INS_SEC","INS_SED","INS_SEI","INS_STA","INS_STX","INS_STY","INS_TAX","INS_TAY","INS_TSX","INS_TXA","INS_TXS","INS_TYA","INS_ALR","INS_ANC","INS_ARR","INS_AXS","INS_LAX","INS_SAX","INS_DCP","INS_ISC","INS_RLA","INS_RRA","INS_SLO","INS_SRE","INS_SKB","INS_IGN","cycTable","instname","addrDesc","INS_DUMMY","inst","op","size","vramMem","spriteMem","vramAddress","vramTmpAddress","vramBufferedReadValue","firstWrite","sramAddress","currentMirroring","nmiOk","dummyCycleToggle","validTileData","scanlineAlreadyRendered","f_nmiOnVblank","f_spriteSize","f_bgPatternTable","f_spPatternTable","f_addrInc","f_nTblAddress","f_color","f_bgVisibility","f_spClipping","f_bgClipping","f_dispType","cntFV","cntV","cntH","cntVT","cntHT","regFV","regV","regH","regVT","regHT","regFH","regS","curNt","attrib","bgbuffer","pixrendered","scantile","lastRenderedScanline","sprX","sprY","sprTile","sprCol","vertFlip","horiFlip","bgPriority","hitSpr0","sprPalette","imgPalette","ptTile","ntable1","nameTable","vramMirrorTable","palTable","showSpr0Hit","clipToTvSize","STATUS_VRAMWRITE","STATUS_SLSPRITECOUNT","STATUS_VBLANK","Uint32Array","NameTable","Uint16Array","PaletteTable","loadNTSCPalette","updateControlReg1","updateControlReg2","mirroring","triggerRendering","defineMirrorRegion","HORIZONTAL_MIRRORING","VERTICAL_MIRRORING","SINGLESCREEN_MIRRORING","SINGLESCREEN_MIRRORING2","fromStart","toStart","renderFramePartially","endFrame","renderBgScanline","checkSprite0","clockIrqCounter","regsToAddress","cntsToAddress","bgColor","setEmphasis","updatePalettes","flag","readStatusRegister","tmp","writeSRAMAddress","address","sramLoad","sramWrite","spriteRamWriteUpdate","scrollWrite","writeVRAMAddress","latchAccess","vramLoad","mirroredLoad","cntsFromAddress","regsFromAddress","vramWrite","mirroredWrite","writeMem","sramDMA","baseAddress","incTileCounter","count","Error","startScan","scanCount","renderSpritesPartially","si","ei","destIndex","scan","baseTile","t","tpix","att","col","tscanoffset","targetBuffer","tile","getTileIndex","getAttrib","sx","startscan","scancount","bgPri","top","toffset","bufferIndex","tIndexAdd","patternWrite","nameTableWrite","attribTableWrite","getEntry","tileIndex","Math","floor","leftOver","index","writeAttrib","doNMI","isPixelWhite","width","height","tx","ty","attindex","basex","basey","sqy","sqx","curTable","emphTable","currentEmph","makeTables","loadPALPalette","r","g","b","rFactor","gFactor","bFactor","emph","getRed","getGreen","getBlue","getRgb","yiq","rgb","loadDefaultPalette","square1","ChannelSquare","square2","triangle","ChannelTriangle","noise","ChannelNoise","dmc","ChannelDM","frameIrqCounter","frameIrqCounterMax","initCounter","channelEnableValue","lengthLookup","dmcFreqLookup","noiseWavelengthLookup","square_table","tnd_table","frameIrqEnabled","frameIrqActive","frameClockNow","startedPlaying","recordOutput","initingHardware","masterFrameCounter","derivedFrameCounter","countSequence","sampleTimer","sampleTimerMax","sampleCount","triValue","smpSquare1","smpSquare2","smpTriangle","smpDmc","accCount","prevSampleL","prevSampleR","smpAccumL","smpAccumR","dacRange","dcValue","masterVolume","stereoPosLSquare1","stereoPosLSquare2","stereoPosLTriangle","stereoPosLNoise","stereoPosLDMC","stereoPosRSquare1","stereoPosRSquare2","stereoPosRTriangle","stereoPosRNoise","stereoPosRDMC","extraCycles","maxSample","minSample","panning","setPanning","initLengthLookup","initDmcFrequencyLookup","initNoiseWavelengthLookup","initDACtables","writeReg","updateChannelEnable","resetCounter","readReg","getLengthStatus","getIrqStatus","irqGenerated","frameCounterTick","setEnabled","nCycles","maxCycles","isEnabled","shiftCounter","dmaFrequency","clockDmc","progTimerMax","progTimerCount","linearCounter","lengthCounter","triangleCounter","sampleValue","squareCounter","updateSampleValue","acc_c","accValue","shiftReg","randomMode","randomBit","accSample","sample","sampleCondition","clockLengthCounter","clockSweep","clockEnvDecay","clockLinearCounter","sq_index","tnd_index","smpNoise","sampleValueL","sampleValueR","smpDiffL","smpDiffR","getLengthMax","getDmcFrequency","getNoiseWaveLength","pos","updateStereoPos","setMasterVolume","ival","max_sqr","max_tnd","Float32Array","MODE_NORMAL","MODE_LOOP","MODE_IRQ","hasSample","playMode","dmaCounter","deltaCounter","playStartAddress","playAddress","playLength","playLengthCounter","reg4012","reg4013","dacLsb","endOfSample","nextSample","envDecayDisable","envDecayLoopEnable","lengthCounterEnable","envReset","shiftNow","envDecayRate","envDecayCounter","envVolume","dutyLookup","impLookup","sqr1","sweepActive","sweepCarry","updateSweepPeriod","sweepCounter","sweepCounterMax","sweepMode","sweepShiftAmount","dutyMode","sweepResult","vol","addrAdd","lcHalt","lcControl","lcLoadValue","updateSampleCondition","clockProgrammableTimer","clockTriangleGenerator","Mappers","mapperName","FOURSCREEN_MIRRORING","SINGLESCREEN_MIRRORING3","SINGLESCREEN_MIRRORING4","CHRROM_MIRRORING","header","vrom","vromTile","romCount","vromCount","batteryRam","trainer","fourScreen","mapperType","valid","v","indexOf","charCodeAt","foundError","offset","getMapperName","mapperSupported","joy1StrobeState","joy2StrobeState","joypadLastWrite","regWrite","writelow","regLoad","joy1Read","joy2Read","ret","loadPRGROM","loadCHRROM","loadBatteryRam","loadRomBank","loadVromBank","ram","bank","load32kRomBank","load8kVromBank","bank4kStart","load1kVromBank","bank1k","bank4k","bankoffset","baseIndex","load2kVromBank","bank2k","load8kRomBank","bank8k","bank16k","apply","regBuffer","regBufferCounter","oneScreenMirroring","prgSwitchingArea","prgSwitchingSize","vromSwitchingSize","romSelectionReg0","romSelectionReg1","romBankSelect","arguments","getRegNumber","setReg","reg","baseBank","switchLowHighPrgRom","oldSetting","switch16to32","switch32to16","CMD_SEL_2_1K_VROM_0000","CMD_SEL_2_1K_VROM_0800","CMD_SEL_1K_VROM_1000","CMD_SEL_1K_VROM_1400","CMD_SEL_1K_VROM_1800","CMD_SEL_1K_VROM_1C00","CMD_SEL_ROM_PAGE1","CMD_SEL_ROM_PAGE2","command","prgAddressSelect","chrAddressSelect","irqCounter","irqLatchValue","irqReload","irqEnable","prgAddressChanged","executeCommand","cmd","arg","prg_size","chr_size","sram_we_a","sram_we_b","graphic_mode","nametable_mode","nametable_type","fill_chr","fill_pal","SetBank_SRAM","SetBank_CPU","chr_mode","chr_page","SetBank_PPU","split_control","split_scroll","split_page","irq_line","ClearIRQ","irq_enable","mult_a","mult_b","exWrite","irq_status","prgbank1","prgbank2"],"mappings":"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","file":"jsnes.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"jsnes\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"jsnes\"] = factory();\n\telse\n\t\troot[\"jsnes\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap ec3a2f9eb058f846dd7d","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"jsnes\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"jsnes\"] = factory();\n\telse\n\t\troot[\"jsnes\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 3);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\nmodule.exports = {\n  copyArrayElements: function(src, srcPos, dest, destPos, length) {\n    for (var i = 0; i < length; ++i) {\n      dest[destPos + i] = src[srcPos + i];\n    }\n  },\n\n  copyArray: function(src) {\n    return src.slice(0);\n  },\n\n  fromJSON: function(obj, state) {\n    for (var i = 0; i < obj.JSON_PROPERTIES.length; i++) {\n      var key = obj.JSON_PROPERTIES[i];\n      if (obj[key] !== null && obj[key].buffer && obj[key].set)\n        obj[key].set(state[key]); // set array elements\n      else\n        obj[key] = state[key]; // replace\n    }\n  },\n\n  toJSON: function(obj) {\n    var state = {};\n    for (var i = 0; i < obj.JSON_PROPERTIES.length; i++) {\n      var key = obj.JSON_PROPERTIES[i];\n      state[key] = obj[key];\n    }\n    return state;\n  }\n};\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\nvar Controller = function() {\n  this.state = new Array(8);\n  for (var i = 0; i < this.state.length; i++) {\n    this.state[i] = 0x40;\n  }\n};\n\nController.BUTTON_A = 0;\nController.BUTTON_B = 1;\nController.BUTTON_SELECT = 2;\nController.BUTTON_START = 3;\nController.BUTTON_UP = 4;\nController.BUTTON_DOWN = 5;\nController.BUTTON_LEFT = 6;\nController.BUTTON_RIGHT = 7;\n\nController.prototype = {\n  buttonDown: function(key) {\n    this.state[key] = 0x41;\n  },\n\n  buttonUp: function(key) {\n    this.state[key] = 0x40;\n  }\n};\n\nmodule.exports = Controller;\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\nvar Tile = function() {\n  // Tile data:\n  this.pix = new Uint8Array(64);\n\n  this.fbIndex = null;\n  this.tIndex = null;\n  this.x = null;\n  this.y = null;\n  this.w = null;\n  this.h = null;\n  this.incX = null;\n  this.incY = null;\n  this.palIndex = null;\n  this.tpri = null;\n  this.c = null;\n  this.initialized = false;\n  this.opaque = new Array(8);\n};\n\nTile.prototype = {\n  setBuffer: function(scanline) {\n    for (this.y = 0; this.y < 8; this.y++) {\n      this.setScanline(this.y, scanline[this.y], scanline[this.y + 8]);\n    }\n  },\n\n  setScanline: function(sline, b1, b2) {\n    this.initialized = true;\n    this.tIndex = sline << 3;\n    for (this.x = 0; this.x < 8; this.x++) {\n      this.pix[this.tIndex + this.x] =\n        ((b1 >> (7 - this.x)) & 1) + (((b2 >> (7 - this.x)) & 1) << 1);\n      if (this.pix[this.tIndex + this.x] === 0) {\n        this.opaque[sline] = false;\n      }\n    }\n  },\n\n  render: function(\n    buffer,\n    srcx1,\n    srcy1,\n    srcx2,\n    srcy2,\n    dx,\n    dy,\n    palAdd,\n    palette,\n    flipHorizontal,\n    flipVertical,\n    pri,\n    priTable\n  ) {\n    if (dx < -7 || dx >= 256 || dy < -7 || dy >= 240) {\n      return;\n    }\n\n    this.w = srcx2 - srcx1;\n    this.h = srcy2 - srcy1;\n\n    if (dx < 0) {\n      srcx1 -= dx;\n    }\n    if (dx + srcx2 >= 256) {\n      srcx2 = 256 - dx;\n    }\n\n    if (dy < 0) {\n      srcy1 -= dy;\n    }\n    if (dy + srcy2 >= 240) {\n      srcy2 = 240 - dy;\n    }\n\n    if (!flipHorizontal && !flipVertical) {\n      this.fbIndex = (dy << 8) + dx;\n      this.tIndex = 0;\n      for (this.y = 0; this.y < 8; this.y++) {\n        for (this.x = 0; this.x < 8; this.x++) {\n          if (\n            this.x >= srcx1 &&\n            this.x < srcx2 &&\n            this.y >= srcy1 &&\n            this.y < srcy2\n          ) {\n            this.palIndex = this.pix[this.tIndex];\n            this.tpri = priTable[this.fbIndex];\n            if (this.palIndex !== 0 && pri <= (this.tpri & 0xff)) {\n              //console.log(\"Rendering upright tile to buffer\");\n              buffer[this.fbIndex] = palette[this.palIndex + palAdd];\n              this.tpri = (this.tpri & 0xf00) | pri;\n              priTable[this.fbIndex] = this.tpri;\n            }\n          }\n          this.fbIndex++;\n          this.tIndex++;\n        }\n        this.fbIndex -= 8;\n        this.fbIndex += 256;\n      }\n    } else if (flipHorizontal && !flipVertical) {\n      this.fbIndex = (dy << 8) + dx;\n      this.tIndex = 7;\n      for (this.y = 0; this.y < 8; this.y++) {\n        for (this.x = 0; this.x < 8; this.x++) {\n          if (\n            this.x >= srcx1 &&\n            this.x < srcx2 &&\n            this.y >= srcy1 &&\n            this.y < srcy2\n          ) {\n            this.palIndex = this.pix[this.tIndex];\n            this.tpri = priTable[this.fbIndex];\n            if (this.palIndex !== 0 && pri <= (this.tpri & 0xff)) {\n              buffer[this.fbIndex] = palette[this.palIndex + palAdd];\n              this.tpri = (this.tpri & 0xf00) | pri;\n              priTable[this.fbIndex] = this.tpri;\n            }\n          }\n          this.fbIndex++;\n          this.tIndex--;\n        }\n        this.fbIndex -= 8;\n        this.fbIndex += 256;\n        this.tIndex += 16;\n      }\n    } else if (flipVertical && !flipHorizontal) {\n      this.fbIndex = (dy << 8) + dx;\n      this.tIndex = 56;\n      for (this.y = 0; this.y < 8; this.y++) {\n        for (this.x = 0; this.x < 8; this.x++) {\n          if (\n            this.x >= srcx1 &&\n            this.x < srcx2 &&\n            this.y >= srcy1 &&\n            this.y < srcy2\n          ) {\n            this.palIndex = this.pix[this.tIndex];\n            this.tpri = priTable[this.fbIndex];\n            if (this.palIndex !== 0 && pri <= (this.tpri & 0xff)) {\n              buffer[this.fbIndex] = palette[this.palIndex + palAdd];\n              this.tpri = (this.tpri & 0xf00) | pri;\n              priTable[this.fbIndex] = this.tpri;\n            }\n          }\n          this.fbIndex++;\n          this.tIndex++;\n        }\n        this.fbIndex -= 8;\n        this.fbIndex += 256;\n        this.tIndex -= 16;\n      }\n    } else {\n      this.fbIndex = (dy << 8) + dx;\n      this.tIndex = 63;\n      for (this.y = 0; this.y < 8; this.y++) {\n        for (this.x = 0; this.x < 8; this.x++) {\n          if (\n            this.x >= srcx1 &&\n            this.x < srcx2 &&\n            this.y >= srcy1 &&\n            this.y < srcy2\n          ) {\n            this.palIndex = this.pix[this.tIndex];\n            this.tpri = priTable[this.fbIndex];\n            if (this.palIndex !== 0 && pri <= (this.tpri & 0xff)) {\n              buffer[this.fbIndex] = palette[this.palIndex + palAdd];\n              this.tpri = (this.tpri & 0xf00) | pri;\n              priTable[this.fbIndex] = this.tpri;\n            }\n          }\n          this.fbIndex++;\n          this.tIndex--;\n        }\n        this.fbIndex -= 8;\n        this.fbIndex += 256;\n      }\n    }\n  },\n\n  isTransparent: function(x, y) {\n    return this.pix[(y << 3) + x] === 0;\n  },\n\n  toJSON: function() {\n    return {\n      opaque: this.opaque,\n      pix: this.pix\n    };\n  },\n\n  fromJSON: function(s) {\n    this.opaque = s.opaque;\n    this.pix = s.pix;\n  }\n};\n\nmodule.exports = Tile;\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = {\n  Controller: __webpack_require__(1),\n  NES: __webpack_require__(4)\n};\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar CPU = __webpack_require__(5);\nvar Controller = __webpack_require__(1);\nvar PPU = __webpack_require__(6);\nvar PAPU = __webpack_require__(7);\nvar ROM = __webpack_require__(8);\n\nvar NES = function(opts) {\n  this.opts = {\n    onFrame: function() {},\n    onAudioSample: null,\n    onStatusUpdate: function() {},\n    onBatteryRamWrite: function() {},\n\n    // FIXME: not actually used except for in PAPU\n    preferredFrameRate: 60,\n\n    emulateSound: true,\n    sampleRate: 44100 // Sound sample rate in hz\n  };\n  if (typeof opts !== \"undefined\") {\n    var key;\n    for (key in this.opts) {\n      if (typeof opts[key] !== \"undefined\") {\n        this.opts[key] = opts[key];\n      }\n    }\n  }\n\n  this.frameTime = 1000 / this.opts.preferredFrameRate;\n\n  this.ui = {\n    writeFrame: this.opts.onFrame,\n    updateStatus: this.opts.onStatusUpdate\n  };\n  this.cpu = new CPU(this);\n  this.ppu = new PPU(this);\n  this.papu = new PAPU(this);\n  this.mmap = null; // set in loadROM()\n  this.controllers = {\n    1: new Controller(),\n    2: new Controller()\n  };\n\n  this.ui.updateStatus(\"Ready to load a ROM.\");\n\n  this.frame = this.frame.bind(this);\n  this.buttonDown = this.buttonDown.bind(this);\n  this.buttonUp = this.buttonUp.bind(this);\n  this.zapperMove = this.zapperMove.bind(this);\n  this.zapperFireDown = this.zapperFireDown.bind(this);\n  this.zapperFireUp = this.zapperFireUp.bind(this);\n};\n\nNES.prototype = {\n  fpsFrameCount: 0,\n  romData: null,\n\n  // Resets the system\n  reset: function() {\n    if (this.mmap !== null) {\n      this.mmap.reset();\n    }\n\n    this.cpu.reset();\n    this.ppu.reset();\n    this.papu.reset();\n\n    this.lastFpsTime = null;\n    this.fpsFrameCount = 0;\n  },\n\n  frame: function() {\n    this.ppu.startFrame();\n    var cycles = 0;\n    var emulateSound = this.opts.emulateSound;\n    var cpu = this.cpu;\n    var ppu = this.ppu;\n    var papu = this.papu;\n    FRAMELOOP: for (;;) {\n      if (cpu.cyclesToHalt === 0) {\n        // Execute a CPU instruction\n        cycles = cpu.emulate();\n        if (emulateSound) {\n          papu.clockFrameCounter(cycles);\n        }\n        cycles *= 3;\n      } else {\n        if (cpu.cyclesToHalt > 8) {\n          cycles = 24;\n          if (emulateSound) {\n            papu.clockFrameCounter(8);\n          }\n          cpu.cyclesToHalt -= 8;\n        } else {\n          cycles = cpu.cyclesToHalt * 3;\n          if (emulateSound) {\n            papu.clockFrameCounter(cpu.cyclesToHalt);\n          }\n          cpu.cyclesToHalt = 0;\n        }\n      }\n\n      for (; cycles > 0; cycles--) {\n        if (\n          ppu.curX === ppu.spr0HitX &&\n          ppu.f_spVisibility === 1 &&\n          ppu.scanline - 21 === ppu.spr0HitY\n        ) {\n          // Set sprite 0 hit flag:\n          ppu.setStatusFlag(ppu.STATUS_SPRITE0HIT, true);\n        }\n\n        if (ppu.requestEndFrame) {\n          ppu.nmiCounter--;\n          if (ppu.nmiCounter === 0) {\n            ppu.requestEndFrame = false;\n            ppu.startVBlank();\n            break FRAMELOOP;\n          }\n        }\n\n        ppu.curX++;\n        if (ppu.curX === 341) {\n          ppu.curX = 0;\n          ppu.endScanline();\n        }\n      }\n    }\n    this.fpsFrameCount++;\n  },\n\n  buttonDown: function(controller, button) {\n    this.controllers[controller].buttonDown(button);\n  },\n\n  buttonUp: function(controller, button) {\n    this.controllers[controller].buttonUp(button);\n  },\n\n  zapperMove: function(x, y) {\n    if (!this.mmap) return;\n    this.mmap.zapperX = x;\n    this.mmap.zapperY = y;\n  },\n\n  zapperFireDown: function() {\n    if (!this.mmap) return;\n    this.mmap.zapperFired = true;\n  },\n\n  zapperFireUp: function() {\n    if (!this.mmap) return;\n    this.mmap.zapperFired = false;\n  },\n\n  getFPS: function() {\n    var now = +new Date();\n    var fps = null;\n    if (this.lastFpsTime) {\n      fps = this.fpsFrameCount / ((now - this.lastFpsTime) / 1000);\n    }\n    this.fpsFrameCount = 0;\n    this.lastFpsTime = now;\n    return fps;\n  },\n\n  reloadROM: function() {\n    if (this.romData !== null) {\n      this.loadROM(this.romData);\n    }\n  },\n\n  // Loads a ROM file into the CPU and PPU.\n  // The ROM file is validated first.\n  loadROM: function(data) {\n    // Load ROM file:\n    this.rom = new ROM(this);\n    this.rom.load(data);\n\n    this.reset();\n    this.mmap = this.rom.createMapper();\n    this.mmap.loadROM();\n    this.ppu.setMirroring(this.rom.getMirroringType());\n    this.romData = data;\n  },\n\n  setFramerate: function(rate) {\n    this.opts.preferredFrameRate = rate;\n    this.frameTime = 1000 / rate;\n    this.papu.setSampleRate(this.opts.sampleRate, false);\n  },\n\n  toJSON: function() {\n    return {\n      romData: this.romData,\n      cpu: this.cpu.toJSON(),\n      mmap: this.mmap.toJSON(),\n      ppu: this.ppu.toJSON()\n    };\n  },\n\n  fromJSON: function(s) {\n    this.loadROM(s.romData);\n    this.cpu.fromJSON(s.cpu);\n    this.mmap.fromJSON(s.mmap);\n    this.ppu.fromJSON(s.ppu);\n  }\n};\n\nmodule.exports = NES;\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar utils = __webpack_require__(0);\n\nvar CPU = function(nes) {\n  this.nes = nes;\n\n  // Keep Chrome happy\n  this.mem = null;\n  this.REG_ACC = null;\n  this.REG_X = null;\n  this.REG_Y = null;\n  this.REG_SP = null;\n  this.REG_PC = null;\n  this.REG_PC_NEW = null;\n  this.REG_STATUS = null;\n  this.F_CARRY = null;\n  this.F_DECIMAL = null;\n  this.F_INTERRUPT = null;\n  this.F_INTERRUPT_NEW = null;\n  this.F_OVERFLOW = null;\n  this.F_SIGN = null;\n  this.F_ZERO = null;\n  this.F_NOTUSED = null;\n  this.F_NOTUSED_NEW = null;\n  this.F_BRK = null;\n  this.F_BRK_NEW = null;\n  this.opdata = null;\n  this.cyclesToHalt = null;\n  this.crash = null;\n  this.irqRequested = null;\n  this.irqType = null;\n\n  this.reset();\n};\n\nCPU.prototype = {\n  // IRQ Types\n  IRQ_NORMAL: 0,\n  IRQ_NMI: 1,\n  IRQ_RESET: 2,\n\n  reset: function() {\n    // Main memory\n    this.mem = new Uint8Array(0x10000);\n\n    for (var i = 0; i < 0x2000; i++) {\n      this.mem[i] = 0xff;\n    }\n    for (var p = 0; p < 4; p++) {\n      var j = p * 0x800;\n      this.mem[j + 0x008] = 0xf7;\n      this.mem[j + 0x009] = 0xef;\n      this.mem[j + 0x00a] = 0xdf;\n      this.mem[j + 0x00f] = 0xbf;\n    }\n    for (var k = 0x2001; k < this.mem.length; k++) {\n      this.mem[k] = 0;\n    }\n\n    // CPU Registers:\n    this.REG_ACC = 0;\n    this.REG_X = 0;\n    this.REG_Y = 0;\n    // Reset Stack pointer:\n    this.REG_SP = 0x01ff;\n    // Reset Program counter:\n    this.REG_PC = 0x8000 - 1;\n    this.REG_PC_NEW = 0x8000 - 1;\n    // Reset Status register:\n    this.REG_STATUS = 0x28;\n\n    this.setStatus(0x28);\n\n    // Set flags:\n    this.F_CARRY = 0;\n    this.F_DECIMAL = 0;\n    this.F_INTERRUPT = 1;\n    this.F_INTERRUPT_NEW = 1;\n    this.F_OVERFLOW = 0;\n    this.F_SIGN = 0;\n    this.F_ZERO = 1;\n\n    this.F_NOTUSED = 1;\n    this.F_NOTUSED_NEW = 1;\n    this.F_BRK = 1;\n    this.F_BRK_NEW = 1;\n\n    this.opdata = new OpData().opdata;\n    this.cyclesToHalt = 0;\n\n    // Reset crash flag:\n    this.crash = false;\n\n    // Interrupt notification:\n    this.irqRequested = false;\n    this.irqType = null;\n  },\n\n  // Emulates a single CPU instruction, returns the number of cycles\n  emulate: function() {\n    var temp;\n    var add;\n\n    // Check interrupts:\n    if (this.irqRequested) {\n      temp =\n        this.F_CARRY |\n        ((this.F_ZERO === 0 ? 1 : 0) << 1) |\n        (this.F_INTERRUPT << 2) |\n        (this.F_DECIMAL << 3) |\n        (this.F_BRK << 4) |\n        (this.F_NOTUSED << 5) |\n        (this.F_OVERFLOW << 6) |\n        (this.F_SIGN << 7);\n\n      this.REG_PC_NEW = this.REG_PC;\n      this.F_INTERRUPT_NEW = this.F_INTERRUPT;\n      switch (this.irqType) {\n        case 0: {\n          // Normal IRQ:\n          if (this.F_INTERRUPT !== 0) {\n            // console.log(\"Interrupt was masked.\");\n            break;\n          }\n          this.doIrq(temp);\n          // console.log(\"Did normal IRQ. I=\"+this.F_INTERRUPT);\n          break;\n        }\n        case 1: {\n          // NMI:\n          this.doNonMaskableInterrupt(temp);\n          break;\n        }\n        case 2: {\n          // Reset:\n          this.doResetInterrupt();\n          break;\n        }\n      }\n\n      this.REG_PC = this.REG_PC_NEW;\n      this.F_INTERRUPT = this.F_INTERRUPT_NEW;\n      this.F_BRK = this.F_BRK_NEW;\n      this.irqRequested = false;\n    }\n\n    var opinf = this.opdata[this.nes.mmap.load(this.REG_PC + 1)];\n    var cycleCount = opinf >> 24;\n    var cycleAdd = 0;\n\n    // Find address mode:\n    var addrMode = (opinf >> 8) & 0xff;\n\n    // Increment PC by number of op bytes:\n    var opaddr = this.REG_PC;\n    this.REG_PC += (opinf >> 16) & 0xff;\n\n    var addr = 0;\n    switch (addrMode) {\n      case 0: {\n        // Zero Page mode. Use the address given after the opcode,\n        // but without high byte.\n        addr = this.load(opaddr + 2);\n        break;\n      }\n      case 1: {\n        // Relative mode.\n        addr = this.load(opaddr + 2);\n        if (addr < 0x80) {\n          addr += this.REG_PC;\n        } else {\n          addr += this.REG_PC - 256;\n        }\n        break;\n      }\n      case 2: {\n        // Ignore. Address is implied in instruction.\n        break;\n      }\n      case 3: {\n        // Absolute mode. Use the two bytes following the opcode as\n        // an address.\n        addr = this.load16bit(opaddr + 2);\n        break;\n      }\n      case 4: {\n        // Accumulator mode. The address is in the accumulator\n        // register.\n        addr = this.REG_ACC;\n        break;\n      }\n      case 5: {\n        // Immediate mode. The value is given after the opcode.\n        addr = this.REG_PC;\n        break;\n      }\n      case 6: {\n        // Zero Page Indexed mode, X as index. Use the address given\n        // after the opcode, then add the\n        // X register to it to get the final address.\n        addr = (this.load(opaddr + 2) + this.REG_X) & 0xff;\n        break;\n      }\n      case 7: {\n        // Zero Page Indexed mode, Y as index. Use the address given\n        // after the opcode, then add the\n        // Y register to it to get the final address.\n        addr = (this.load(opaddr + 2) + this.REG_Y) & 0xff;\n        break;\n      }\n      case 8: {\n        // Absolute Indexed Mode, X as index. Same as zero page\n        // indexed, but with the high byte.\n        addr = this.load16bit(opaddr + 2);\n        if ((addr & 0xff00) !== ((addr + this.REG_X) & 0xff00)) {\n          cycleAdd = 1;\n        }\n        addr += this.REG_X;\n        break;\n      }\n      case 9: {\n        // Absolute Indexed Mode, Y as index. Same as zero page\n        // indexed, but with the high byte.\n        addr = this.load16bit(opaddr + 2);\n        if ((addr & 0xff00) !== ((addr + this.REG_Y) & 0xff00)) {\n          cycleAdd = 1;\n        }\n        addr += this.REG_Y;\n        break;\n      }\n      case 10: {\n        // Pre-indexed Indirect mode. Find the 16-bit address\n        // starting at the given location plus\n        // the current X register. The value is the contents of that\n        // address.\n        addr = this.load(opaddr + 2);\n        if ((addr & 0xff00) !== ((addr + this.REG_X) & 0xff00)) {\n          cycleAdd = 1;\n        }\n        addr += this.REG_X;\n        addr &= 0xff;\n        addr = this.load16bit(addr);\n        break;\n      }\n      case 11: {\n        // Post-indexed Indirect mode. Find the 16-bit address\n        // contained in the given location\n        // (and the one following). Add to that address the contents\n        // of the Y register. Fetch the value\n        // stored at that adress.\n        addr = this.load16bit(this.load(opaddr + 2));\n        if ((addr & 0xff00) !== ((addr + this.REG_Y) & 0xff00)) {\n          cycleAdd = 1;\n        }\n        addr += this.REG_Y;\n        break;\n      }\n      case 12: {\n        // Indirect Absolute mode. Find the 16-bit address contained\n        // at the given location.\n        addr = this.load16bit(opaddr + 2); // Find op\n        if (addr < 0x1fff) {\n          addr =\n            this.mem[addr] +\n            (this.mem[(addr & 0xff00) | (((addr & 0xff) + 1) & 0xff)] << 8); // Read from address given in op\n        } else {\n          addr =\n            this.nes.mmap.load(addr) +\n            (this.nes.mmap.load(\n              (addr & 0xff00) | (((addr & 0xff) + 1) & 0xff)\n            ) <<\n              8);\n        }\n        break;\n      }\n    }\n    // Wrap around for addresses above 0xFFFF:\n    addr &= 0xffff;\n\n    // ----------------------------------------------------------------------------------------------------\n    // Decode & execute instruction:\n    // ----------------------------------------------------------------------------------------------------\n\n    // This should be compiled to a jump table.\n    switch (opinf & 0xff) {\n      case 0: {\n        // *******\n        // * ADC *\n        // *******\n\n        // Add with carry.\n        temp = this.REG_ACC + this.load(addr) + this.F_CARRY;\n\n        if (\n          ((this.REG_ACC ^ this.load(addr)) & 0x80) === 0 &&\n          ((this.REG_ACC ^ temp) & 0x80) !== 0\n        ) {\n          this.F_OVERFLOW = 1;\n        } else {\n          this.F_OVERFLOW = 0;\n        }\n        this.F_CARRY = temp > 255 ? 1 : 0;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp & 0xff;\n        this.REG_ACC = temp & 255;\n        cycleCount += cycleAdd;\n        break;\n      }\n      case 1: {\n        // *******\n        // * AND *\n        // *******\n\n        // AND memory with accumulator.\n        this.REG_ACC = this.REG_ACC & this.load(addr);\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        this.F_ZERO = this.REG_ACC;\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n        break;\n      }\n      case 2: {\n        // *******\n        // * ASL *\n        // *******\n\n        // Shift left one bit\n        if (addrMode === 4) {\n          // ADDR_ACC = 4\n\n          this.F_CARRY = (this.REG_ACC >> 7) & 1;\n          this.REG_ACC = (this.REG_ACC << 1) & 255;\n          this.F_SIGN = (this.REG_ACC >> 7) & 1;\n          this.F_ZERO = this.REG_ACC;\n        } else {\n          temp = this.load(addr);\n          this.F_CARRY = (temp >> 7) & 1;\n          temp = (temp << 1) & 255;\n          this.F_SIGN = (temp >> 7) & 1;\n          this.F_ZERO = temp;\n          this.write(addr, temp);\n        }\n        break;\n      }\n      case 3: {\n        // *******\n        // * BCC *\n        // *******\n\n        // Branch on carry clear\n        if (this.F_CARRY === 0) {\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\n          this.REG_PC = addr;\n        }\n        break;\n      }\n      case 4: {\n        // *******\n        // * BCS *\n        // *******\n\n        // Branch on carry set\n        if (this.F_CARRY === 1) {\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\n          this.REG_PC = addr;\n        }\n        break;\n      }\n      case 5: {\n        // *******\n        // * BEQ *\n        // *******\n\n        // Branch on zero\n        if (this.F_ZERO === 0) {\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\n          this.REG_PC = addr;\n        }\n        break;\n      }\n      case 6: {\n        // *******\n        // * BIT *\n        // *******\n\n        temp = this.load(addr);\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_OVERFLOW = (temp >> 6) & 1;\n        temp &= this.REG_ACC;\n        this.F_ZERO = temp;\n        break;\n      }\n      case 7: {\n        // *******\n        // * BMI *\n        // *******\n\n        // Branch on negative result\n        if (this.F_SIGN === 1) {\n          cycleCount++;\n          this.REG_PC = addr;\n        }\n        break;\n      }\n      case 8: {\n        // *******\n        // * BNE *\n        // *******\n\n        // Branch on not zero\n        if (this.F_ZERO !== 0) {\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\n          this.REG_PC = addr;\n        }\n        break;\n      }\n      case 9: {\n        // *******\n        // * BPL *\n        // *******\n\n        // Branch on positive result\n        if (this.F_SIGN === 0) {\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\n          this.REG_PC = addr;\n        }\n        break;\n      }\n      case 10: {\n        // *******\n        // * BRK *\n        // *******\n\n        this.REG_PC += 2;\n        this.push((this.REG_PC >> 8) & 255);\n        this.push(this.REG_PC & 255);\n        this.F_BRK = 1;\n\n        this.push(\n          this.F_CARRY |\n            ((this.F_ZERO === 0 ? 1 : 0) << 1) |\n            (this.F_INTERRUPT << 2) |\n            (this.F_DECIMAL << 3) |\n            (this.F_BRK << 4) |\n            (this.F_NOTUSED << 5) |\n            (this.F_OVERFLOW << 6) |\n            (this.F_SIGN << 7)\n        );\n\n        this.F_INTERRUPT = 1;\n        //this.REG_PC = load(0xFFFE) | (load(0xFFFF) << 8);\n        this.REG_PC = this.load16bit(0xfffe);\n        this.REG_PC--;\n        break;\n      }\n      case 11: {\n        // *******\n        // * BVC *\n        // *******\n\n        // Branch on overflow clear\n        if (this.F_OVERFLOW === 0) {\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\n          this.REG_PC = addr;\n        }\n        break;\n      }\n      case 12: {\n        // *******\n        // * BVS *\n        // *******\n\n        // Branch on overflow set\n        if (this.F_OVERFLOW === 1) {\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\n          this.REG_PC = addr;\n        }\n        break;\n      }\n      case 13: {\n        // *******\n        // * CLC *\n        // *******\n\n        // Clear carry flag\n        this.F_CARRY = 0;\n        break;\n      }\n      case 14: {\n        // *******\n        // * CLD *\n        // *******\n\n        // Clear decimal flag\n        this.F_DECIMAL = 0;\n        break;\n      }\n      case 15: {\n        // *******\n        // * CLI *\n        // *******\n\n        // Clear interrupt flag\n        this.F_INTERRUPT = 0;\n        break;\n      }\n      case 16: {\n        // *******\n        // * CLV *\n        // *******\n\n        // Clear overflow flag\n        this.F_OVERFLOW = 0;\n        break;\n      }\n      case 17: {\n        // *******\n        // * CMP *\n        // *******\n\n        // Compare memory and accumulator:\n        temp = this.REG_ACC - this.load(addr);\n        this.F_CARRY = temp >= 0 ? 1 : 0;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp & 0xff;\n        cycleCount += cycleAdd;\n        break;\n      }\n      case 18: {\n        // *******\n        // * CPX *\n        // *******\n\n        // Compare memory and index X:\n        temp = this.REG_X - this.load(addr);\n        this.F_CARRY = temp >= 0 ? 1 : 0;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp & 0xff;\n        break;\n      }\n      case 19: {\n        // *******\n        // * CPY *\n        // *******\n\n        // Compare memory and index Y:\n        temp = this.REG_Y - this.load(addr);\n        this.F_CARRY = temp >= 0 ? 1 : 0;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp & 0xff;\n        break;\n      }\n      case 20: {\n        // *******\n        // * DEC *\n        // *******\n\n        // Decrement memory by one:\n        temp = (this.load(addr) - 1) & 0xff;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp;\n        this.write(addr, temp);\n        break;\n      }\n      case 21: {\n        // *******\n        // * DEX *\n        // *******\n\n        // Decrement index X by one:\n        this.REG_X = (this.REG_X - 1) & 0xff;\n        this.F_SIGN = (this.REG_X >> 7) & 1;\n        this.F_ZERO = this.REG_X;\n        break;\n      }\n      case 22: {\n        // *******\n        // * DEY *\n        // *******\n\n        // Decrement index Y by one:\n        this.REG_Y = (this.REG_Y - 1) & 0xff;\n        this.F_SIGN = (this.REG_Y >> 7) & 1;\n        this.F_ZERO = this.REG_Y;\n        break;\n      }\n      case 23: {\n        // *******\n        // * EOR *\n        // *******\n\n        // XOR Memory with accumulator, store in accumulator:\n        this.REG_ACC = (this.load(addr) ^ this.REG_ACC) & 0xff;\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        this.F_ZERO = this.REG_ACC;\n        cycleCount += cycleAdd;\n        break;\n      }\n      case 24: {\n        // *******\n        // * INC *\n        // *******\n\n        // Increment memory by one:\n        temp = (this.load(addr) + 1) & 0xff;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp;\n        this.write(addr, temp & 0xff);\n        break;\n      }\n      case 25: {\n        // *******\n        // * INX *\n        // *******\n\n        // Increment index X by one:\n        this.REG_X = (this.REG_X + 1) & 0xff;\n        this.F_SIGN = (this.REG_X >> 7) & 1;\n        this.F_ZERO = this.REG_X;\n        break;\n      }\n      case 26: {\n        // *******\n        // * INY *\n        // *******\n\n        // Increment index Y by one:\n        this.REG_Y++;\n        this.REG_Y &= 0xff;\n        this.F_SIGN = (this.REG_Y >> 7) & 1;\n        this.F_ZERO = this.REG_Y;\n        break;\n      }\n      case 27: {\n        // *******\n        // * JMP *\n        // *******\n\n        // Jump to new location:\n        this.REG_PC = addr - 1;\n        break;\n      }\n      case 28: {\n        // *******\n        // * JSR *\n        // *******\n\n        // Jump to new location, saving return address.\n        // Push return address on stack:\n        this.push((this.REG_PC >> 8) & 255);\n        this.push(this.REG_PC & 255);\n        this.REG_PC = addr - 1;\n        break;\n      }\n      case 29: {\n        // *******\n        // * LDA *\n        // *******\n\n        // Load accumulator with memory:\n        this.REG_ACC = this.load(addr);\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        this.F_ZERO = this.REG_ACC;\n        cycleCount += cycleAdd;\n        break;\n      }\n      case 30: {\n        // *******\n        // * LDX *\n        // *******\n\n        // Load index X with memory:\n        this.REG_X = this.load(addr);\n        this.F_SIGN = (this.REG_X >> 7) & 1;\n        this.F_ZERO = this.REG_X;\n        cycleCount += cycleAdd;\n        break;\n      }\n      case 31: {\n        // *******\n        // * LDY *\n        // *******\n\n        // Load index Y with memory:\n        this.REG_Y = this.load(addr);\n        this.F_SIGN = (this.REG_Y >> 7) & 1;\n        this.F_ZERO = this.REG_Y;\n        cycleCount += cycleAdd;\n        break;\n      }\n      case 32: {\n        // *******\n        // * LSR *\n        // *******\n\n        // Shift right one bit:\n        if (addrMode === 4) {\n          // ADDR_ACC\n\n          temp = this.REG_ACC & 0xff;\n          this.F_CARRY = temp & 1;\n          temp >>= 1;\n          this.REG_ACC = temp;\n        } else {\n          temp = this.load(addr) & 0xff;\n          this.F_CARRY = temp & 1;\n          temp >>= 1;\n          this.write(addr, temp);\n        }\n        this.F_SIGN = 0;\n        this.F_ZERO = temp;\n        break;\n      }\n      case 33: {\n        // *******\n        // * NOP *\n        // *******\n\n        // No OPeration.\n        // Ignore.\n        break;\n      }\n      case 34: {\n        // *******\n        // * ORA *\n        // *******\n\n        // OR memory with accumulator, store in accumulator.\n        temp = (this.load(addr) | this.REG_ACC) & 255;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp;\n        this.REG_ACC = temp;\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n        break;\n      }\n      case 35: {\n        // *******\n        // * PHA *\n        // *******\n\n        // Push accumulator on stack\n        this.push(this.REG_ACC);\n        break;\n      }\n      case 36: {\n        // *******\n        // * PHP *\n        // *******\n\n        // Push processor status on stack\n        this.F_BRK = 1;\n        this.push(\n          this.F_CARRY |\n            ((this.F_ZERO === 0 ? 1 : 0) << 1) |\n            (this.F_INTERRUPT << 2) |\n            (this.F_DECIMAL << 3) |\n            (this.F_BRK << 4) |\n            (this.F_NOTUSED << 5) |\n            (this.F_OVERFLOW << 6) |\n            (this.F_SIGN << 7)\n        );\n        break;\n      }\n      case 37: {\n        // *******\n        // * PLA *\n        // *******\n\n        // Pull accumulator from stack\n        this.REG_ACC = this.pull();\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        this.F_ZERO = this.REG_ACC;\n        break;\n      }\n      case 38: {\n        // *******\n        // * PLP *\n        // *******\n\n        // Pull processor status from stack\n        temp = this.pull();\n        this.F_CARRY = temp & 1;\n        this.F_ZERO = ((temp >> 1) & 1) === 1 ? 0 : 1;\n        this.F_INTERRUPT = (temp >> 2) & 1;\n        this.F_DECIMAL = (temp >> 3) & 1;\n        this.F_BRK = (temp >> 4) & 1;\n        this.F_NOTUSED = (temp >> 5) & 1;\n        this.F_OVERFLOW = (temp >> 6) & 1;\n        this.F_SIGN = (temp >> 7) & 1;\n\n        this.F_NOTUSED = 1;\n        break;\n      }\n      case 39: {\n        // *******\n        // * ROL *\n        // *******\n\n        // Rotate one bit left\n        if (addrMode === 4) {\n          // ADDR_ACC = 4\n\n          temp = this.REG_ACC;\n          add = this.F_CARRY;\n          this.F_CARRY = (temp >> 7) & 1;\n          temp = ((temp << 1) & 0xff) + add;\n          this.REG_ACC = temp;\n        } else {\n          temp = this.load(addr);\n          add = this.F_CARRY;\n          this.F_CARRY = (temp >> 7) & 1;\n          temp = ((temp << 1) & 0xff) + add;\n          this.write(addr, temp);\n        }\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp;\n        break;\n      }\n      case 40: {\n        // *******\n        // * ROR *\n        // *******\n\n        // Rotate one bit right\n        if (addrMode === 4) {\n          // ADDR_ACC = 4\n\n          add = this.F_CARRY << 7;\n          this.F_CARRY = this.REG_ACC & 1;\n          temp = (this.REG_ACC >> 1) + add;\n          this.REG_ACC = temp;\n        } else {\n          temp = this.load(addr);\n          add = this.F_CARRY << 7;\n          this.F_CARRY = temp & 1;\n          temp = (temp >> 1) + add;\n          this.write(addr, temp);\n        }\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp;\n        break;\n      }\n      case 41: {\n        // *******\n        // * RTI *\n        // *******\n\n        // Return from interrupt. Pull status and PC from stack.\n\n        temp = this.pull();\n        this.F_CARRY = temp & 1;\n        this.F_ZERO = ((temp >> 1) & 1) === 0 ? 1 : 0;\n        this.F_INTERRUPT = (temp >> 2) & 1;\n        this.F_DECIMAL = (temp >> 3) & 1;\n        this.F_BRK = (temp >> 4) & 1;\n        this.F_NOTUSED = (temp >> 5) & 1;\n        this.F_OVERFLOW = (temp >> 6) & 1;\n        this.F_SIGN = (temp >> 7) & 1;\n\n        this.REG_PC = this.pull();\n        this.REG_PC += this.pull() << 8;\n        if (this.REG_PC === 0xffff) {\n          return;\n        }\n        this.REG_PC--;\n        this.F_NOTUSED = 1;\n        break;\n      }\n      case 42: {\n        // *******\n        // * RTS *\n        // *******\n\n        // Return from subroutine. Pull PC from stack.\n\n        this.REG_PC = this.pull();\n        this.REG_PC += this.pull() << 8;\n\n        if (this.REG_PC === 0xffff) {\n          return; // return from NSF play routine:\n        }\n        break;\n      }\n      case 43: {\n        // *******\n        // * SBC *\n        // *******\n\n        temp = this.REG_ACC - this.load(addr) - (1 - this.F_CARRY);\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp & 0xff;\n        if (\n          ((this.REG_ACC ^ temp) & 0x80) !== 0 &&\n          ((this.REG_ACC ^ this.load(addr)) & 0x80) !== 0\n        ) {\n          this.F_OVERFLOW = 1;\n        } else {\n          this.F_OVERFLOW = 0;\n        }\n        this.F_CARRY = temp < 0 ? 0 : 1;\n        this.REG_ACC = temp & 0xff;\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n        break;\n      }\n      case 44: {\n        // *******\n        // * SEC *\n        // *******\n\n        // Set carry flag\n        this.F_CARRY = 1;\n        break;\n      }\n      case 45: {\n        // *******\n        // * SED *\n        // *******\n\n        // Set decimal mode\n        this.F_DECIMAL = 1;\n        break;\n      }\n      case 46: {\n        // *******\n        // * SEI *\n        // *******\n\n        // Set interrupt disable status\n        this.F_INTERRUPT = 1;\n        break;\n      }\n      case 47: {\n        // *******\n        // * STA *\n        // *******\n\n        // Store accumulator in memory\n        this.write(addr, this.REG_ACC);\n        break;\n      }\n      case 48: {\n        // *******\n        // * STX *\n        // *******\n\n        // Store index X in memory\n        this.write(addr, this.REG_X);\n        break;\n      }\n      case 49: {\n        // *******\n        // * STY *\n        // *******\n\n        // Store index Y in memory:\n        this.write(addr, this.REG_Y);\n        break;\n      }\n      case 50: {\n        // *******\n        // * TAX *\n        // *******\n\n        // Transfer accumulator to index X:\n        this.REG_X = this.REG_ACC;\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        this.F_ZERO = this.REG_ACC;\n        break;\n      }\n      case 51: {\n        // *******\n        // * TAY *\n        // *******\n\n        // Transfer accumulator to index Y:\n        this.REG_Y = this.REG_ACC;\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        this.F_ZERO = this.REG_ACC;\n        break;\n      }\n      case 52: {\n        // *******\n        // * TSX *\n        // *******\n\n        // Transfer stack pointer to index X:\n        this.REG_X = this.REG_SP - 0x0100;\n        this.F_SIGN = (this.REG_SP >> 7) & 1;\n        this.F_ZERO = this.REG_X;\n        break;\n      }\n      case 53: {\n        // *******\n        // * TXA *\n        // *******\n\n        // Transfer index X to accumulator:\n        this.REG_ACC = this.REG_X;\n        this.F_SIGN = (this.REG_X >> 7) & 1;\n        this.F_ZERO = this.REG_X;\n        break;\n      }\n      case 54: {\n        // *******\n        // * TXS *\n        // *******\n\n        // Transfer index X to stack pointer:\n        this.REG_SP = this.REG_X + 0x0100;\n        this.stackWrap();\n        break;\n      }\n      case 55: {\n        // *******\n        // * TYA *\n        // *******\n\n        // Transfer index Y to accumulator:\n        this.REG_ACC = this.REG_Y;\n        this.F_SIGN = (this.REG_Y >> 7) & 1;\n        this.F_ZERO = this.REG_Y;\n        break;\n      }\n      case 56: {\n        // *******\n        // * ALR *\n        // *******\n\n        // Shift right one bit after ANDing:\n        temp = this.REG_ACC & this.load(addr);\n        this.F_CARRY = temp & 1;\n        this.REG_ACC = this.F_ZERO = temp >> 1;\n        this.F_SIGN = 0;\n        break;\n      }\n      case 57: {\n        // *******\n        // * ANC *\n        // *******\n\n        // AND accumulator, setting carry to bit 7 result.\n        this.REG_ACC = this.F_ZERO = this.REG_ACC & this.load(addr);\n        this.F_CARRY = this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        break;\n      }\n      case 58: {\n        // *******\n        // * ARR *\n        // *******\n\n        // Rotate right one bit after ANDing:\n        temp = this.REG_ACC & this.load(addr);\n        this.REG_ACC = this.F_ZERO = (temp >> 1) + (this.F_CARRY << 7);\n        this.F_SIGN = this.F_CARRY;\n        this.F_CARRY = (temp >> 7) & 1;\n        this.F_OVERFLOW = ((temp >> 7) ^ (temp >> 6)) & 1;\n        break;\n      }\n      case 59: {\n        // *******\n        // * AXS *\n        // *******\n\n        // Set X to (X AND A) - value.\n        temp = (this.REG_X & this.REG_ACC) - this.load(addr);\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp & 0xff;\n        if (\n          ((this.REG_X ^ temp) & 0x80) !== 0 &&\n          ((this.REG_X ^ this.load(addr)) & 0x80) !== 0\n        ) {\n          this.F_OVERFLOW = 1;\n        } else {\n          this.F_OVERFLOW = 0;\n        }\n        this.F_CARRY = temp < 0 ? 0 : 1;\n        this.REG_X = temp & 0xff;\n        break;\n      }\n      case 60: {\n        // *******\n        // * LAX *\n        // *******\n\n        // Load A and X with memory:\n        this.REG_ACC = this.REG_X = this.F_ZERO = this.load(addr);\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        cycleCount += cycleAdd;\n        break;\n      }\n      case 61: {\n        // *******\n        // * SAX *\n        // *******\n\n        // Store A AND X in memory:\n        this.write(addr, this.REG_ACC & this.REG_X);\n        break;\n      }\n      case 62: {\n        // *******\n        // * DCP *\n        // *******\n\n        // Decrement memory by one:\n        temp = (this.load(addr) - 1) & 0xff;\n        this.write(addr, temp);\n\n        // Then compare with the accumulator:\n        temp = this.REG_ACC - temp;\n        this.F_CARRY = temp >= 0 ? 1 : 0;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp & 0xff;\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n        break;\n      }\n      case 63: {\n        // *******\n        // * ISC *\n        // *******\n\n        // Increment memory by one:\n        temp = (this.load(addr) + 1) & 0xff;\n        this.write(addr, temp);\n\n        // Then subtract from the accumulator:\n        temp = this.REG_ACC - temp - (1 - this.F_CARRY);\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp & 0xff;\n        if (\n          ((this.REG_ACC ^ temp) & 0x80) !== 0 &&\n          ((this.REG_ACC ^ this.load(addr)) & 0x80) !== 0\n        ) {\n          this.F_OVERFLOW = 1;\n        } else {\n          this.F_OVERFLOW = 0;\n        }\n        this.F_CARRY = temp < 0 ? 0 : 1;\n        this.REG_ACC = temp & 0xff;\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n        break;\n      }\n      case 64: {\n        // *******\n        // * RLA *\n        // *******\n\n        // Rotate one bit left\n        temp = this.load(addr);\n        add = this.F_CARRY;\n        this.F_CARRY = (temp >> 7) & 1;\n        temp = ((temp << 1) & 0xff) + add;\n        this.write(addr, temp);\n\n        // Then AND with the accumulator.\n        this.REG_ACC = this.REG_ACC & temp;\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        this.F_ZERO = this.REG_ACC;\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n        break;\n      }\n      case 65: {\n        // *******\n        // * RRA *\n        // *******\n\n        // Rotate one bit right\n        temp = this.load(addr);\n        add = this.F_CARRY << 7;\n        this.F_CARRY = temp & 1;\n        temp = (temp >> 1) + add;\n        this.write(addr, temp);\n\n        // Then add to the accumulator\n        temp = this.REG_ACC + this.load(addr) + this.F_CARRY;\n\n        if (\n          ((this.REG_ACC ^ this.load(addr)) & 0x80) === 0 &&\n          ((this.REG_ACC ^ temp) & 0x80) !== 0\n        ) {\n          this.F_OVERFLOW = 1;\n        } else {\n          this.F_OVERFLOW = 0;\n        }\n        this.F_CARRY = temp > 255 ? 1 : 0;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp & 0xff;\n        this.REG_ACC = temp & 255;\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n        break;\n      }\n      case 66: {\n        // *******\n        // * SLO *\n        // *******\n\n        // Shift one bit left\n        temp = this.load(addr);\n        this.F_CARRY = (temp >> 7) & 1;\n        temp = (temp << 1) & 255;\n        this.write(addr, temp);\n\n        // Then OR with the accumulator.\n        this.REG_ACC = this.REG_ACC | temp;\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        this.F_ZERO = this.REG_ACC;\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n        break;\n      }\n      case 67: {\n        // *******\n        // * SRE *\n        // *******\n\n        // Shift one bit right\n        temp = this.load(addr) & 0xff;\n        this.F_CARRY = temp & 1;\n        temp >>= 1;\n        this.write(addr, temp);\n\n        // Then XOR with the accumulator.\n        this.REG_ACC = this.REG_ACC ^ temp;\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        this.F_ZERO = this.REG_ACC;\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n        break;\n      }\n      case 68: {\n        // *******\n        // * SKB *\n        // *******\n\n        // Do nothing\n        break;\n      }\n      case 69: {\n        // *******\n        // * IGN *\n        // *******\n\n        // Do nothing but load.\n        // TODO: Properly implement the double-reads.\n        this.load(addr);\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n        break;\n      }\n\n      default: {\n        // *******\n        // * ??? *\n        // *******\n\n        this.nes.stop();\n        this.nes.crashMessage =\n          \"Game crashed, invalid opcode at address $\" + opaddr.toString(16);\n        break;\n      }\n    } // end of switch\n\n    return cycleCount;\n  },\n\n  load: function(addr) {\n    if (addr < 0x2000) {\n      return this.mem[addr & 0x7ff];\n    } else {\n      return this.nes.mmap.load(addr);\n    }\n  },\n\n  load16bit: function(addr) {\n    if (addr < 0x1fff) {\n      return this.mem[addr & 0x7ff] | (this.mem[(addr + 1) & 0x7ff] << 8);\n    } else {\n      return this.nes.mmap.load(addr) | (this.nes.mmap.load(addr + 1) << 8);\n    }\n  },\n\n  write: function(addr, val) {\n    if (addr < 0x2000) {\n      this.mem[addr & 0x7ff] = val;\n    } else {\n      this.nes.mmap.write(addr, val);\n    }\n  },\n\n  requestIrq: function(type) {\n    if (this.irqRequested) {\n      if (type === this.IRQ_NORMAL) {\n        return;\n      }\n      // console.log(\"too fast irqs. type=\"+type);\n    }\n    this.irqRequested = true;\n    this.irqType = type;\n  },\n\n  push: function(value) {\n    this.nes.mmap.write(this.REG_SP, value);\n    this.REG_SP--;\n    this.REG_SP = 0x0100 | (this.REG_SP & 0xff);\n  },\n\n  stackWrap: function() {\n    this.REG_SP = 0x0100 | (this.REG_SP & 0xff);\n  },\n\n  pull: function() {\n    this.REG_SP++;\n    this.REG_SP = 0x0100 | (this.REG_SP & 0xff);\n    return this.nes.mmap.load(this.REG_SP);\n  },\n\n  pageCrossed: function(addr1, addr2) {\n    return (addr1 & 0xff00) !== (addr2 & 0xff00);\n  },\n\n  haltCycles: function(cycles) {\n    this.cyclesToHalt += cycles;\n  },\n\n  doNonMaskableInterrupt: function(status) {\n    if ((this.nes.mmap.load(0x2000) & 128) !== 0) {\n      // Check whether VBlank Interrupts are enabled\n\n      this.REG_PC_NEW++;\n      this.push((this.REG_PC_NEW >> 8) & 0xff);\n      this.push(this.REG_PC_NEW & 0xff);\n      //this.F_INTERRUPT_NEW = 1;\n      this.push(status);\n\n      this.REG_PC_NEW =\n        this.nes.mmap.load(0xfffa) | (this.nes.mmap.load(0xfffb) << 8);\n      this.REG_PC_NEW--;\n    }\n  },\n\n  doResetInterrupt: function() {\n    this.REG_PC_NEW =\n      this.nes.mmap.load(0xfffc) | (this.nes.mmap.load(0xfffd) << 8);\n    this.REG_PC_NEW--;\n  },\n\n  doIrq: function(status) {\n    this.REG_PC_NEW++;\n    this.push((this.REG_PC_NEW >> 8) & 0xff);\n    this.push(this.REG_PC_NEW & 0xff);\n    this.push(status);\n    this.F_INTERRUPT_NEW = 1;\n    this.F_BRK_NEW = 0;\n\n    this.REG_PC_NEW =\n      this.nes.mmap.load(0xfffe) | (this.nes.mmap.load(0xffff) << 8);\n    this.REG_PC_NEW--;\n  },\n\n  getStatus: function() {\n    return (\n      this.F_CARRY |\n      (this.F_ZERO << 1) |\n      (this.F_INTERRUPT << 2) |\n      (this.F_DECIMAL << 3) |\n      (this.F_BRK << 4) |\n      (this.F_NOTUSED << 5) |\n      (this.F_OVERFLOW << 6) |\n      (this.F_SIGN << 7)\n    );\n  },\n\n  setStatus: function(st) {\n    this.F_CARRY = st & 1;\n    this.F_ZERO = (st >> 1) & 1;\n    this.F_INTERRUPT = (st >> 2) & 1;\n    this.F_DECIMAL = (st >> 3) & 1;\n    this.F_BRK = (st >> 4) & 1;\n    this.F_NOTUSED = (st >> 5) & 1;\n    this.F_OVERFLOW = (st >> 6) & 1;\n    this.F_SIGN = (st >> 7) & 1;\n  },\n\n  JSON_PROPERTIES: [\n    \"mem\",\n    \"cyclesToHalt\",\n    \"irqRequested\",\n    \"irqType\",\n    // Registers\n    \"REG_ACC\",\n    \"REG_X\",\n    \"REG_Y\",\n    \"REG_SP\",\n    \"REG_PC\",\n    \"REG_PC_NEW\",\n    \"REG_STATUS\",\n    // Status\n    \"F_CARRY\",\n    \"F_DECIMAL\",\n    \"F_INTERRUPT\",\n    \"F_INTERRUPT_NEW\",\n    \"F_OVERFLOW\",\n    \"F_SIGN\",\n    \"F_ZERO\",\n    \"F_NOTUSED\",\n    \"F_NOTUSED_NEW\",\n    \"F_BRK\",\n    \"F_BRK_NEW\"\n  ],\n\n  toJSON: function() {\n    return utils.toJSON(this);\n  },\n\n  fromJSON: function(s) {\n    utils.fromJSON(this, s);\n  }\n};\n\n// Generates and provides an array of details about instructions\nvar OpData = function() {\n  this.opdata = new Array(256);\n\n  // Set all to invalid instruction (to detect crashes):\n  for (var i = 0; i < 256; i++) this.opdata[i] = 0xff;\n\n  // Now fill in all valid opcodes:\n\n  // ADC:\n  this.setOp(this.INS_ADC, 0x69, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_ADC, 0x65, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_ADC, 0x75, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_ADC, 0x6d, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_ADC, 0x7d, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_ADC, 0x79, this.ADDR_ABSY, 3, 4);\n  this.setOp(this.INS_ADC, 0x61, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_ADC, 0x71, this.ADDR_POSTIDXIND, 2, 5);\n\n  // AND:\n  this.setOp(this.INS_AND, 0x29, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_AND, 0x25, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_AND, 0x35, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_AND, 0x2d, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_AND, 0x3d, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_AND, 0x39, this.ADDR_ABSY, 3, 4);\n  this.setOp(this.INS_AND, 0x21, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_AND, 0x31, this.ADDR_POSTIDXIND, 2, 5);\n\n  // ASL:\n  this.setOp(this.INS_ASL, 0x0a, this.ADDR_ACC, 1, 2);\n  this.setOp(this.INS_ASL, 0x06, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_ASL, 0x16, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_ASL, 0x0e, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_ASL, 0x1e, this.ADDR_ABSX, 3, 7);\n\n  // BCC:\n  this.setOp(this.INS_BCC, 0x90, this.ADDR_REL, 2, 2);\n\n  // BCS:\n  this.setOp(this.INS_BCS, 0xb0, this.ADDR_REL, 2, 2);\n\n  // BEQ:\n  this.setOp(this.INS_BEQ, 0xf0, this.ADDR_REL, 2, 2);\n\n  // BIT:\n  this.setOp(this.INS_BIT, 0x24, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_BIT, 0x2c, this.ADDR_ABS, 3, 4);\n\n  // BMI:\n  this.setOp(this.INS_BMI, 0x30, this.ADDR_REL, 2, 2);\n\n  // BNE:\n  this.setOp(this.INS_BNE, 0xd0, this.ADDR_REL, 2, 2);\n\n  // BPL:\n  this.setOp(this.INS_BPL, 0x10, this.ADDR_REL, 2, 2);\n\n  // BRK:\n  this.setOp(this.INS_BRK, 0x00, this.ADDR_IMP, 1, 7);\n\n  // BVC:\n  this.setOp(this.INS_BVC, 0x50, this.ADDR_REL, 2, 2);\n\n  // BVS:\n  this.setOp(this.INS_BVS, 0x70, this.ADDR_REL, 2, 2);\n\n  // CLC:\n  this.setOp(this.INS_CLC, 0x18, this.ADDR_IMP, 1, 2);\n\n  // CLD:\n  this.setOp(this.INS_CLD, 0xd8, this.ADDR_IMP, 1, 2);\n\n  // CLI:\n  this.setOp(this.INS_CLI, 0x58, this.ADDR_IMP, 1, 2);\n\n  // CLV:\n  this.setOp(this.INS_CLV, 0xb8, this.ADDR_IMP, 1, 2);\n\n  // CMP:\n  this.setOp(this.INS_CMP, 0xc9, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_CMP, 0xc5, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_CMP, 0xd5, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_CMP, 0xcd, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_CMP, 0xdd, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_CMP, 0xd9, this.ADDR_ABSY, 3, 4);\n  this.setOp(this.INS_CMP, 0xc1, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_CMP, 0xd1, this.ADDR_POSTIDXIND, 2, 5);\n\n  // CPX:\n  this.setOp(this.INS_CPX, 0xe0, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_CPX, 0xe4, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_CPX, 0xec, this.ADDR_ABS, 3, 4);\n\n  // CPY:\n  this.setOp(this.INS_CPY, 0xc0, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_CPY, 0xc4, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_CPY, 0xcc, this.ADDR_ABS, 3, 4);\n\n  // DEC:\n  this.setOp(this.INS_DEC, 0xc6, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_DEC, 0xd6, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_DEC, 0xce, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_DEC, 0xde, this.ADDR_ABSX, 3, 7);\n\n  // DEX:\n  this.setOp(this.INS_DEX, 0xca, this.ADDR_IMP, 1, 2);\n\n  // DEY:\n  this.setOp(this.INS_DEY, 0x88, this.ADDR_IMP, 1, 2);\n\n  // EOR:\n  this.setOp(this.INS_EOR, 0x49, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_EOR, 0x45, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_EOR, 0x55, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_EOR, 0x4d, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_EOR, 0x5d, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_EOR, 0x59, this.ADDR_ABSY, 3, 4);\n  this.setOp(this.INS_EOR, 0x41, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_EOR, 0x51, this.ADDR_POSTIDXIND, 2, 5);\n\n  // INC:\n  this.setOp(this.INS_INC, 0xe6, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_INC, 0xf6, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_INC, 0xee, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_INC, 0xfe, this.ADDR_ABSX, 3, 7);\n\n  // INX:\n  this.setOp(this.INS_INX, 0xe8, this.ADDR_IMP, 1, 2);\n\n  // INY:\n  this.setOp(this.INS_INY, 0xc8, this.ADDR_IMP, 1, 2);\n\n  // JMP:\n  this.setOp(this.INS_JMP, 0x4c, this.ADDR_ABS, 3, 3);\n  this.setOp(this.INS_JMP, 0x6c, this.ADDR_INDABS, 3, 5);\n\n  // JSR:\n  this.setOp(this.INS_JSR, 0x20, this.ADDR_ABS, 3, 6);\n\n  // LDA:\n  this.setOp(this.INS_LDA, 0xa9, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_LDA, 0xa5, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_LDA, 0xb5, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_LDA, 0xad, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_LDA, 0xbd, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_LDA, 0xb9, this.ADDR_ABSY, 3, 4);\n  this.setOp(this.INS_LDA, 0xa1, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_LDA, 0xb1, this.ADDR_POSTIDXIND, 2, 5);\n\n  // LDX:\n  this.setOp(this.INS_LDX, 0xa2, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_LDX, 0xa6, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_LDX, 0xb6, this.ADDR_ZPY, 2, 4);\n  this.setOp(this.INS_LDX, 0xae, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_LDX, 0xbe, this.ADDR_ABSY, 3, 4);\n\n  // LDY:\n  this.setOp(this.INS_LDY, 0xa0, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_LDY, 0xa4, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_LDY, 0xb4, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_LDY, 0xac, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_LDY, 0xbc, this.ADDR_ABSX, 3, 4);\n\n  // LSR:\n  this.setOp(this.INS_LSR, 0x4a, this.ADDR_ACC, 1, 2);\n  this.setOp(this.INS_LSR, 0x46, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_LSR, 0x56, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_LSR, 0x4e, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_LSR, 0x5e, this.ADDR_ABSX, 3, 7);\n\n  // NOP:\n  this.setOp(this.INS_NOP, 0x1a, this.ADDR_IMP, 1, 2);\n  this.setOp(this.INS_NOP, 0x3a, this.ADDR_IMP, 1, 2);\n  this.setOp(this.INS_NOP, 0x5a, this.ADDR_IMP, 1, 2);\n  this.setOp(this.INS_NOP, 0x7a, this.ADDR_IMP, 1, 2);\n  this.setOp(this.INS_NOP, 0xda, this.ADDR_IMP, 1, 2);\n  this.setOp(this.INS_NOP, 0xea, this.ADDR_IMP, 1, 2);\n  this.setOp(this.INS_NOP, 0xfa, this.ADDR_IMP, 1, 2);\n\n  // ORA:\n  this.setOp(this.INS_ORA, 0x09, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_ORA, 0x05, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_ORA, 0x15, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_ORA, 0x0d, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_ORA, 0x1d, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_ORA, 0x19, this.ADDR_ABSY, 3, 4);\n  this.setOp(this.INS_ORA, 0x01, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_ORA, 0x11, this.ADDR_POSTIDXIND, 2, 5);\n\n  // PHA:\n  this.setOp(this.INS_PHA, 0x48, this.ADDR_IMP, 1, 3);\n\n  // PHP:\n  this.setOp(this.INS_PHP, 0x08, this.ADDR_IMP, 1, 3);\n\n  // PLA:\n  this.setOp(this.INS_PLA, 0x68, this.ADDR_IMP, 1, 4);\n\n  // PLP:\n  this.setOp(this.INS_PLP, 0x28, this.ADDR_IMP, 1, 4);\n\n  // ROL:\n  this.setOp(this.INS_ROL, 0x2a, this.ADDR_ACC, 1, 2);\n  this.setOp(this.INS_ROL, 0x26, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_ROL, 0x36, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_ROL, 0x2e, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_ROL, 0x3e, this.ADDR_ABSX, 3, 7);\n\n  // ROR:\n  this.setOp(this.INS_ROR, 0x6a, this.ADDR_ACC, 1, 2);\n  this.setOp(this.INS_ROR, 0x66, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_ROR, 0x76, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_ROR, 0x6e, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_ROR, 0x7e, this.ADDR_ABSX, 3, 7);\n\n  // RTI:\n  this.setOp(this.INS_RTI, 0x40, this.ADDR_IMP, 1, 6);\n\n  // RTS:\n  this.setOp(this.INS_RTS, 0x60, this.ADDR_IMP, 1, 6);\n\n  // SBC:\n  this.setOp(this.INS_SBC, 0xe9, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_SBC, 0xe5, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_SBC, 0xf5, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_SBC, 0xed, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_SBC, 0xfd, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_SBC, 0xf9, this.ADDR_ABSY, 3, 4);\n  this.setOp(this.INS_SBC, 0xe1, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_SBC, 0xf1, this.ADDR_POSTIDXIND, 2, 5);\n\n  // SEC:\n  this.setOp(this.INS_SEC, 0x38, this.ADDR_IMP, 1, 2);\n\n  // SED:\n  this.setOp(this.INS_SED, 0xf8, this.ADDR_IMP, 1, 2);\n\n  // SEI:\n  this.setOp(this.INS_SEI, 0x78, this.ADDR_IMP, 1, 2);\n\n  // STA:\n  this.setOp(this.INS_STA, 0x85, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_STA, 0x95, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_STA, 0x8d, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_STA, 0x9d, this.ADDR_ABSX, 3, 5);\n  this.setOp(this.INS_STA, 0x99, this.ADDR_ABSY, 3, 5);\n  this.setOp(this.INS_STA, 0x81, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_STA, 0x91, this.ADDR_POSTIDXIND, 2, 6);\n\n  // STX:\n  this.setOp(this.INS_STX, 0x86, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_STX, 0x96, this.ADDR_ZPY, 2, 4);\n  this.setOp(this.INS_STX, 0x8e, this.ADDR_ABS, 3, 4);\n\n  // STY:\n  this.setOp(this.INS_STY, 0x84, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_STY, 0x94, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_STY, 0x8c, this.ADDR_ABS, 3, 4);\n\n  // TAX:\n  this.setOp(this.INS_TAX, 0xaa, this.ADDR_IMP, 1, 2);\n\n  // TAY:\n  this.setOp(this.INS_TAY, 0xa8, this.ADDR_IMP, 1, 2);\n\n  // TSX:\n  this.setOp(this.INS_TSX, 0xba, this.ADDR_IMP, 1, 2);\n\n  // TXA:\n  this.setOp(this.INS_TXA, 0x8a, this.ADDR_IMP, 1, 2);\n\n  // TXS:\n  this.setOp(this.INS_TXS, 0x9a, this.ADDR_IMP, 1, 2);\n\n  // TYA:\n  this.setOp(this.INS_TYA, 0x98, this.ADDR_IMP, 1, 2);\n\n  // ALR:\n  this.setOp(this.INS_ALR, 0x4b, this.ADDR_IMM, 2, 2);\n\n  // ANC:\n  this.setOp(this.INS_ANC, 0x0b, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_ANC, 0x2b, this.ADDR_IMM, 2, 2);\n\n  // ARR:\n  this.setOp(this.INS_ARR, 0x6b, this.ADDR_IMM, 2, 2);\n\n  // AXS:\n  this.setOp(this.INS_AXS, 0xcb, this.ADDR_IMM, 2, 2);\n\n  // LAX:\n  this.setOp(this.INS_LAX, 0xa3, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_LAX, 0xa7, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_LAX, 0xaf, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_LAX, 0xb3, this.ADDR_POSTIDXIND, 2, 5);\n  this.setOp(this.INS_LAX, 0xb7, this.ADDR_ZPY, 2, 4);\n  this.setOp(this.INS_LAX, 0xbf, this.ADDR_ABSY, 3, 4);\n\n  // SAX:\n  this.setOp(this.INS_SAX, 0x83, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_SAX, 0x87, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_SAX, 0x8f, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_SAX, 0x97, this.ADDR_ZPY, 2, 4);\n\n  // DCP:\n  this.setOp(this.INS_DCP, 0xc3, this.ADDR_PREIDXIND, 2, 8);\n  this.setOp(this.INS_DCP, 0xc7, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_DCP, 0xcf, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_DCP, 0xd3, this.ADDR_POSTIDXIND, 2, 8);\n  this.setOp(this.INS_DCP, 0xd7, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_DCP, 0xdb, this.ADDR_ABSY, 3, 7);\n  this.setOp(this.INS_DCP, 0xdf, this.ADDR_ABSX, 3, 7);\n\n  // ISC:\n  this.setOp(this.INS_ISC, 0xe3, this.ADDR_PREIDXIND, 2, 8);\n  this.setOp(this.INS_ISC, 0xe7, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_ISC, 0xef, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_ISC, 0xf3, this.ADDR_POSTIDXIND, 2, 8);\n  this.setOp(this.INS_ISC, 0xf7, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_ISC, 0xfb, this.ADDR_ABSY, 3, 7);\n  this.setOp(this.INS_ISC, 0xff, this.ADDR_ABSX, 3, 7);\n\n  // RLA:\n  this.setOp(this.INS_RLA, 0x23, this.ADDR_PREIDXIND, 2, 8);\n  this.setOp(this.INS_RLA, 0x27, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_RLA, 0x2f, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_RLA, 0x33, this.ADDR_POSTIDXIND, 2, 8);\n  this.setOp(this.INS_RLA, 0x37, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_RLA, 0x3b, this.ADDR_ABSY, 3, 7);\n  this.setOp(this.INS_RLA, 0x3f, this.ADDR_ABSX, 3, 7);\n\n  // RRA:\n  this.setOp(this.INS_RRA, 0x63, this.ADDR_PREIDXIND, 2, 8);\n  this.setOp(this.INS_RRA, 0x67, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_RRA, 0x6f, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_RRA, 0x73, this.ADDR_POSTIDXIND, 2, 8);\n  this.setOp(this.INS_RRA, 0x77, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_RRA, 0x7b, this.ADDR_ABSY, 3, 7);\n  this.setOp(this.INS_RRA, 0x7f, this.ADDR_ABSX, 3, 7);\n\n  // SLO:\n  this.setOp(this.INS_SLO, 0x03, this.ADDR_PREIDXIND, 2, 8);\n  this.setOp(this.INS_SLO, 0x07, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_SLO, 0x0f, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_SLO, 0x13, this.ADDR_POSTIDXIND, 2, 8);\n  this.setOp(this.INS_SLO, 0x17, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_SLO, 0x1b, this.ADDR_ABSY, 3, 7);\n  this.setOp(this.INS_SLO, 0x1f, this.ADDR_ABSX, 3, 7);\n\n  // SRE:\n  this.setOp(this.INS_SRE, 0x43, this.ADDR_PREIDXIND, 2, 8);\n  this.setOp(this.INS_SRE, 0x47, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_SRE, 0x4f, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_SRE, 0x53, this.ADDR_POSTIDXIND, 2, 8);\n  this.setOp(this.INS_SRE, 0x57, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_SRE, 0x5b, this.ADDR_ABSY, 3, 7);\n  this.setOp(this.INS_SRE, 0x5f, this.ADDR_ABSX, 3, 7);\n\n  // SKB:\n  this.setOp(this.INS_SKB, 0x80, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_SKB, 0x82, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_SKB, 0x89, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_SKB, 0xc2, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_SKB, 0xe2, this.ADDR_IMM, 2, 2);\n\n  // SKB:\n  this.setOp(this.INS_IGN, 0x0c, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_IGN, 0x1c, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_IGN, 0x3c, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_IGN, 0x5c, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_IGN, 0x7c, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_IGN, 0xdc, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_IGN, 0xfc, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_IGN, 0x04, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_IGN, 0x44, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_IGN, 0x64, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_IGN, 0x14, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_IGN, 0x34, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_IGN, 0x54, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_IGN, 0x74, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_IGN, 0xd4, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_IGN, 0xf4, this.ADDR_ZPX, 2, 4);\n\n  // prettier-ignore\n  this.cycTable = new Array(\n    /*0x00*/ 7,6,2,8,3,3,5,5,3,2,2,2,4,4,6,6,\n    /*0x10*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,\n    /*0x20*/ 6,6,2,8,3,3,5,5,4,2,2,2,4,4,6,6,\n    /*0x30*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,\n    /*0x40*/ 6,6,2,8,3,3,5,5,3,2,2,2,3,4,6,6,\n    /*0x50*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,\n    /*0x60*/ 6,6,2,8,3,3,5,5,4,2,2,2,5,4,6,6,\n    /*0x70*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,\n    /*0x80*/ 2,6,2,6,3,3,3,3,2,2,2,2,4,4,4,4,\n    /*0x90*/ 2,6,2,6,4,4,4,4,2,5,2,5,5,5,5,5,\n    /*0xA0*/ 2,6,2,6,3,3,3,3,2,2,2,2,4,4,4,4,\n    /*0xB0*/ 2,5,2,5,4,4,4,4,2,4,2,4,4,4,4,4,\n    /*0xC0*/ 2,6,2,8,3,3,5,5,2,2,2,2,4,4,6,6,\n    /*0xD0*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,\n    /*0xE0*/ 2,6,3,8,3,3,5,5,2,2,2,2,4,4,6,6,\n    /*0xF0*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7\n  );\n\n  this.instname = new Array(70);\n\n  // Instruction Names:\n  this.instname[0] = \"ADC\";\n  this.instname[1] = \"AND\";\n  this.instname[2] = \"ASL\";\n  this.instname[3] = \"BCC\";\n  this.instname[4] = \"BCS\";\n  this.instname[5] = \"BEQ\";\n  this.instname[6] = \"BIT\";\n  this.instname[7] = \"BMI\";\n  this.instname[8] = \"BNE\";\n  this.instname[9] = \"BPL\";\n  this.instname[10] = \"BRK\";\n  this.instname[11] = \"BVC\";\n  this.instname[12] = \"BVS\";\n  this.instname[13] = \"CLC\";\n  this.instname[14] = \"CLD\";\n  this.instname[15] = \"CLI\";\n  this.instname[16] = \"CLV\";\n  this.instname[17] = \"CMP\";\n  this.instname[18] = \"CPX\";\n  this.instname[19] = \"CPY\";\n  this.instname[20] = \"DEC\";\n  this.instname[21] = \"DEX\";\n  this.instname[22] = \"DEY\";\n  this.instname[23] = \"EOR\";\n  this.instname[24] = \"INC\";\n  this.instname[25] = \"INX\";\n  this.instname[26] = \"INY\";\n  this.instname[27] = \"JMP\";\n  this.instname[28] = \"JSR\";\n  this.instname[29] = \"LDA\";\n  this.instname[30] = \"LDX\";\n  this.instname[31] = \"LDY\";\n  this.instname[32] = \"LSR\";\n  this.instname[33] = \"NOP\";\n  this.instname[34] = \"ORA\";\n  this.instname[35] = \"PHA\";\n  this.instname[36] = \"PHP\";\n  this.instname[37] = \"PLA\";\n  this.instname[38] = \"PLP\";\n  this.instname[39] = \"ROL\";\n  this.instname[40] = \"ROR\";\n  this.instname[41] = \"RTI\";\n  this.instname[42] = \"RTS\";\n  this.instname[43] = \"SBC\";\n  this.instname[44] = \"SEC\";\n  this.instname[45] = \"SED\";\n  this.instname[46] = \"SEI\";\n  this.instname[47] = \"STA\";\n  this.instname[48] = \"STX\";\n  this.instname[49] = \"STY\";\n  this.instname[50] = \"TAX\";\n  this.instname[51] = \"TAY\";\n  this.instname[52] = \"TSX\";\n  this.instname[53] = \"TXA\";\n  this.instname[54] = \"TXS\";\n  this.instname[55] = \"TYA\";\n  this.instname[56] = \"ALR\";\n  this.instname[57] = \"ANC\";\n  this.instname[58] = \"ARR\";\n  this.instname[59] = \"AXS\";\n  this.instname[60] = \"LAX\";\n  this.instname[61] = \"SAX\";\n  this.instname[62] = \"DCP\";\n  this.instname[63] = \"ISC\";\n  this.instname[64] = \"RLA\";\n  this.instname[65] = \"RRA\";\n  this.instname[66] = \"SLO\";\n  this.instname[67] = \"SRE\";\n  this.instname[68] = \"SKB\";\n  this.instname[69] = \"IGN\";\n\n  this.addrDesc = new Array(\n    \"Zero Page           \",\n    \"Relative            \",\n    \"Implied             \",\n    \"Absolute            \",\n    \"Accumulator         \",\n    \"Immediate           \",\n    \"Zero Page,X         \",\n    \"Zero Page,Y         \",\n    \"Absolute,X          \",\n    \"Absolute,Y          \",\n    \"Preindexed Indirect \",\n    \"Postindexed Indirect\",\n    \"Indirect Absolute   \"\n  );\n};\n\nOpData.prototype = {\n  INS_ADC: 0,\n  INS_AND: 1,\n  INS_ASL: 2,\n\n  INS_BCC: 3,\n  INS_BCS: 4,\n  INS_BEQ: 5,\n  INS_BIT: 6,\n  INS_BMI: 7,\n  INS_BNE: 8,\n  INS_BPL: 9,\n  INS_BRK: 10,\n  INS_BVC: 11,\n  INS_BVS: 12,\n\n  INS_CLC: 13,\n  INS_CLD: 14,\n  INS_CLI: 15,\n  INS_CLV: 16,\n  INS_CMP: 17,\n  INS_CPX: 18,\n  INS_CPY: 19,\n\n  INS_DEC: 20,\n  INS_DEX: 21,\n  INS_DEY: 22,\n\n  INS_EOR: 23,\n\n  INS_INC: 24,\n  INS_INX: 25,\n  INS_INY: 26,\n\n  INS_JMP: 27,\n  INS_JSR: 28,\n\n  INS_LDA: 29,\n  INS_LDX: 30,\n  INS_LDY: 31,\n  INS_LSR: 32,\n\n  INS_NOP: 33,\n\n  INS_ORA: 34,\n\n  INS_PHA: 35,\n  INS_PHP: 36,\n  INS_PLA: 37,\n  INS_PLP: 38,\n\n  INS_ROL: 39,\n  INS_ROR: 40,\n  INS_RTI: 41,\n  INS_RTS: 42,\n\n  INS_SBC: 43,\n  INS_SEC: 44,\n  INS_SED: 45,\n  INS_SEI: 46,\n  INS_STA: 47,\n  INS_STX: 48,\n  INS_STY: 49,\n\n  INS_TAX: 50,\n  INS_TAY: 51,\n  INS_TSX: 52,\n  INS_TXA: 53,\n  INS_TXS: 54,\n  INS_TYA: 55,\n\n  INS_ALR: 56,\n  INS_ANC: 57,\n  INS_ARR: 58,\n  INS_AXS: 59,\n  INS_LAX: 60,\n  INS_SAX: 61,\n  INS_DCP: 62,\n  INS_ISC: 63,\n  INS_RLA: 64,\n  INS_RRA: 65,\n  INS_SLO: 66,\n  INS_SRE: 67,\n  INS_SKB: 68,\n  INS_IGN: 69,\n\n  INS_DUMMY: 70, // dummy instruction used for 'halting' the processor some cycles\n\n  // -------------------------------- //\n\n  // Addressing modes:\n  ADDR_ZP: 0,\n  ADDR_REL: 1,\n  ADDR_IMP: 2,\n  ADDR_ABS: 3,\n  ADDR_ACC: 4,\n  ADDR_IMM: 5,\n  ADDR_ZPX: 6,\n  ADDR_ZPY: 7,\n  ADDR_ABSX: 8,\n  ADDR_ABSY: 9,\n  ADDR_PREIDXIND: 10,\n  ADDR_POSTIDXIND: 11,\n  ADDR_INDABS: 12,\n\n  setOp: function(inst, op, addr, size, cycles) {\n    this.opdata[op] =\n      (inst & 0xff) |\n      ((addr & 0xff) << 8) |\n      ((size & 0xff) << 16) |\n      ((cycles & 0xff) << 24);\n  }\n};\n\nmodule.exports = CPU;\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Tile = __webpack_require__(2);\nvar utils = __webpack_require__(0);\n\nvar PPU = function(nes) {\n  this.nes = nes;\n\n  // Keep Chrome happy\n  this.vramMem = null;\n  this.spriteMem = null;\n  this.vramAddress = null;\n  this.vramTmpAddress = null;\n  this.vramBufferedReadValue = null;\n  this.firstWrite = null;\n  this.sramAddress = null;\n  this.currentMirroring = null;\n  this.requestEndFrame = null;\n  this.nmiOk = null;\n  this.dummyCycleToggle = null;\n  this.validTileData = null;\n  this.nmiCounter = null;\n  this.scanlineAlreadyRendered = null;\n  this.f_nmiOnVblank = null;\n  this.f_spriteSize = null;\n  this.f_bgPatternTable = null;\n  this.f_spPatternTable = null;\n  this.f_addrInc = null;\n  this.f_nTblAddress = null;\n  this.f_color = null;\n  this.f_spVisibility = null;\n  this.f_bgVisibility = null;\n  this.f_spClipping = null;\n  this.f_bgClipping = null;\n  this.f_dispType = null;\n  this.cntFV = null;\n  this.cntV = null;\n  this.cntH = null;\n  this.cntVT = null;\n  this.cntHT = null;\n  this.regFV = null;\n  this.regV = null;\n  this.regH = null;\n  this.regVT = null;\n  this.regHT = null;\n  this.regFH = null;\n  this.regS = null;\n  this.curNt = null;\n  this.attrib = null;\n  this.buffer = null;\n  this.bgbuffer = null;\n  this.pixrendered = null;\n\n  this.validTileData = null;\n  this.scantile = null;\n  this.scanline = null;\n  this.lastRenderedScanline = null;\n  this.curX = null;\n  this.sprX = null;\n  this.sprY = null;\n  this.sprTile = null;\n  this.sprCol = null;\n  this.vertFlip = null;\n  this.horiFlip = null;\n  this.bgPriority = null;\n  this.spr0HitX = null;\n  this.spr0HitY = null;\n  this.hitSpr0 = null;\n  this.sprPalette = null;\n  this.imgPalette = null;\n  this.ptTile = null;\n  this.ntable1 = null;\n  this.currentMirroring = null;\n  this.nameTable = null;\n  this.vramMirrorTable = null;\n  this.palTable = null;\n\n  // Rendering Options:\n  this.showSpr0Hit = false;\n  this.clipToTvSize = true;\n\n  this.reset();\n};\n\nPPU.prototype = {\n  // Status flags:\n  STATUS_VRAMWRITE: 4,\n  STATUS_SLSPRITECOUNT: 5,\n  STATUS_SPRITE0HIT: 6,\n  STATUS_VBLANK: 7,\n\n  reset: function() {\n    var i;\n\n    // Memory\n    this.vramMem = new Uint8Array(0x8000);\n    this.spriteMem = new Uint8Array(0x100);\n    for (i = 0; i < this.vramMem.length; i++) {\n      this.vramMem[i] = 0;\n    }\n    for (i = 0; i < this.spriteMem.length; i++) {\n      this.spriteMem[i] = 0;\n    }\n\n    // VRAM I/O:\n    this.vramAddress = null;\n    this.vramTmpAddress = null;\n    this.vramBufferedReadValue = 0;\n    this.firstWrite = true; // VRAM/Scroll Hi/Lo latch\n\n    // SPR-RAM I/O:\n    this.sramAddress = 0; // 8-bit only.\n\n    this.currentMirroring = -1;\n    this.requestEndFrame = false;\n    this.nmiOk = false;\n    this.dummyCycleToggle = false;\n    this.validTileData = false;\n    this.nmiCounter = 0;\n    this.scanlineAlreadyRendered = null;\n\n    // Control Flags Register 1:\n    this.f_nmiOnVblank = 0; // NMI on VBlank. 0=disable, 1=enable\n    this.f_spriteSize = 0; // Sprite size. 0=8x8, 1=8x16\n    this.f_bgPatternTable = 0; // Background Pattern Table address. 0=0x0000,1=0x1000\n    this.f_spPatternTable = 0; // Sprite Pattern Table address. 0=0x0000,1=0x1000\n    this.f_addrInc = 0; // PPU Address Increment. 0=1,1=32\n    this.f_nTblAddress = 0; // Name Table Address. 0=0x2000,1=0x2400,2=0x2800,3=0x2C00\n\n    // Control Flags Register 2:\n    this.f_color = 0; // Background color. 0=black, 1=blue, 2=green, 4=red\n    this.f_spVisibility = 0; // Sprite visibility. 0=not displayed,1=displayed\n    this.f_bgVisibility = 0; // Background visibility. 0=Not Displayed,1=displayed\n    this.f_spClipping = 0; // Sprite clipping. 0=Sprites invisible in left 8-pixel column,1=No clipping\n    this.f_bgClipping = 0; // Background clipping. 0=BG invisible in left 8-pixel column, 1=No clipping\n    this.f_dispType = 0; // Display type. 0=color, 1=monochrome\n\n    // Counters:\n    this.cntFV = 0;\n    this.cntV = 0;\n    this.cntH = 0;\n    this.cntVT = 0;\n    this.cntHT = 0;\n\n    // Registers:\n    this.regFV = 0;\n    this.regV = 0;\n    this.regH = 0;\n    this.regVT = 0;\n    this.regHT = 0;\n    this.regFH = 0;\n    this.regS = 0;\n\n    // These are temporary variables used in rendering and sound procedures.\n    // Their states outside of those procedures can be ignored.\n    // TODO: the use of this is a bit weird, investigate\n    this.curNt = null;\n\n    // Variables used when rendering:\n    this.attrib = new Array(32);\n    this.buffer = new Uint32Array(256 * 240);\n    this.bgbuffer = new Uint32Array(256 * 240);\n    this.pixrendered = new Uint32Array(256 * 240);\n\n    this.validTileData = null;\n\n    this.scantile = new Array(32);\n\n    // Initialize misc vars:\n    this.scanline = 0;\n    this.lastRenderedScanline = -1;\n    this.curX = 0;\n\n    // Sprite data:\n    this.sprX = new Array(64); // X coordinate\n    this.sprY = new Array(64); // Y coordinate\n    this.sprTile = new Array(64); // Tile Index (into pattern table)\n    this.sprCol = new Array(64); // Upper two bits of color\n    this.vertFlip = new Array(64); // Vertical Flip\n    this.horiFlip = new Array(64); // Horizontal Flip\n    this.bgPriority = new Array(64); // Background priority\n    this.spr0HitX = 0; // Sprite #0 hit X coordinate\n    this.spr0HitY = 0; // Sprite #0 hit Y coordinate\n    this.hitSpr0 = false;\n\n    // Palette data:\n    this.sprPalette = new Uint32Array(16);\n    this.imgPalette = new Uint32Array(16);\n\n    // Create pattern table tile buffers:\n    this.ptTile = new Array(512);\n    for (i = 0; i < 512; i++) {\n      this.ptTile[i] = new Tile();\n    }\n\n    // Create nametable buffers:\n    // Name table data:\n    this.ntable1 = new Array(4);\n    this.currentMirroring = -1;\n    this.nameTable = new Array(4);\n    for (i = 0; i < 4; i++) {\n      this.nameTable[i] = new NameTable(32, 32, \"Nt\" + i);\n    }\n\n    // Initialize mirroring lookup table:\n    this.vramMirrorTable = new Uint16Array(0x8000);\n    for (i = 0; i < 0x8000; i++) {\n      this.vramMirrorTable[i] = i;\n    }\n\n    this.palTable = new PaletteTable();\n    this.palTable.loadNTSCPalette();\n    //this.palTable.loadDefaultPalette();\n\n    this.updateControlReg1(0);\n    this.updateControlReg2(0);\n  },\n\n  // Sets Nametable mirroring.\n  setMirroring: function(mirroring) {\n    if (mirroring === this.currentMirroring) {\n      return;\n    }\n\n    this.currentMirroring = mirroring;\n    this.triggerRendering();\n\n    // Remove mirroring:\n    if (this.vramMirrorTable === null) {\n      this.vramMirrorTable = new Uint16Array(0x8000);\n    }\n    for (var i = 0; i < 0x8000; i++) {\n      this.vramMirrorTable[i] = i;\n    }\n\n    // Palette mirroring:\n    this.defineMirrorRegion(0x3f20, 0x3f00, 0x20);\n    this.defineMirrorRegion(0x3f40, 0x3f00, 0x20);\n    this.defineMirrorRegion(0x3f80, 0x3f00, 0x20);\n    this.defineMirrorRegion(0x3fc0, 0x3f00, 0x20);\n\n    // Additional mirroring:\n    this.defineMirrorRegion(0x3000, 0x2000, 0xf00);\n    this.defineMirrorRegion(0x4000, 0x0000, 0x4000);\n\n    if (mirroring === this.nes.rom.HORIZONTAL_MIRRORING) {\n      // Horizontal mirroring.\n\n      this.ntable1[0] = 0;\n      this.ntable1[1] = 0;\n      this.ntable1[2] = 1;\n      this.ntable1[3] = 1;\n\n      this.defineMirrorRegion(0x2400, 0x2000, 0x400);\n      this.defineMirrorRegion(0x2c00, 0x2800, 0x400);\n    } else if (mirroring === this.nes.rom.VERTICAL_MIRRORING) {\n      // Vertical mirroring.\n\n      this.ntable1[0] = 0;\n      this.ntable1[1] = 1;\n      this.ntable1[2] = 0;\n      this.ntable1[3] = 1;\n\n      this.defineMirrorRegion(0x2800, 0x2000, 0x400);\n      this.defineMirrorRegion(0x2c00, 0x2400, 0x400);\n    } else if (mirroring === this.nes.rom.SINGLESCREEN_MIRRORING) {\n      // Single Screen mirroring\n\n      this.ntable1[0] = 0;\n      this.ntable1[1] = 0;\n      this.ntable1[2] = 0;\n      this.ntable1[3] = 0;\n\n      this.defineMirrorRegion(0x2400, 0x2000, 0x400);\n      this.defineMirrorRegion(0x2800, 0x2000, 0x400);\n      this.defineMirrorRegion(0x2c00, 0x2000, 0x400);\n    } else if (mirroring === this.nes.rom.SINGLESCREEN_MIRRORING2) {\n      this.ntable1[0] = 1;\n      this.ntable1[1] = 1;\n      this.ntable1[2] = 1;\n      this.ntable1[3] = 1;\n\n      this.defineMirrorRegion(0x2400, 0x2400, 0x400);\n      this.defineMirrorRegion(0x2800, 0x2400, 0x400);\n      this.defineMirrorRegion(0x2c00, 0x2400, 0x400);\n    } else {\n      // Assume Four-screen mirroring.\n\n      this.ntable1[0] = 0;\n      this.ntable1[1] = 1;\n      this.ntable1[2] = 2;\n      this.ntable1[3] = 3;\n    }\n  },\n\n  // Define a mirrored area in the address lookup table.\n  // Assumes the regions don't overlap.\n  // The 'to' region is the region that is physically in memory.\n  defineMirrorRegion: function(fromStart, toStart, size) {\n    for (var i = 0; i < size; i++) {\n      this.vramMirrorTable[fromStart + i] = toStart + i;\n    }\n  },\n\n  startVBlank: function() {\n    // Do NMI:\n    this.nes.cpu.requestIrq(this.nes.cpu.IRQ_NMI);\n\n    // Make sure everything is rendered:\n    if (this.lastRenderedScanline < 239) {\n      this.renderFramePartially(\n        this.lastRenderedScanline + 1,\n        240 - this.lastRenderedScanline\n      );\n    }\n\n    // End frame:\n    this.endFrame();\n\n    // Reset scanline counter:\n    this.lastRenderedScanline = -1;\n  },\n\n  endScanline: function() {\n    switch (this.scanline) {\n      case 19:\n        // Dummy scanline.\n        // May be variable length:\n        if (this.dummyCycleToggle) {\n          // Remove dead cycle at end of scanline,\n          // for next scanline:\n          this.curX = 1;\n          this.dummyCycleToggle = !this.dummyCycleToggle;\n        }\n        break;\n\n      case 20:\n        // Clear VBlank flag:\n        this.setStatusFlag(this.STATUS_VBLANK, false);\n\n        // Clear Sprite #0 hit flag:\n        this.setStatusFlag(this.STATUS_SPRITE0HIT, false);\n        this.hitSpr0 = false;\n        this.spr0HitX = -1;\n        this.spr0HitY = -1;\n\n        if (this.f_bgVisibility === 1 || this.f_spVisibility === 1) {\n          // Update counters:\n          this.cntFV = this.regFV;\n          this.cntV = this.regV;\n          this.cntH = this.regH;\n          this.cntVT = this.regVT;\n          this.cntHT = this.regHT;\n\n          if (this.f_bgVisibility === 1) {\n            // Render dummy scanline:\n            this.renderBgScanline(false, 0);\n          }\n        }\n\n        if (this.f_bgVisibility === 1 && this.f_spVisibility === 1) {\n          // Check sprite 0 hit for first scanline:\n          this.checkSprite0(0);\n        }\n\n        if (this.f_bgVisibility === 1 || this.f_spVisibility === 1) {\n          // Clock mapper IRQ Counter:\n          this.nes.mmap.clockIrqCounter();\n        }\n        break;\n\n      case 261:\n        // Dead scanline, no rendering.\n        // Set VINT:\n        this.setStatusFlag(this.STATUS_VBLANK, true);\n        this.requestEndFrame = true;\n        this.nmiCounter = 9;\n\n        // Wrap around:\n        this.scanline = -1; // will be incremented to 0\n\n        break;\n\n      default:\n        if (this.scanline >= 21 && this.scanline <= 260) {\n          // Render normally:\n          if (this.f_bgVisibility === 1) {\n            if (!this.scanlineAlreadyRendered) {\n              // update scroll:\n              this.cntHT = this.regHT;\n              this.cntH = this.regH;\n              this.renderBgScanline(true, this.scanline + 1 - 21);\n            }\n            this.scanlineAlreadyRendered = false;\n\n            // Check for sprite 0 (next scanline):\n            if (!this.hitSpr0 && this.f_spVisibility === 1) {\n              if (\n                this.sprX[0] >= -7 &&\n                this.sprX[0] < 256 &&\n                this.sprY[0] + 1 <= this.scanline - 20 &&\n                this.sprY[0] + 1 + (this.f_spriteSize === 0 ? 8 : 16) >=\n                  this.scanline - 20\n              ) {\n                if (this.checkSprite0(this.scanline - 20)) {\n                  this.hitSpr0 = true;\n                }\n              }\n            }\n          }\n\n          if (this.f_bgVisibility === 1 || this.f_spVisibility === 1) {\n            // Clock mapper IRQ Counter:\n            this.nes.mmap.clockIrqCounter();\n          }\n        }\n    }\n\n    this.scanline++;\n    this.regsToAddress();\n    this.cntsToAddress();\n  },\n\n  startFrame: function() {\n    // Set background color:\n    var bgColor = 0;\n\n    if (this.f_dispType === 0) {\n      // Color display.\n      // f_color determines color emphasis.\n      // Use first entry of image palette as BG color.\n      bgColor = this.imgPalette[0];\n    } else {\n      // Monochrome display.\n      // f_color determines the bg color.\n      switch (this.f_color) {\n        case 0:\n          // Black\n          bgColor = 0x00000;\n          break;\n        case 1:\n          // Green\n          bgColor = 0x00ff00;\n          break;\n        case 2:\n          // Blue\n          bgColor = 0xff0000;\n          break;\n        case 3:\n          // Invalid. Use black.\n          bgColor = 0x000000;\n          break;\n        case 4:\n          // Red\n          bgColor = 0x0000ff;\n          break;\n        default:\n          // Invalid. Use black.\n          bgColor = 0x0;\n      }\n    }\n\n    var buffer = this.buffer;\n    var i;\n    for (i = 0; i < 256 * 240; i++) {\n      buffer[i] = bgColor;\n    }\n    var pixrendered = this.pixrendered;\n    for (i = 0; i < pixrendered.length; i++) {\n      pixrendered[i] = 65;\n    }\n  },\n\n  endFrame: function() {\n    var i, x, y;\n    var buffer = this.buffer;\n\n    // Draw spr#0 hit coordinates:\n    if (this.showSpr0Hit) {\n      // Spr 0 position:\n      if (\n        this.sprX[0] >= 0 &&\n        this.sprX[0] < 256 &&\n        this.sprY[0] >= 0 &&\n        this.sprY[0] < 240\n      ) {\n        for (i = 0; i < 256; i++) {\n          buffer[(this.sprY[0] << 8) + i] = 0xff5555;\n        }\n        for (i = 0; i < 240; i++) {\n          buffer[(i << 8) + this.sprX[0]] = 0xff5555;\n        }\n      }\n      // Hit position:\n      if (\n        this.spr0HitX >= 0 &&\n        this.spr0HitX < 256 &&\n        this.spr0HitY >= 0 &&\n        this.spr0HitY < 240\n      ) {\n        for (i = 0; i < 256; i++) {\n          buffer[(this.spr0HitY << 8) + i] = 0x55ff55;\n        }\n        for (i = 0; i < 240; i++) {\n          buffer[(i << 8) + this.spr0HitX] = 0x55ff55;\n        }\n      }\n    }\n\n    // This is a bit lazy..\n    // if either the sprites or the background should be clipped,\n    // both are clipped after rendering is finished.\n    if (\n      this.clipToTvSize ||\n      this.f_bgClipping === 0 ||\n      this.f_spClipping === 0\n    ) {\n      // Clip left 8-pixels column:\n      for (y = 0; y < 240; y++) {\n        for (x = 0; x < 8; x++) {\n          buffer[(y << 8) + x] = 0;\n        }\n      }\n    }\n\n    if (this.clipToTvSize) {\n      // Clip right 8-pixels column too:\n      for (y = 0; y < 240; y++) {\n        for (x = 0; x < 8; x++) {\n          buffer[(y << 8) + 255 - x] = 0;\n        }\n      }\n    }\n\n    // Clip top and bottom 8 pixels:\n    if (this.clipToTvSize) {\n      for (y = 0; y < 8; y++) {\n        for (x = 0; x < 256; x++) {\n          buffer[(y << 8) + x] = 0;\n          buffer[((239 - y) << 8) + x] = 0;\n        }\n      }\n    }\n\n    this.nes.ui.writeFrame(buffer);\n  },\n\n  updateControlReg1: function(value) {\n    this.triggerRendering();\n\n    this.f_nmiOnVblank = (value >> 7) & 1;\n    this.f_spriteSize = (value >> 5) & 1;\n    this.f_bgPatternTable = (value >> 4) & 1;\n    this.f_spPatternTable = (value >> 3) & 1;\n    this.f_addrInc = (value >> 2) & 1;\n    this.f_nTblAddress = value & 3;\n\n    this.regV = (value >> 1) & 1;\n    this.regH = value & 1;\n    this.regS = (value >> 4) & 1;\n  },\n\n  updateControlReg2: function(value) {\n    this.triggerRendering();\n\n    this.f_color = (value >> 5) & 7;\n    this.f_spVisibility = (value >> 4) & 1;\n    this.f_bgVisibility = (value >> 3) & 1;\n    this.f_spClipping = (value >> 2) & 1;\n    this.f_bgClipping = (value >> 1) & 1;\n    this.f_dispType = value & 1;\n\n    if (this.f_dispType === 0) {\n      this.palTable.setEmphasis(this.f_color);\n    }\n    this.updatePalettes();\n  },\n\n  setStatusFlag: function(flag, value) {\n    var n = 1 << flag;\n    this.nes.cpu.mem[0x2002] =\n      (this.nes.cpu.mem[0x2002] & (255 - n)) | (value ? n : 0);\n  },\n\n  // CPU Register $2002:\n  // Read the Status Register.\n  readStatusRegister: function() {\n    var tmp = this.nes.cpu.mem[0x2002];\n\n    // Reset scroll & VRAM Address toggle:\n    this.firstWrite = true;\n\n    // Clear VBlank flag:\n    this.setStatusFlag(this.STATUS_VBLANK, false);\n\n    // Fetch status data:\n    return tmp;\n  },\n\n  // CPU Register $2003:\n  // Write the SPR-RAM address that is used for sramWrite (Register 0x2004 in CPU memory map)\n  writeSRAMAddress: function(address) {\n    this.sramAddress = address;\n  },\n\n  // CPU Register $2004 (R):\n  // Read from SPR-RAM (Sprite RAM).\n  // The address should be set first.\n  sramLoad: function() {\n    /*short tmp = sprMem.load(sramAddress);\n        sramAddress++; // Increment address\n        sramAddress%=0x100;\n        return tmp;*/\n    return this.spriteMem[this.sramAddress];\n  },\n\n  // CPU Register $2004 (W):\n  // Write to SPR-RAM (Sprite RAM).\n  // The address should be set first.\n  sramWrite: function(value) {\n    this.spriteMem[this.sramAddress] = value;\n    this.spriteRamWriteUpdate(this.sramAddress, value);\n    this.sramAddress++; // Increment address\n    this.sramAddress %= 0x100;\n  },\n\n  // CPU Register $2005:\n  // Write to scroll registers.\n  // The first write is the vertical offset, the second is the\n  // horizontal offset:\n  scrollWrite: function(value) {\n    this.triggerRendering();\n\n    if (this.firstWrite) {\n      // First write, horizontal scroll:\n      this.regHT = (value >> 3) & 31;\n      this.regFH = value & 7;\n    } else {\n      // Second write, vertical scroll:\n      this.regFV = value & 7;\n      this.regVT = (value >> 3) & 31;\n    }\n    this.firstWrite = !this.firstWrite;\n  },\n\n  // CPU Register $2006:\n  // Sets the adress used when reading/writing from/to VRAM.\n  // The first write sets the high byte, the second the low byte.\n  writeVRAMAddress: function(address) {\n    if (this.firstWrite) {\n      this.regFV = (address >> 4) & 3;\n      this.regV = (address >> 3) & 1;\n      this.regH = (address >> 2) & 1;\n      this.regVT = (this.regVT & 7) | ((address & 3) << 3);\n    } else {\n      this.triggerRendering();\n\n      this.regVT = (this.regVT & 24) | ((address >> 5) & 7);\n      this.regHT = address & 31;\n\n      this.cntFV = this.regFV;\n      this.cntV = this.regV;\n      this.cntH = this.regH;\n      this.cntVT = this.regVT;\n      this.cntHT = this.regHT;\n\n      this.checkSprite0(this.scanline - 20);\n    }\n\n    this.firstWrite = !this.firstWrite;\n\n    // Invoke mapper latch:\n    this.cntsToAddress();\n    if (this.vramAddress < 0x2000) {\n      this.nes.mmap.latchAccess(this.vramAddress);\n    }\n  },\n\n  // CPU Register $2007(R):\n  // Read from PPU memory. The address should be set first.\n  vramLoad: function() {\n    var tmp;\n\n    this.cntsToAddress();\n    this.regsToAddress();\n\n    // If address is in range 0x0000-0x3EFF, return buffered values:\n    if (this.vramAddress <= 0x3eff) {\n      tmp = this.vramBufferedReadValue;\n\n      // Update buffered value:\n      if (this.vramAddress < 0x2000) {\n        this.vramBufferedReadValue = this.vramMem[this.vramAddress];\n      } else {\n        this.vramBufferedReadValue = this.mirroredLoad(this.vramAddress);\n      }\n\n      // Mapper latch access:\n      if (this.vramAddress < 0x2000) {\n        this.nes.mmap.latchAccess(this.vramAddress);\n      }\n\n      // Increment by either 1 or 32, depending on d2 of Control Register 1:\n      this.vramAddress += this.f_addrInc === 1 ? 32 : 1;\n\n      this.cntsFromAddress();\n      this.regsFromAddress();\n\n      return tmp; // Return the previous buffered value.\n    }\n\n    // No buffering in this mem range. Read normally.\n    tmp = this.mirroredLoad(this.vramAddress);\n\n    // Increment by either 1 or 32, depending on d2 of Control Register 1:\n    this.vramAddress += this.f_addrInc === 1 ? 32 : 1;\n\n    this.cntsFromAddress();\n    this.regsFromAddress();\n\n    return tmp;\n  },\n\n  // CPU Register $2007(W):\n  // Write to PPU memory. The address should be set first.\n  vramWrite: function(value) {\n    this.triggerRendering();\n    this.cntsToAddress();\n    this.regsToAddress();\n\n    if (this.vramAddress >= 0x2000) {\n      // Mirroring is used.\n      this.mirroredWrite(this.vramAddress, value);\n    } else {\n      // Write normally.\n      this.writeMem(this.vramAddress, value);\n\n      // Invoke mapper latch:\n      this.nes.mmap.latchAccess(this.vramAddress);\n    }\n\n    // Increment by either 1 or 32, depending on d2 of Control Register 1:\n    this.vramAddress += this.f_addrInc === 1 ? 32 : 1;\n    this.regsFromAddress();\n    this.cntsFromAddress();\n  },\n\n  // CPU Register $4014:\n  // Write 256 bytes of main memory\n  // into Sprite RAM.\n  sramDMA: function(value) {\n    var baseAddress = value * 0x100;\n    var data;\n    for (var i = this.sramAddress; i < 256; i++) {\n      data = this.nes.cpu.mem[baseAddress + i];\n      this.spriteMem[i] = data;\n      this.spriteRamWriteUpdate(i, data);\n    }\n\n    this.nes.cpu.haltCycles(513);\n  },\n\n  // Updates the scroll registers from a new VRAM address.\n  regsFromAddress: function() {\n    var address = (this.vramTmpAddress >> 8) & 0xff;\n    this.regFV = (address >> 4) & 7;\n    this.regV = (address >> 3) & 1;\n    this.regH = (address >> 2) & 1;\n    this.regVT = (this.regVT & 7) | ((address & 3) << 3);\n\n    address = this.vramTmpAddress & 0xff;\n    this.regVT = (this.regVT & 24) | ((address >> 5) & 7);\n    this.regHT = address & 31;\n  },\n\n  // Updates the scroll registers from a new VRAM address.\n  cntsFromAddress: function() {\n    var address = (this.vramAddress >> 8) & 0xff;\n    this.cntFV = (address >> 4) & 3;\n    this.cntV = (address >> 3) & 1;\n    this.cntH = (address >> 2) & 1;\n    this.cntVT = (this.cntVT & 7) | ((address & 3) << 3);\n\n    address = this.vramAddress & 0xff;\n    this.cntVT = (this.cntVT & 24) | ((address >> 5) & 7);\n    this.cntHT = address & 31;\n  },\n\n  regsToAddress: function() {\n    var b1 = (this.regFV & 7) << 4;\n    b1 |= (this.regV & 1) << 3;\n    b1 |= (this.regH & 1) << 2;\n    b1 |= (this.regVT >> 3) & 3;\n\n    var b2 = (this.regVT & 7) << 5;\n    b2 |= this.regHT & 31;\n\n    this.vramTmpAddress = ((b1 << 8) | b2) & 0x7fff;\n  },\n\n  cntsToAddress: function() {\n    var b1 = (this.cntFV & 7) << 4;\n    b1 |= (this.cntV & 1) << 3;\n    b1 |= (this.cntH & 1) << 2;\n    b1 |= (this.cntVT >> 3) & 3;\n\n    var b2 = (this.cntVT & 7) << 5;\n    b2 |= this.cntHT & 31;\n\n    this.vramAddress = ((b1 << 8) | b2) & 0x7fff;\n  },\n\n  incTileCounter: function(count) {\n    for (var i = count; i !== 0; i--) {\n      this.cntHT++;\n      if (this.cntHT === 32) {\n        this.cntHT = 0;\n        this.cntVT++;\n        if (this.cntVT >= 30) {\n          this.cntH++;\n          if (this.cntH === 2) {\n            this.cntH = 0;\n            this.cntV++;\n            if (this.cntV === 2) {\n              this.cntV = 0;\n              this.cntFV++;\n              this.cntFV &= 0x7;\n            }\n          }\n        }\n      }\n    }\n  },\n\n  // Reads from memory, taking into account\n  // mirroring/mapping of address ranges.\n  mirroredLoad: function(address) {\n    return this.vramMem[this.vramMirrorTable[address]];\n  },\n\n  // Writes to memory, taking into account\n  // mirroring/mapping of address ranges.\n  mirroredWrite: function(address, value) {\n    if (address >= 0x3f00 && address < 0x3f20) {\n      // Palette write mirroring.\n      if (address === 0x3f00 || address === 0x3f10) {\n        this.writeMem(0x3f00, value);\n        this.writeMem(0x3f10, value);\n      } else if (address === 0x3f04 || address === 0x3f14) {\n        this.writeMem(0x3f04, value);\n        this.writeMem(0x3f14, value);\n      } else if (address === 0x3f08 || address === 0x3f18) {\n        this.writeMem(0x3f08, value);\n        this.writeMem(0x3f18, value);\n      } else if (address === 0x3f0c || address === 0x3f1c) {\n        this.writeMem(0x3f0c, value);\n        this.writeMem(0x3f1c, value);\n      } else {\n        this.writeMem(address, value);\n      }\n    } else {\n      // Use lookup table for mirrored address:\n      if (address < this.vramMirrorTable.length) {\n        this.writeMem(this.vramMirrorTable[address], value);\n      } else {\n        throw new Error(\"Invalid VRAM address: \" + address.toString(16));\n      }\n    }\n  },\n\n  triggerRendering: function() {\n    if (this.scanline >= 21 && this.scanline <= 260) {\n      // Render sprites, and combine:\n      this.renderFramePartially(\n        this.lastRenderedScanline + 1,\n        this.scanline - 21 - this.lastRenderedScanline\n      );\n\n      // Set last rendered scanline:\n      this.lastRenderedScanline = this.scanline - 21;\n    }\n  },\n\n  renderFramePartially: function(startScan, scanCount) {\n    if (this.f_spVisibility === 1) {\n      this.renderSpritesPartially(startScan, scanCount, true);\n    }\n\n    if (this.f_bgVisibility === 1) {\n      var si = startScan << 8;\n      var ei = (startScan + scanCount) << 8;\n      if (ei > 0xf000) {\n        ei = 0xf000;\n      }\n      var buffer = this.buffer;\n      var bgbuffer = this.bgbuffer;\n      var pixrendered = this.pixrendered;\n      for (var destIndex = si; destIndex < ei; destIndex++) {\n        if (pixrendered[destIndex] > 0xff) {\n          buffer[destIndex] = bgbuffer[destIndex];\n        }\n      }\n    }\n\n    if (this.f_spVisibility === 1) {\n      this.renderSpritesPartially(startScan, scanCount, false);\n    }\n\n    this.validTileData = false;\n  },\n\n  renderBgScanline: function(bgbuffer, scan) {\n    var baseTile = this.regS === 0 ? 0 : 256;\n    var destIndex = (scan << 8) - this.regFH;\n\n    this.curNt = this.ntable1[this.cntV + this.cntV + this.cntH];\n\n    this.cntHT = this.regHT;\n    this.cntH = this.regH;\n    this.curNt = this.ntable1[this.cntV + this.cntV + this.cntH];\n\n    if (scan < 240 && scan - this.cntFV >= 0) {\n      var tscanoffset = this.cntFV << 3;\n      var scantile = this.scantile;\n      var attrib = this.attrib;\n      var ptTile = this.ptTile;\n      var nameTable = this.nameTable;\n      var imgPalette = this.imgPalette;\n      var pixrendered = this.pixrendered;\n      var targetBuffer = bgbuffer ? this.bgbuffer : this.buffer;\n\n      var t, tpix, att, col;\n\n      for (var tile = 0; tile < 32; tile++) {\n        if (scan >= 0) {\n          // Fetch tile & attrib data:\n          if (this.validTileData) {\n            // Get data from array:\n            t = scantile[tile];\n            if (typeof t === \"undefined\") {\n              continue;\n            }\n            tpix = t.pix;\n            att = attrib[tile];\n          } else {\n            // Fetch data:\n            t =\n              ptTile[\n                baseTile +\n                  nameTable[this.curNt].getTileIndex(this.cntHT, this.cntVT)\n              ];\n            if (typeof t === \"undefined\") {\n              continue;\n            }\n            tpix = t.pix;\n            att = nameTable[this.curNt].getAttrib(this.cntHT, this.cntVT);\n            scantile[tile] = t;\n            attrib[tile] = att;\n          }\n\n          // Render tile scanline:\n          var sx = 0;\n          var x = (tile << 3) - this.regFH;\n\n          if (x > -8) {\n            if (x < 0) {\n              destIndex -= x;\n              sx = -x;\n            }\n            if (t.opaque[this.cntFV]) {\n              for (; sx < 8; sx++) {\n                targetBuffer[destIndex] =\n                  imgPalette[tpix[tscanoffset + sx] + att];\n                pixrendered[destIndex] |= 256;\n                destIndex++;\n              }\n            } else {\n              for (; sx < 8; sx++) {\n                col = tpix[tscanoffset + sx];\n                if (col !== 0) {\n                  targetBuffer[destIndex] = imgPalette[col + att];\n                  pixrendered[destIndex] |= 256;\n                }\n                destIndex++;\n              }\n            }\n          }\n        }\n\n        // Increase Horizontal Tile Counter:\n        if (++this.cntHT === 32) {\n          this.cntHT = 0;\n          this.cntH++;\n          this.cntH %= 2;\n          this.curNt = this.ntable1[(this.cntV << 1) + this.cntH];\n        }\n      }\n\n      // Tile data for one row should now have been fetched,\n      // so the data in the array is valid.\n      this.validTileData = true;\n    }\n\n    // update vertical scroll:\n    this.cntFV++;\n    if (this.cntFV === 8) {\n      this.cntFV = 0;\n      this.cntVT++;\n      if (this.cntVT === 30) {\n        this.cntVT = 0;\n        this.cntV++;\n        this.cntV %= 2;\n        this.curNt = this.ntable1[(this.cntV << 1) + this.cntH];\n      } else if (this.cntVT === 32) {\n        this.cntVT = 0;\n      }\n\n      // Invalidate fetched data:\n      this.validTileData = false;\n    }\n  },\n\n  renderSpritesPartially: function(startscan, scancount, bgPri) {\n    if (this.f_spVisibility === 1) {\n      for (var i = 0; i < 64; i++) {\n        if (\n          this.bgPriority[i] === bgPri &&\n          this.sprX[i] >= 0 &&\n          this.sprX[i] < 256 &&\n          this.sprY[i] + 8 >= startscan &&\n          this.sprY[i] < startscan + scancount\n        ) {\n          // Show sprite.\n          if (this.f_spriteSize === 0) {\n            // 8x8 sprites\n\n            this.srcy1 = 0;\n            this.srcy2 = 8;\n\n            if (this.sprY[i] < startscan) {\n              this.srcy1 = startscan - this.sprY[i] - 1;\n            }\n\n            if (this.sprY[i] + 8 > startscan + scancount) {\n              this.srcy2 = startscan + scancount - this.sprY[i] + 1;\n            }\n\n            if (this.f_spPatternTable === 0) {\n              this.ptTile[this.sprTile[i]].render(\n                this.buffer,\n                0,\n                this.srcy1,\n                8,\n                this.srcy2,\n                this.sprX[i],\n                this.sprY[i] + 1,\n                this.sprCol[i],\n                this.sprPalette,\n                this.horiFlip[i],\n                this.vertFlip[i],\n                i,\n                this.pixrendered\n              );\n            } else {\n              this.ptTile[this.sprTile[i] + 256].render(\n                this.buffer,\n                0,\n                this.srcy1,\n                8,\n                this.srcy2,\n                this.sprX[i],\n                this.sprY[i] + 1,\n                this.sprCol[i],\n                this.sprPalette,\n                this.horiFlip[i],\n                this.vertFlip[i],\n                i,\n                this.pixrendered\n              );\n            }\n          } else {\n            // 8x16 sprites\n            var top = this.sprTile[i];\n            if ((top & 1) !== 0) {\n              top = this.sprTile[i] - 1 + 256;\n            }\n\n            var srcy1 = 0;\n            var srcy2 = 8;\n\n            if (this.sprY[i] < startscan) {\n              srcy1 = startscan - this.sprY[i] - 1;\n            }\n\n            if (this.sprY[i] + 8 > startscan + scancount) {\n              srcy2 = startscan + scancount - this.sprY[i];\n            }\n\n            this.ptTile[top + (this.vertFlip[i] ? 1 : 0)].render(\n              this.buffer,\n              0,\n              srcy1,\n              8,\n              srcy2,\n              this.sprX[i],\n              this.sprY[i] + 1,\n              this.sprCol[i],\n              this.sprPalette,\n              this.horiFlip[i],\n              this.vertFlip[i],\n              i,\n              this.pixrendered\n            );\n\n            srcy1 = 0;\n            srcy2 = 8;\n\n            if (this.sprY[i] + 8 < startscan) {\n              srcy1 = startscan - (this.sprY[i] + 8 + 1);\n            }\n\n            if (this.sprY[i] + 16 > startscan + scancount) {\n              srcy2 = startscan + scancount - (this.sprY[i] + 8);\n            }\n\n            this.ptTile[top + (this.vertFlip[i] ? 0 : 1)].render(\n              this.buffer,\n              0,\n              srcy1,\n              8,\n              srcy2,\n              this.sprX[i],\n              this.sprY[i] + 1 + 8,\n              this.sprCol[i],\n              this.sprPalette,\n              this.horiFlip[i],\n              this.vertFlip[i],\n              i,\n              this.pixrendered\n            );\n          }\n        }\n      }\n    }\n  },\n\n  checkSprite0: function(scan) {\n    this.spr0HitX = -1;\n    this.spr0HitY = -1;\n\n    var toffset;\n    var tIndexAdd = this.f_spPatternTable === 0 ? 0 : 256;\n    var x, y, t, i;\n    var bufferIndex;\n\n    x = this.sprX[0];\n    y = this.sprY[0] + 1;\n\n    if (this.f_spriteSize === 0) {\n      // 8x8 sprites.\n\n      // Check range:\n      if (y <= scan && y + 8 > scan && x >= -7 && x < 256) {\n        // Sprite is in range.\n        // Draw scanline:\n        t = this.ptTile[this.sprTile[0] + tIndexAdd];\n\n        if (this.vertFlip[0]) {\n          toffset = 7 - (scan - y);\n        } else {\n          toffset = scan - y;\n        }\n        toffset *= 8;\n\n        bufferIndex = scan * 256 + x;\n        if (this.horiFlip[0]) {\n          for (i = 7; i >= 0; i--) {\n            if (x >= 0 && x < 256) {\n              if (\n                bufferIndex >= 0 &&\n                bufferIndex < 61440 &&\n                this.pixrendered[bufferIndex] !== 0\n              ) {\n                if (t.pix[toffset + i] !== 0) {\n                  this.spr0HitX = bufferIndex % 256;\n                  this.spr0HitY = scan;\n                  return true;\n                }\n              }\n            }\n            x++;\n            bufferIndex++;\n          }\n        } else {\n          for (i = 0; i < 8; i++) {\n            if (x >= 0 && x < 256) {\n              if (\n                bufferIndex >= 0 &&\n                bufferIndex < 61440 &&\n                this.pixrendered[bufferIndex] !== 0\n              ) {\n                if (t.pix[toffset + i] !== 0) {\n                  this.spr0HitX = bufferIndex % 256;\n                  this.spr0HitY = scan;\n                  return true;\n                }\n              }\n            }\n            x++;\n            bufferIndex++;\n          }\n        }\n      }\n    } else {\n      // 8x16 sprites:\n\n      // Check range:\n      if (y <= scan && y + 16 > scan && x >= -7 && x < 256) {\n        // Sprite is in range.\n        // Draw scanline:\n\n        if (this.vertFlip[0]) {\n          toffset = 15 - (scan - y);\n        } else {\n          toffset = scan - y;\n        }\n\n        if (toffset < 8) {\n          // first half of sprite.\n          t = this.ptTile[\n            this.sprTile[0] +\n              (this.vertFlip[0] ? 1 : 0) +\n              ((this.sprTile[0] & 1) !== 0 ? 255 : 0)\n          ];\n        } else {\n          // second half of sprite.\n          t = this.ptTile[\n            this.sprTile[0] +\n              (this.vertFlip[0] ? 0 : 1) +\n              ((this.sprTile[0] & 1) !== 0 ? 255 : 0)\n          ];\n          if (this.vertFlip[0]) {\n            toffset = 15 - toffset;\n          } else {\n            toffset -= 8;\n          }\n        }\n        toffset *= 8;\n\n        bufferIndex = scan * 256 + x;\n        if (this.horiFlip[0]) {\n          for (i = 7; i >= 0; i--) {\n            if (x >= 0 && x < 256) {\n              if (\n                bufferIndex >= 0 &&\n                bufferIndex < 61440 &&\n                this.pixrendered[bufferIndex] !== 0\n              ) {\n                if (t.pix[toffset + i] !== 0) {\n                  this.spr0HitX = bufferIndex % 256;\n                  this.spr0HitY = scan;\n                  return true;\n                }\n              }\n            }\n            x++;\n            bufferIndex++;\n          }\n        } else {\n          for (i = 0; i < 8; i++) {\n            if (x >= 0 && x < 256) {\n              if (\n                bufferIndex >= 0 &&\n                bufferIndex < 61440 &&\n                this.pixrendered[bufferIndex] !== 0\n              ) {\n                if (t.pix[toffset + i] !== 0) {\n                  this.spr0HitX = bufferIndex % 256;\n                  this.spr0HitY = scan;\n                  return true;\n                }\n              }\n            }\n            x++;\n            bufferIndex++;\n          }\n        }\n      }\n    }\n\n    return false;\n  },\n\n  // This will write to PPU memory, and\n  // update internally buffered data\n  // appropriately.\n  writeMem: function(address, value) {\n    this.vramMem[address] = value;\n\n    // Update internally buffered data:\n    if (address < 0x2000) {\n      this.vramMem[address] = value;\n      this.patternWrite(address, value);\n    } else if (address >= 0x2000 && address < 0x23c0) {\n      this.nameTableWrite(this.ntable1[0], address - 0x2000, value);\n    } else if (address >= 0x23c0 && address < 0x2400) {\n      this.attribTableWrite(this.ntable1[0], address - 0x23c0, value);\n    } else if (address >= 0x2400 && address < 0x27c0) {\n      this.nameTableWrite(this.ntable1[1], address - 0x2400, value);\n    } else if (address >= 0x27c0 && address < 0x2800) {\n      this.attribTableWrite(this.ntable1[1], address - 0x27c0, value);\n    } else if (address >= 0x2800 && address < 0x2bc0) {\n      this.nameTableWrite(this.ntable1[2], address - 0x2800, value);\n    } else if (address >= 0x2bc0 && address < 0x2c00) {\n      this.attribTableWrite(this.ntable1[2], address - 0x2bc0, value);\n    } else if (address >= 0x2c00 && address < 0x2fc0) {\n      this.nameTableWrite(this.ntable1[3], address - 0x2c00, value);\n    } else if (address >= 0x2fc0 && address < 0x3000) {\n      this.attribTableWrite(this.ntable1[3], address - 0x2fc0, value);\n    } else if (address >= 0x3f00 && address < 0x3f20) {\n      this.updatePalettes();\n    }\n  },\n\n  // Reads data from $3f00 to $f20\n  // into the two buffered palettes.\n  updatePalettes: function() {\n    var i;\n\n    for (i = 0; i < 16; i++) {\n      if (this.f_dispType === 0) {\n        this.imgPalette[i] = this.palTable.getEntry(\n          this.vramMem[0x3f00 + i] & 63\n        );\n      } else {\n        this.imgPalette[i] = this.palTable.getEntry(\n          this.vramMem[0x3f00 + i] & 32\n        );\n      }\n    }\n    for (i = 0; i < 16; i++) {\n      if (this.f_dispType === 0) {\n        this.sprPalette[i] = this.palTable.getEntry(\n          this.vramMem[0x3f10 + i] & 63\n        );\n      } else {\n        this.sprPalette[i] = this.palTable.getEntry(\n          this.vramMem[0x3f10 + i] & 32\n        );\n      }\n    }\n  },\n\n  // Updates the internal pattern\n  // table buffers with this new byte.\n  // In vNES, there is a version of this with 4 arguments which isn't used.\n  patternWrite: function(address, value) {\n    var tileIndex = Math.floor(address / 16);\n    var leftOver = address % 16;\n    if (leftOver < 8) {\n      this.ptTile[tileIndex].setScanline(\n        leftOver,\n        value,\n        this.vramMem[address + 8]\n      );\n    } else {\n      this.ptTile[tileIndex].setScanline(\n        leftOver - 8,\n        this.vramMem[address - 8],\n        value\n      );\n    }\n  },\n\n  // Updates the internal name table buffers\n  // with this new byte.\n  nameTableWrite: function(index, address, value) {\n    this.nameTable[index].tile[address] = value;\n\n    // Update Sprite #0 hit:\n    //updateSpr0Hit();\n    this.checkSprite0(this.scanline - 20);\n  },\n\n  // Updates the internal pattern\n  // table buffers with this new attribute\n  // table byte.\n  attribTableWrite: function(index, address, value) {\n    this.nameTable[index].writeAttrib(address, value);\n  },\n\n  // Updates the internally buffered sprite\n  // data with this new byte of info.\n  spriteRamWriteUpdate: function(address, value) {\n    var tIndex = Math.floor(address / 4);\n\n    if (tIndex === 0) {\n      //updateSpr0Hit();\n      this.checkSprite0(this.scanline - 20);\n    }\n\n    if (address % 4 === 0) {\n      // Y coordinate\n      this.sprY[tIndex] = value;\n    } else if (address % 4 === 1) {\n      // Tile index\n      this.sprTile[tIndex] = value;\n    } else if (address % 4 === 2) {\n      // Attributes\n      this.vertFlip[tIndex] = (value & 0x80) !== 0;\n      this.horiFlip[tIndex] = (value & 0x40) !== 0;\n      this.bgPriority[tIndex] = (value & 0x20) !== 0;\n      this.sprCol[tIndex] = (value & 3) << 2;\n    } else if (address % 4 === 3) {\n      // X coordinate\n      this.sprX[tIndex] = value;\n    }\n  },\n\n  doNMI: function() {\n    // Set VBlank flag:\n    this.setStatusFlag(this.STATUS_VBLANK, true);\n    //nes.getCpu().doNonMaskableInterrupt();\n    this.nes.cpu.requestIrq(this.nes.cpu.IRQ_NMI);\n  },\n\n  isPixelWhite: function(x, y) {\n    this.triggerRendering();\n    return this.nes.ppu.buffer[(y << 8) + x] === 0xffffff;\n  },\n\n  JSON_PROPERTIES: [\n    // Memory\n    \"vramMem\",\n    \"spriteMem\",\n    // Counters\n    \"cntFV\",\n    \"cntV\",\n    \"cntH\",\n    \"cntVT\",\n    \"cntHT\",\n    // Registers\n    \"regFV\",\n    \"regV\",\n    \"regH\",\n    \"regVT\",\n    \"regHT\",\n    \"regFH\",\n    \"regS\",\n    // VRAM addr\n    \"vramAddress\",\n    \"vramTmpAddress\",\n    // Control/Status registers\n    \"f_nmiOnVblank\",\n    \"f_spriteSize\",\n    \"f_bgPatternTable\",\n    \"f_spPatternTable\",\n    \"f_addrInc\",\n    \"f_nTblAddress\",\n    \"f_color\",\n    \"f_spVisibility\",\n    \"f_bgVisibility\",\n    \"f_spClipping\",\n    \"f_bgClipping\",\n    \"f_dispType\",\n    // VRAM I/O\n    \"vramBufferedReadValue\",\n    \"firstWrite\",\n    // Mirroring\n    \"currentMirroring\",\n    \"vramMirrorTable\",\n    \"ntable1\",\n    // SPR-RAM I/O\n    \"sramAddress\",\n    // Sprites. Most sprite data is rebuilt from spriteMem\n    \"hitSpr0\",\n    // Palettes\n    \"sprPalette\",\n    \"imgPalette\",\n    // Rendering progression\n    \"curX\",\n    \"scanline\",\n    \"lastRenderedScanline\",\n    \"curNt\",\n    \"scantile\",\n    // Used during rendering\n    \"attrib\",\n    \"buffer\",\n    \"bgbuffer\",\n    \"pixrendered\",\n    // Misc\n    \"requestEndFrame\",\n    \"nmiOk\",\n    \"dummyCycleToggle\",\n    \"nmiCounter\",\n    \"validTileData\",\n    \"scanlineAlreadyRendered\"\n  ],\n\n  toJSON: function() {\n    var i;\n    var state = utils.toJSON(this);\n\n    state.nameTable = [];\n    for (i = 0; i < this.nameTable.length; i++) {\n      state.nameTable[i] = this.nameTable[i].toJSON();\n    }\n\n    state.ptTile = [];\n    for (i = 0; i < this.ptTile.length; i++) {\n      state.ptTile[i] = this.ptTile[i].toJSON();\n    }\n\n    return state;\n  },\n\n  fromJSON: function(state) {\n    var i;\n\n    utils.fromJSON(this, state);\n\n    for (i = 0; i < this.nameTable.length; i++) {\n      this.nameTable[i].fromJSON(state.nameTable[i]);\n    }\n\n    for (i = 0; i < this.ptTile.length; i++) {\n      this.ptTile[i].fromJSON(state.ptTile[i]);\n    }\n\n    // Sprite data:\n    for (i = 0; i < this.spriteMem.length; i++) {\n      this.spriteRamWriteUpdate(i, this.spriteMem[i]);\n    }\n  }\n};\n\nvar NameTable = function(width, height, name) {\n  this.width = width;\n  this.height = height;\n  this.name = name;\n\n  this.tile = new Uint8Array(width * height);\n  this.attrib = new Uint8Array(width * height);\n  for (var i = 0; i < width * height; i++) {\n    this.tile[i] = 0;\n    this.attrib[i] = 0;\n  }\n};\n\nNameTable.prototype = {\n  getTileIndex: function(x, y) {\n    return this.tile[y * this.width + x];\n  },\n\n  getAttrib: function(x, y) {\n    return this.attrib[y * this.width + x];\n  },\n\n  writeAttrib: function(index, value) {\n    var basex = (index % 8) * 4;\n    var basey = Math.floor(index / 8) * 4;\n    var add;\n    var tx, ty;\n    var attindex;\n\n    for (var sqy = 0; sqy < 2; sqy++) {\n      for (var sqx = 0; sqx < 2; sqx++) {\n        add = (value >> (2 * (sqy * 2 + sqx))) & 3;\n        for (var y = 0; y < 2; y++) {\n          for (var x = 0; x < 2; x++) {\n            tx = basex + sqx * 2 + x;\n            ty = basey + sqy * 2 + y;\n            attindex = ty * this.width + tx;\n            this.attrib[attindex] = (add << 2) & 12;\n          }\n        }\n      }\n    }\n  },\n\n  toJSON: function() {\n    return {\n      tile: this.tile,\n      attrib: this.attrib\n    };\n  },\n\n  fromJSON: function(s) {\n    this.tile = s.tile;\n    this.attrib = s.attrib;\n  }\n};\n\nvar PaletteTable = function() {\n  this.curTable = new Uint32Array(64);\n  this.emphTable = new Array(8);\n  this.currentEmph = -1;\n};\n\nPaletteTable.prototype = {\n  reset: function() {\n    this.setEmphasis(0);\n  },\n\n  loadNTSCPalette: function() {\n    // prettier-ignore\n    this.curTable = new Uint32Array([0x525252, 0xB40000, 0xA00000, 0xB1003D, 0x740069, 0x00005B, 0x00005F, 0x001840, 0x002F10, 0x084A08, 0x006700, 0x124200, 0x6D2800, 0x000000, 0x000000, 0x000000, 0xC4D5E7, 0xFF4000, 0xDC0E22, 0xFF476B, 0xD7009F, 0x680AD7, 0x0019BC, 0x0054B1, 0x006A5B, 0x008C03, 0x00AB00, 0x2C8800, 0xA47200, 0x000000, 0x000000, 0x000000, 0xF8F8F8, 0xFFAB3C, 0xFF7981, 0xFF5BC5, 0xFF48F2, 0xDF49FF, 0x476DFF, 0x00B4F7, 0x00E0FF, 0x00E375, 0x03F42B, 0x78B82E, 0xE5E218, 0x787878, 0x000000, 0x000000, 0xFFFFFF, 0xFFF2BE, 0xF8B8B8, 0xF8B8D8, 0xFFB6FF, 0xFFC3FF, 0xC7D1FF, 0x9ADAFF, 0x88EDF8, 0x83FFDD, 0xB8F8B8, 0xF5F8AC, 0xFFFFB0, 0xF8D8F8, 0x000000, 0x000000]);\n    this.makeTables();\n    this.setEmphasis(0);\n  },\n\n  loadPALPalette: function() {\n    // prettier-ignore\n    this.curTable = new Uint32Array([0x525252, 0xB40000, 0xA00000, 0xB1003D, 0x740069, 0x00005B, 0x00005F, 0x001840, 0x002F10, 0x084A08, 0x006700, 0x124200, 0x6D2800, 0x000000, 0x000000, 0x000000, 0xC4D5E7, 0xFF4000, 0xDC0E22, 0xFF476B, 0xD7009F, 0x680AD7, 0x0019BC, 0x0054B1, 0x006A5B, 0x008C03, 0x00AB00, 0x2C8800, 0xA47200, 0x000000, 0x000000, 0x000000, 0xF8F8F8, 0xFFAB3C, 0xFF7981, 0xFF5BC5, 0xFF48F2, 0xDF49FF, 0x476DFF, 0x00B4F7, 0x00E0FF, 0x00E375, 0x03F42B, 0x78B82E, 0xE5E218, 0x787878, 0x000000, 0x000000, 0xFFFFFF, 0xFFF2BE, 0xF8B8B8, 0xF8B8D8, 0xFFB6FF, 0xFFC3FF, 0xC7D1FF, 0x9ADAFF, 0x88EDF8, 0x83FFDD, 0xB8F8B8, 0xF5F8AC, 0xFFFFB0, 0xF8D8F8, 0x000000, 0x000000]);\n    this.makeTables();\n    this.setEmphasis(0);\n  },\n\n  makeTables: function() {\n    var r, g, b, col, i, rFactor, gFactor, bFactor;\n\n    // Calculate a table for each possible emphasis setting:\n    for (var emph = 0; emph < 8; emph++) {\n      // Determine color component factors:\n      rFactor = 1.0;\n      gFactor = 1.0;\n      bFactor = 1.0;\n\n      if ((emph & 1) !== 0) {\n        rFactor = 0.75;\n        bFactor = 0.75;\n      }\n      if ((emph & 2) !== 0) {\n        rFactor = 0.75;\n        gFactor = 0.75;\n      }\n      if ((emph & 4) !== 0) {\n        gFactor = 0.75;\n        bFactor = 0.75;\n      }\n\n      this.emphTable[emph] = new Uint32Array(64);\n\n      // Calculate table:\n      for (i = 0; i < 64; i++) {\n        col = this.curTable[i];\n        r = Math.floor(this.getRed(col) * rFactor);\n        g = Math.floor(this.getGreen(col) * gFactor);\n        b = Math.floor(this.getBlue(col) * bFactor);\n        this.emphTable[emph][i] = this.getRgb(r, g, b);\n      }\n    }\n  },\n\n  setEmphasis: function(emph) {\n    if (emph !== this.currentEmph) {\n      this.currentEmph = emph;\n      for (var i = 0; i < 64; i++) {\n        this.curTable[i] = this.emphTable[emph][i];\n      }\n    }\n  },\n\n  getEntry: function(yiq) {\n    return this.curTable[yiq];\n  },\n\n  getRed: function(rgb) {\n    return (rgb >> 16) & 0xff;\n  },\n\n  getGreen: function(rgb) {\n    return (rgb >> 8) & 0xff;\n  },\n\n  getBlue: function(rgb) {\n    return rgb & 0xff;\n  },\n\n  getRgb: function(r, g, b) {\n    return (r << 16) | (g << 8) | b;\n  },\n\n  loadDefaultPalette: function() {\n    this.curTable[0] = this.getRgb(117, 117, 117);\n    this.curTable[1] = this.getRgb(39, 27, 143);\n    this.curTable[2] = this.getRgb(0, 0, 171);\n    this.curTable[3] = this.getRgb(71, 0, 159);\n    this.curTable[4] = this.getRgb(143, 0, 119);\n    this.curTable[5] = this.getRgb(171, 0, 19);\n    this.curTable[6] = this.getRgb(167, 0, 0);\n    this.curTable[7] = this.getRgb(127, 11, 0);\n    this.curTable[8] = this.getRgb(67, 47, 0);\n    this.curTable[9] = this.getRgb(0, 71, 0);\n    this.curTable[10] = this.getRgb(0, 81, 0);\n    this.curTable[11] = this.getRgb(0, 63, 23);\n    this.curTable[12] = this.getRgb(27, 63, 95);\n    this.curTable[13] = this.getRgb(0, 0, 0);\n    this.curTable[14] = this.getRgb(0, 0, 0);\n    this.curTable[15] = this.getRgb(0, 0, 0);\n    this.curTable[16] = this.getRgb(188, 188, 188);\n    this.curTable[17] = this.getRgb(0, 115, 239);\n    this.curTable[18] = this.getRgb(35, 59, 239);\n    this.curTable[19] = this.getRgb(131, 0, 243);\n    this.curTable[20] = this.getRgb(191, 0, 191);\n    this.curTable[21] = this.getRgb(231, 0, 91);\n    this.curTable[22] = this.getRgb(219, 43, 0);\n    this.curTable[23] = this.getRgb(203, 79, 15);\n    this.curTable[24] = this.getRgb(139, 115, 0);\n    this.curTable[25] = this.getRgb(0, 151, 0);\n    this.curTable[26] = this.getRgb(0, 171, 0);\n    this.curTable[27] = this.getRgb(0, 147, 59);\n    this.curTable[28] = this.getRgb(0, 131, 139);\n    this.curTable[29] = this.getRgb(0, 0, 0);\n    this.curTable[30] = this.getRgb(0, 0, 0);\n    this.curTable[31] = this.getRgb(0, 0, 0);\n    this.curTable[32] = this.getRgb(255, 255, 255);\n    this.curTable[33] = this.getRgb(63, 191, 255);\n    this.curTable[34] = this.getRgb(95, 151, 255);\n    this.curTable[35] = this.getRgb(167, 139, 253);\n    this.curTable[36] = this.getRgb(247, 123, 255);\n    this.curTable[37] = this.getRgb(255, 119, 183);\n    this.curTable[38] = this.getRgb(255, 119, 99);\n    this.curTable[39] = this.getRgb(255, 155, 59);\n    this.curTable[40] = this.getRgb(243, 191, 63);\n    this.curTable[41] = this.getRgb(131, 211, 19);\n    this.curTable[42] = this.getRgb(79, 223, 75);\n    this.curTable[43] = this.getRgb(88, 248, 152);\n    this.curTable[44] = this.getRgb(0, 235, 219);\n    this.curTable[45] = this.getRgb(0, 0, 0);\n    this.curTable[46] = this.getRgb(0, 0, 0);\n    this.curTable[47] = this.getRgb(0, 0, 0);\n    this.curTable[48] = this.getRgb(255, 255, 255);\n    this.curTable[49] = this.getRgb(171, 231, 255);\n    this.curTable[50] = this.getRgb(199, 215, 255);\n    this.curTable[51] = this.getRgb(215, 203, 255);\n    this.curTable[52] = this.getRgb(255, 199, 255);\n    this.curTable[53] = this.getRgb(255, 199, 219);\n    this.curTable[54] = this.getRgb(255, 191, 179);\n    this.curTable[55] = this.getRgb(255, 219, 171);\n    this.curTable[56] = this.getRgb(255, 231, 163);\n    this.curTable[57] = this.getRgb(227, 255, 163);\n    this.curTable[58] = this.getRgb(171, 243, 191);\n    this.curTable[59] = this.getRgb(179, 255, 207);\n    this.curTable[60] = this.getRgb(159, 255, 243);\n    this.curTable[61] = this.getRgb(0, 0, 0);\n    this.curTable[62] = this.getRgb(0, 0, 0);\n    this.curTable[63] = this.getRgb(0, 0, 0);\n\n    this.makeTables();\n    this.setEmphasis(0);\n  }\n};\n\nmodule.exports = PPU;\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports) {\n\nvar CPU_FREQ_NTSC = 1789772.5; //1789772.72727272d;\n// var CPU_FREQ_PAL = 1773447.4;\n\nvar PAPU = function(nes) {\n  this.nes = nes;\n\n  this.square1 = new ChannelSquare(this, true);\n  this.square2 = new ChannelSquare(this, false);\n  this.triangle = new ChannelTriangle(this);\n  this.noise = new ChannelNoise(this);\n  this.dmc = new ChannelDM(this);\n\n  this.frameIrqCounter = null;\n  this.frameIrqCounterMax = 4;\n  this.initCounter = 2048;\n  this.channelEnableValue = null;\n\n  this.sampleRate = 44100;\n\n  this.lengthLookup = null;\n  this.dmcFreqLookup = null;\n  this.noiseWavelengthLookup = null;\n  this.square_table = null;\n  this.tnd_table = null;\n\n  this.frameIrqEnabled = false;\n  this.frameIrqActive = null;\n  this.frameClockNow = null;\n  this.startedPlaying = false;\n  this.recordOutput = false;\n  this.initingHardware = false;\n\n  this.masterFrameCounter = null;\n  this.derivedFrameCounter = null;\n  this.countSequence = null;\n  this.sampleTimer = null;\n  this.frameTime = null;\n  this.sampleTimerMax = null;\n  this.sampleCount = null;\n  this.triValue = 0;\n\n  this.smpSquare1 = null;\n  this.smpSquare2 = null;\n  this.smpTriangle = null;\n  this.smpDmc = null;\n  this.accCount = null;\n\n  // DC removal vars:\n  this.prevSampleL = 0;\n  this.prevSampleR = 0;\n  this.smpAccumL = 0;\n  this.smpAccumR = 0;\n\n  // DAC range:\n  this.dacRange = 0;\n  this.dcValue = 0;\n\n  // Master volume:\n  this.masterVolume = 256;\n\n  // Stereo positioning:\n  this.stereoPosLSquare1 = null;\n  this.stereoPosLSquare2 = null;\n  this.stereoPosLTriangle = null;\n  this.stereoPosLNoise = null;\n  this.stereoPosLDMC = null;\n  this.stereoPosRSquare1 = null;\n  this.stereoPosRSquare2 = null;\n  this.stereoPosRTriangle = null;\n  this.stereoPosRNoise = null;\n  this.stereoPosRDMC = null;\n\n  this.extraCycles = null;\n\n  this.maxSample = null;\n  this.minSample = null;\n\n  // Panning:\n  this.panning = [80, 170, 100, 150, 128];\n  this.setPanning(this.panning);\n\n  // Initialize lookup tables:\n  this.initLengthLookup();\n  this.initDmcFrequencyLookup();\n  this.initNoiseWavelengthLookup();\n  this.initDACtables();\n\n  // Init sound registers:\n  for (var i = 0; i < 0x14; i++) {\n    if (i === 0x10) {\n      this.writeReg(0x4010, 0x10);\n    } else {\n      this.writeReg(0x4000 + i, 0);\n    }\n  }\n\n  this.reset();\n};\n\nPAPU.prototype = {\n  reset: function() {\n    this.sampleRate = this.nes.opts.sampleRate;\n    this.sampleTimerMax = Math.floor(\n      (1024.0 * CPU_FREQ_NTSC * this.nes.opts.preferredFrameRate) /\n        (this.sampleRate * 60.0)\n    );\n\n    this.frameTime = Math.floor(\n      (14915.0 * this.nes.opts.preferredFrameRate) / 60.0\n    );\n\n    this.sampleTimer = 0;\n\n    this.updateChannelEnable(0);\n    this.masterFrameCounter = 0;\n    this.derivedFrameCounter = 0;\n    this.countSequence = 0;\n    this.sampleCount = 0;\n    this.initCounter = 2048;\n    this.frameIrqEnabled = false;\n    this.initingHardware = false;\n\n    this.resetCounter();\n\n    this.square1.reset();\n    this.square2.reset();\n    this.triangle.reset();\n    this.noise.reset();\n    this.dmc.reset();\n\n    this.accCount = 0;\n    this.smpSquare1 = 0;\n    this.smpSquare2 = 0;\n    this.smpTriangle = 0;\n    this.smpDmc = 0;\n\n    this.frameIrqEnabled = false;\n    this.frameIrqCounterMax = 4;\n\n    this.channelEnableValue = 0xff;\n    this.startedPlaying = false;\n    this.prevSampleL = 0;\n    this.prevSampleR = 0;\n    this.smpAccumL = 0;\n    this.smpAccumR = 0;\n\n    this.maxSample = -500000;\n    this.minSample = 500000;\n  },\n\n  // eslint-disable-next-line no-unused-vars\n  readReg: function(address) {\n    // Read 0x4015:\n    var tmp = 0;\n    tmp |= this.square1.getLengthStatus();\n    tmp |= this.square2.getLengthStatus() << 1;\n    tmp |= this.triangle.getLengthStatus() << 2;\n    tmp |= this.noise.getLengthStatus() << 3;\n    tmp |= this.dmc.getLengthStatus() << 4;\n    tmp |= (this.frameIrqActive && this.frameIrqEnabled ? 1 : 0) << 6;\n    tmp |= this.dmc.getIrqStatus() << 7;\n\n    this.frameIrqActive = false;\n    this.dmc.irqGenerated = false;\n\n    return tmp & 0xffff;\n  },\n\n  writeReg: function(address, value) {\n    if (address >= 0x4000 && address < 0x4004) {\n      // Square Wave 1 Control\n      this.square1.writeReg(address, value);\n      // console.log(\"Square Write\");\n    } else if (address >= 0x4004 && address < 0x4008) {\n      // Square 2 Control\n      this.square2.writeReg(address, value);\n    } else if (address >= 0x4008 && address < 0x400c) {\n      // Triangle Control\n      this.triangle.writeReg(address, value);\n    } else if (address >= 0x400c && address <= 0x400f) {\n      // Noise Control\n      this.noise.writeReg(address, value);\n    } else if (address === 0x4010) {\n      // DMC Play mode & DMA frequency\n      this.dmc.writeReg(address, value);\n    } else if (address === 0x4011) {\n      // DMC Delta Counter\n      this.dmc.writeReg(address, value);\n    } else if (address === 0x4012) {\n      // DMC Play code starting address\n      this.dmc.writeReg(address, value);\n    } else if (address === 0x4013) {\n      // DMC Play code length\n      this.dmc.writeReg(address, value);\n    } else if (address === 0x4015) {\n      // Channel enable\n      this.updateChannelEnable(value);\n\n      if (value !== 0 && this.initCounter > 0) {\n        // Start hardware initialization\n        this.initingHardware = true;\n      }\n\n      // DMC/IRQ Status\n      this.dmc.writeReg(address, value);\n    } else if (address === 0x4017) {\n      // Frame counter control\n      this.countSequence = (value >> 7) & 1;\n      this.masterFrameCounter = 0;\n      this.frameIrqActive = false;\n\n      if (((value >> 6) & 0x1) === 0) {\n        this.frameIrqEnabled = true;\n      } else {\n        this.frameIrqEnabled = false;\n      }\n\n      if (this.countSequence === 0) {\n        // NTSC:\n        this.frameIrqCounterMax = 4;\n        this.derivedFrameCounter = 4;\n      } else {\n        // PAL:\n        this.frameIrqCounterMax = 5;\n        this.derivedFrameCounter = 0;\n        this.frameCounterTick();\n      }\n    }\n  },\n\n  resetCounter: function() {\n    if (this.countSequence === 0) {\n      this.derivedFrameCounter = 4;\n    } else {\n      this.derivedFrameCounter = 0;\n    }\n  },\n\n  // Updates channel enable status.\n  // This is done on writes to the\n  // channel enable register (0x4015),\n  // and when the user enables/disables channels\n  // in the GUI.\n  updateChannelEnable: function(value) {\n    this.channelEnableValue = value & 0xffff;\n    this.square1.setEnabled((value & 1) !== 0);\n    this.square2.setEnabled((value & 2) !== 0);\n    this.triangle.setEnabled((value & 4) !== 0);\n    this.noise.setEnabled((value & 8) !== 0);\n    this.dmc.setEnabled((value & 16) !== 0);\n  },\n\n  // Clocks the frame counter. It should be clocked at\n  // twice the cpu speed, so the cycles will be\n  // divided by 2 for those counters that are\n  // clocked at cpu speed.\n  clockFrameCounter: function(nCycles) {\n    if (this.initCounter > 0) {\n      if (this.initingHardware) {\n        this.initCounter -= nCycles;\n        if (this.initCounter <= 0) {\n          this.initingHardware = false;\n        }\n        return;\n      }\n    }\n\n    // Don't process ticks beyond next sampling:\n    nCycles += this.extraCycles;\n    var maxCycles = this.sampleTimerMax - this.sampleTimer;\n    if (nCycles << 10 > maxCycles) {\n      this.extraCycles = ((nCycles << 10) - maxCycles) >> 10;\n      nCycles -= this.extraCycles;\n    } else {\n      this.extraCycles = 0;\n    }\n\n    var dmc = this.dmc;\n    var triangle = this.triangle;\n    var square1 = this.square1;\n    var square2 = this.square2;\n    var noise = this.noise;\n\n    // Clock DMC:\n    if (dmc.isEnabled) {\n      dmc.shiftCounter -= nCycles << 3;\n      while (dmc.shiftCounter <= 0 && dmc.dmaFrequency > 0) {\n        dmc.shiftCounter += dmc.dmaFrequency;\n        dmc.clockDmc();\n      }\n    }\n\n    // Clock Triangle channel Prog timer:\n    if (triangle.progTimerMax > 0) {\n      triangle.progTimerCount -= nCycles;\n      while (triangle.progTimerCount <= 0) {\n        triangle.progTimerCount += triangle.progTimerMax + 1;\n        if (triangle.linearCounter > 0 && triangle.lengthCounter > 0) {\n          triangle.triangleCounter++;\n          triangle.triangleCounter &= 0x1f;\n\n          if (triangle.isEnabled) {\n            if (triangle.triangleCounter >= 0x10) {\n              // Normal value.\n              triangle.sampleValue = triangle.triangleCounter & 0xf;\n            } else {\n              // Inverted value.\n              triangle.sampleValue = 0xf - (triangle.triangleCounter & 0xf);\n            }\n            triangle.sampleValue <<= 4;\n          }\n        }\n      }\n    }\n\n    // Clock Square channel 1 Prog timer:\n    square1.progTimerCount -= nCycles;\n    if (square1.progTimerCount <= 0) {\n      square1.progTimerCount += (square1.progTimerMax + 1) << 1;\n\n      square1.squareCounter++;\n      square1.squareCounter &= 0x7;\n      square1.updateSampleValue();\n    }\n\n    // Clock Square channel 2 Prog timer:\n    square2.progTimerCount -= nCycles;\n    if (square2.progTimerCount <= 0) {\n      square2.progTimerCount += (square2.progTimerMax + 1) << 1;\n\n      square2.squareCounter++;\n      square2.squareCounter &= 0x7;\n      square2.updateSampleValue();\n    }\n\n    // Clock noise channel Prog timer:\n    var acc_c = nCycles;\n    if (noise.progTimerCount - acc_c > 0) {\n      // Do all cycles at once:\n      noise.progTimerCount -= acc_c;\n      noise.accCount += acc_c;\n      noise.accValue += acc_c * noise.sampleValue;\n    } else {\n      // Slow-step:\n      while (acc_c-- > 0) {\n        if (--noise.progTimerCount <= 0 && noise.progTimerMax > 0) {\n          // Update noise shift register:\n          noise.shiftReg <<= 1;\n          noise.tmp =\n            ((noise.shiftReg << (noise.randomMode === 0 ? 1 : 6)) ^\n              noise.shiftReg) &\n            0x8000;\n          if (noise.tmp !== 0) {\n            // Sample value must be 0.\n            noise.shiftReg |= 0x01;\n            noise.randomBit = 0;\n            noise.sampleValue = 0;\n          } else {\n            // Find sample value:\n            noise.randomBit = 1;\n            if (noise.isEnabled && noise.lengthCounter > 0) {\n              noise.sampleValue = noise.masterVolume;\n            } else {\n              noise.sampleValue = 0;\n            }\n          }\n\n          noise.progTimerCount += noise.progTimerMax;\n        }\n\n        noise.accValue += noise.sampleValue;\n        noise.accCount++;\n      }\n    }\n\n    // Frame IRQ handling:\n    if (this.frameIrqEnabled && this.frameIrqActive) {\n      this.nes.cpu.requestIrq(this.nes.cpu.IRQ_NORMAL);\n    }\n\n    // Clock frame counter at double CPU speed:\n    this.masterFrameCounter += nCycles << 1;\n    if (this.masterFrameCounter >= this.frameTime) {\n      // 240Hz tick:\n      this.masterFrameCounter -= this.frameTime;\n      this.frameCounterTick();\n    }\n\n    // Accumulate sample value:\n    this.accSample(nCycles);\n\n    // Clock sample timer:\n    this.sampleTimer += nCycles << 10;\n    if (this.sampleTimer >= this.sampleTimerMax) {\n      // Sample channels:\n      this.sample();\n      this.sampleTimer -= this.sampleTimerMax;\n    }\n  },\n\n  accSample: function(cycles) {\n    // Special treatment for triangle channel - need to interpolate.\n    if (this.triangle.sampleCondition) {\n      this.triValue = Math.floor(\n        (this.triangle.progTimerCount << 4) / (this.triangle.progTimerMax + 1)\n      );\n      if (this.triValue > 16) {\n        this.triValue = 16;\n      }\n      if (this.triangle.triangleCounter >= 16) {\n        this.triValue = 16 - this.triValue;\n      }\n\n      // Add non-interpolated sample value:\n      this.triValue += this.triangle.sampleValue;\n    }\n\n    // Now sample normally:\n    if (cycles === 2) {\n      this.smpTriangle += this.triValue << 1;\n      this.smpDmc += this.dmc.sample << 1;\n      this.smpSquare1 += this.square1.sampleValue << 1;\n      this.smpSquare2 += this.square2.sampleValue << 1;\n      this.accCount += 2;\n    } else if (cycles === 4) {\n      this.smpTriangle += this.triValue << 2;\n      this.smpDmc += this.dmc.sample << 2;\n      this.smpSquare1 += this.square1.sampleValue << 2;\n      this.smpSquare2 += this.square2.sampleValue << 2;\n      this.accCount += 4;\n    } else {\n      this.smpTriangle += cycles * this.triValue;\n      this.smpDmc += cycles * this.dmc.sample;\n      this.smpSquare1 += cycles * this.square1.sampleValue;\n      this.smpSquare2 += cycles * this.square2.sampleValue;\n      this.accCount += cycles;\n    }\n  },\n\n  frameCounterTick: function() {\n    this.derivedFrameCounter++;\n    if (this.derivedFrameCounter >= this.frameIrqCounterMax) {\n      this.derivedFrameCounter = 0;\n    }\n\n    if (this.derivedFrameCounter === 1 || this.derivedFrameCounter === 3) {\n      // Clock length & sweep:\n      this.triangle.clockLengthCounter();\n      this.square1.clockLengthCounter();\n      this.square2.clockLengthCounter();\n      this.noise.clockLengthCounter();\n      this.square1.clockSweep();\n      this.square2.clockSweep();\n    }\n\n    if (this.derivedFrameCounter >= 0 && this.derivedFrameCounter < 4) {\n      // Clock linear & decay:\n      this.square1.clockEnvDecay();\n      this.square2.clockEnvDecay();\n      this.noise.clockEnvDecay();\n      this.triangle.clockLinearCounter();\n    }\n\n    if (this.derivedFrameCounter === 3 && this.countSequence === 0) {\n      // Enable IRQ:\n      this.frameIrqActive = true;\n    }\n\n    // End of 240Hz tick\n  },\n\n  // Samples the channels, mixes the output together, then writes to buffer.\n  sample: function() {\n    var sq_index, tnd_index;\n\n    if (this.accCount > 0) {\n      this.smpSquare1 <<= 4;\n      this.smpSquare1 = Math.floor(this.smpSquare1 / this.accCount);\n\n      this.smpSquare2 <<= 4;\n      this.smpSquare2 = Math.floor(this.smpSquare2 / this.accCount);\n\n      this.smpTriangle = Math.floor(this.smpTriangle / this.accCount);\n\n      this.smpDmc <<= 4;\n      this.smpDmc = Math.floor(this.smpDmc / this.accCount);\n\n      this.accCount = 0;\n    } else {\n      this.smpSquare1 = this.square1.sampleValue << 4;\n      this.smpSquare2 = this.square2.sampleValue << 4;\n      this.smpTriangle = this.triangle.sampleValue;\n      this.smpDmc = this.dmc.sample << 4;\n    }\n\n    var smpNoise = Math.floor((this.noise.accValue << 4) / this.noise.accCount);\n    this.noise.accValue = smpNoise >> 4;\n    this.noise.accCount = 1;\n\n    // Stereo sound.\n\n    // Left channel:\n    sq_index =\n      (this.smpSquare1 * this.stereoPosLSquare1 +\n        this.smpSquare2 * this.stereoPosLSquare2) >>\n      8;\n    tnd_index =\n      (3 * this.smpTriangle * this.stereoPosLTriangle +\n        (smpNoise << 1) * this.stereoPosLNoise +\n        this.smpDmc * this.stereoPosLDMC) >>\n      8;\n    if (sq_index >= this.square_table.length) {\n      sq_index = this.square_table.length - 1;\n    }\n    if (tnd_index >= this.tnd_table.length) {\n      tnd_index = this.tnd_table.length - 1;\n    }\n    var sampleValueL =\n      this.square_table[sq_index] + this.tnd_table[tnd_index] - this.dcValue;\n\n    // Right channel:\n    sq_index =\n      (this.smpSquare1 * this.stereoPosRSquare1 +\n        this.smpSquare2 * this.stereoPosRSquare2) >>\n      8;\n    tnd_index =\n      (3 * this.smpTriangle * this.stereoPosRTriangle +\n        (smpNoise << 1) * this.stereoPosRNoise +\n        this.smpDmc * this.stereoPosRDMC) >>\n      8;\n    if (sq_index >= this.square_table.length) {\n      sq_index = this.square_table.length - 1;\n    }\n    if (tnd_index >= this.tnd_table.length) {\n      tnd_index = this.tnd_table.length - 1;\n    }\n    var sampleValueR =\n      this.square_table[sq_index] + this.tnd_table[tnd_index] - this.dcValue;\n\n    // Remove DC from left channel:\n    var smpDiffL = sampleValueL - this.prevSampleL;\n    this.prevSampleL += smpDiffL;\n    this.smpAccumL += smpDiffL - (this.smpAccumL >> 10);\n    sampleValueL = this.smpAccumL;\n\n    // Remove DC from right channel:\n    var smpDiffR = sampleValueR - this.prevSampleR;\n    this.prevSampleR += smpDiffR;\n    this.smpAccumR += smpDiffR - (this.smpAccumR >> 10);\n    sampleValueR = this.smpAccumR;\n\n    // Write:\n    if (sampleValueL > this.maxSample) {\n      this.maxSample = sampleValueL;\n    }\n    if (sampleValueL < this.minSample) {\n      this.minSample = sampleValueL;\n    }\n\n    if (this.nes.opts.onAudioSample) {\n      this.nes.opts.onAudioSample(sampleValueL / 32768, sampleValueR / 32768);\n    }\n\n    // Reset sampled values:\n    this.smpSquare1 = 0;\n    this.smpSquare2 = 0;\n    this.smpTriangle = 0;\n    this.smpDmc = 0;\n  },\n\n  getLengthMax: function(value) {\n    return this.lengthLookup[value >> 3];\n  },\n\n  getDmcFrequency: function(value) {\n    if (value >= 0 && value < 0x10) {\n      return this.dmcFreqLookup[value];\n    }\n    return 0;\n  },\n\n  getNoiseWaveLength: function(value) {\n    if (value >= 0 && value < 0x10) {\n      return this.noiseWavelengthLookup[value];\n    }\n    return 0;\n  },\n\n  setPanning: function(pos) {\n    for (var i = 0; i < 5; i++) {\n      this.panning[i] = pos[i];\n    }\n    this.updateStereoPos();\n  },\n\n  setMasterVolume: function(value) {\n    if (value < 0) {\n      value = 0;\n    }\n    if (value > 256) {\n      value = 256;\n    }\n    this.masterVolume = value;\n    this.updateStereoPos();\n  },\n\n  updateStereoPos: function() {\n    this.stereoPosLSquare1 = (this.panning[0] * this.masterVolume) >> 8;\n    this.stereoPosLSquare2 = (this.panning[1] * this.masterVolume) >> 8;\n    this.stereoPosLTriangle = (this.panning[2] * this.masterVolume) >> 8;\n    this.stereoPosLNoise = (this.panning[3] * this.masterVolume) >> 8;\n    this.stereoPosLDMC = (this.panning[4] * this.masterVolume) >> 8;\n\n    this.stereoPosRSquare1 = this.masterVolume - this.stereoPosLSquare1;\n    this.stereoPosRSquare2 = this.masterVolume - this.stereoPosLSquare2;\n    this.stereoPosRTriangle = this.masterVolume - this.stereoPosLTriangle;\n    this.stereoPosRNoise = this.masterVolume - this.stereoPosLNoise;\n    this.stereoPosRDMC = this.masterVolume - this.stereoPosLDMC;\n  },\n\n  initLengthLookup: function() {\n    // prettier-ignore\n    this.lengthLookup = [\n            0x0A, 0xFE,\n            0x14, 0x02,\n            0x28, 0x04,\n            0x50, 0x06,\n            0xA0, 0x08,\n            0x3C, 0x0A,\n            0x0E, 0x0C,\n            0x1A, 0x0E,\n            0x0C, 0x10,\n            0x18, 0x12,\n            0x30, 0x14,\n            0x60, 0x16,\n            0xC0, 0x18,\n            0x48, 0x1A,\n            0x10, 0x1C,\n            0x20, 0x1E\n        ];\n  },\n\n  initDmcFrequencyLookup: function() {\n    this.dmcFreqLookup = new Array(16);\n\n    this.dmcFreqLookup[0x0] = 0xd60;\n    this.dmcFreqLookup[0x1] = 0xbe0;\n    this.dmcFreqLookup[0x2] = 0xaa0;\n    this.dmcFreqLookup[0x3] = 0xa00;\n    this.dmcFreqLookup[0x4] = 0x8f0;\n    this.dmcFreqLookup[0x5] = 0x7f0;\n    this.dmcFreqLookup[0x6] = 0x710;\n    this.dmcFreqLookup[0x7] = 0x6b0;\n    this.dmcFreqLookup[0x8] = 0x5f0;\n    this.dmcFreqLookup[0x9] = 0x500;\n    this.dmcFreqLookup[0xa] = 0x470;\n    this.dmcFreqLookup[0xb] = 0x400;\n    this.dmcFreqLookup[0xc] = 0x350;\n    this.dmcFreqLookup[0xd] = 0x2a0;\n    this.dmcFreqLookup[0xe] = 0x240;\n    this.dmcFreqLookup[0xf] = 0x1b0;\n    //for(int i=0;i<16;i++)dmcFreqLookup[i]/=8;\n  },\n\n  initNoiseWavelengthLookup: function() {\n    this.noiseWavelengthLookup = new Array(16);\n\n    this.noiseWavelengthLookup[0x0] = 0x004;\n    this.noiseWavelengthLookup[0x1] = 0x008;\n    this.noiseWavelengthLookup[0x2] = 0x010;\n    this.noiseWavelengthLookup[0x3] = 0x020;\n    this.noiseWavelengthLookup[0x4] = 0x040;\n    this.noiseWavelengthLookup[0x5] = 0x060;\n    this.noiseWavelengthLookup[0x6] = 0x080;\n    this.noiseWavelengthLookup[0x7] = 0x0a0;\n    this.noiseWavelengthLookup[0x8] = 0x0ca;\n    this.noiseWavelengthLookup[0x9] = 0x0fe;\n    this.noiseWavelengthLookup[0xa] = 0x17c;\n    this.noiseWavelengthLookup[0xb] = 0x1fc;\n    this.noiseWavelengthLookup[0xc] = 0x2fa;\n    this.noiseWavelengthLookup[0xd] = 0x3f8;\n    this.noiseWavelengthLookup[0xe] = 0x7f2;\n    this.noiseWavelengthLookup[0xf] = 0xfe4;\n  },\n\n  initDACtables: function() {\n    var value, ival, i;\n    var max_sqr = 0;\n    var max_tnd = 0;\n\n    this.square_table = new Float32Array(32 * 16);\n    this.tnd_table = new Float32Array(204 * 16);\n\n    for (i = 0; i < 32 * 16; i++) {\n      value = 95.52 / (8128.0 / (i / 16.0) + 100.0);\n      value *= 0.98411;\n      value *= 50000.0;\n      ival = Math.floor(value);\n\n      this.square_table[i] = ival;\n      if (ival > max_sqr) {\n        max_sqr = ival;\n      }\n    }\n\n    for (i = 0; i < 204 * 16; i++) {\n      value = 163.67 / (24329.0 / (i / 16.0) + 100.0);\n      value *= 0.98411;\n      value *= 50000.0;\n      ival = Math.floor(value);\n\n      this.tnd_table[i] = ival;\n      if (ival > max_tnd) {\n        max_tnd = ival;\n      }\n    }\n\n    this.dacRange = max_sqr + max_tnd;\n    this.dcValue = this.dacRange / 2;\n  }\n};\n\nvar ChannelDM = function(papu) {\n  this.papu = papu;\n\n  this.MODE_NORMAL = 0;\n  this.MODE_LOOP = 1;\n  this.MODE_IRQ = 2;\n\n  this.isEnabled = null;\n  this.hasSample = null;\n  this.irqGenerated = false;\n\n  this.playMode = null;\n  this.dmaFrequency = null;\n  this.dmaCounter = null;\n  this.deltaCounter = null;\n  this.playStartAddress = null;\n  this.playAddress = null;\n  this.playLength = null;\n  this.playLengthCounter = null;\n  this.shiftCounter = null;\n  this.reg4012 = null;\n  this.reg4013 = null;\n  this.sample = null;\n  this.dacLsb = null;\n  this.data = null;\n\n  this.reset();\n};\n\nChannelDM.prototype = {\n  clockDmc: function() {\n    // Only alter DAC value if the sample buffer has data:\n    if (this.hasSample) {\n      if ((this.data & 1) === 0) {\n        // Decrement delta:\n        if (this.deltaCounter > 0) {\n          this.deltaCounter--;\n        }\n      } else {\n        // Increment delta:\n        if (this.deltaCounter < 63) {\n          this.deltaCounter++;\n        }\n      }\n\n      // Update sample value:\n      this.sample = this.isEnabled ? (this.deltaCounter << 1) + this.dacLsb : 0;\n\n      // Update shift register:\n      this.data >>= 1;\n    }\n\n    this.dmaCounter--;\n    if (this.dmaCounter <= 0) {\n      // No more sample bits.\n      this.hasSample = false;\n      this.endOfSample();\n      this.dmaCounter = 8;\n    }\n\n    if (this.irqGenerated) {\n      this.papu.nes.cpu.requestIrq(this.papu.nes.cpu.IRQ_NORMAL);\n    }\n  },\n\n  endOfSample: function() {\n    if (this.playLengthCounter === 0 && this.playMode === this.MODE_LOOP) {\n      // Start from beginning of sample:\n      this.playAddress = this.playStartAddress;\n      this.playLengthCounter = this.playLength;\n    }\n\n    if (this.playLengthCounter > 0) {\n      // Fetch next sample:\n      this.nextSample();\n\n      if (this.playLengthCounter === 0) {\n        // Last byte of sample fetched, generate IRQ:\n        if (this.playMode === this.MODE_IRQ) {\n          // Generate IRQ:\n          this.irqGenerated = true;\n        }\n      }\n    }\n  },\n\n  nextSample: function() {\n    // Fetch byte:\n    this.data = this.papu.nes.mmap.load(this.playAddress);\n    this.papu.nes.cpu.haltCycles(4);\n\n    this.playLengthCounter--;\n    this.playAddress++;\n    if (this.playAddress > 0xffff) {\n      this.playAddress = 0x8000;\n    }\n\n    this.hasSample = true;\n  },\n\n  writeReg: function(address, value) {\n    if (address === 0x4010) {\n      // Play mode, DMA Frequency\n      if (value >> 6 === 0) {\n        this.playMode = this.MODE_NORMAL;\n      } else if (((value >> 6) & 1) === 1) {\n        this.playMode = this.MODE_LOOP;\n      } else if (value >> 6 === 2) {\n        this.playMode = this.MODE_IRQ;\n      }\n\n      if ((value & 0x80) === 0) {\n        this.irqGenerated = false;\n      }\n\n      this.dmaFrequency = this.papu.getDmcFrequency(value & 0xf);\n    } else if (address === 0x4011) {\n      // Delta counter load register:\n      this.deltaCounter = (value >> 1) & 63;\n      this.dacLsb = value & 1;\n      this.sample = (this.deltaCounter << 1) + this.dacLsb; // update sample value\n    } else if (address === 0x4012) {\n      // DMA address load register\n      this.playStartAddress = (value << 6) | 0x0c000;\n      this.playAddress = this.playStartAddress;\n      this.reg4012 = value;\n    } else if (address === 0x4013) {\n      // Length of play code\n      this.playLength = (value << 4) + 1;\n      this.playLengthCounter = this.playLength;\n      this.reg4013 = value;\n    } else if (address === 0x4015) {\n      // DMC/IRQ Status\n      if (((value >> 4) & 1) === 0) {\n        // Disable:\n        this.playLengthCounter = 0;\n      } else {\n        // Restart:\n        this.playAddress = this.playStartAddress;\n        this.playLengthCounter = this.playLength;\n      }\n      this.irqGenerated = false;\n    }\n  },\n\n  setEnabled: function(value) {\n    if (!this.isEnabled && value) {\n      this.playLengthCounter = this.playLength;\n    }\n    this.isEnabled = value;\n  },\n\n  getLengthStatus: function() {\n    return this.playLengthCounter === 0 || !this.isEnabled ? 0 : 1;\n  },\n\n  getIrqStatus: function() {\n    return this.irqGenerated ? 1 : 0;\n  },\n\n  reset: function() {\n    this.isEnabled = false;\n    this.irqGenerated = false;\n    this.playMode = this.MODE_NORMAL;\n    this.dmaFrequency = 0;\n    this.dmaCounter = 0;\n    this.deltaCounter = 0;\n    this.playStartAddress = 0;\n    this.playAddress = 0;\n    this.playLength = 0;\n    this.playLengthCounter = 0;\n    this.sample = 0;\n    this.dacLsb = 0;\n    this.shiftCounter = 0;\n    this.reg4012 = 0;\n    this.reg4013 = 0;\n    this.data = 0;\n  }\n};\n\nvar ChannelNoise = function(papu) {\n  this.papu = papu;\n\n  this.isEnabled = null;\n  this.envDecayDisable = null;\n  this.envDecayLoopEnable = null;\n  this.lengthCounterEnable = null;\n  this.envReset = null;\n  this.shiftNow = null;\n\n  this.lengthCounter = null;\n  this.progTimerCount = null;\n  this.progTimerMax = null;\n  this.envDecayRate = null;\n  this.envDecayCounter = null;\n  this.envVolume = null;\n  this.masterVolume = null;\n  this.shiftReg = 1 << 14;\n  this.randomBit = null;\n  this.randomMode = null;\n  this.sampleValue = null;\n  this.accValue = 0;\n  this.accCount = 1;\n  this.tmp = null;\n\n  this.reset();\n};\n\nChannelNoise.prototype = {\n  reset: function() {\n    this.progTimerCount = 0;\n    this.progTimerMax = 0;\n    this.isEnabled = false;\n    this.lengthCounter = 0;\n    this.lengthCounterEnable = false;\n    this.envDecayDisable = false;\n    this.envDecayLoopEnable = false;\n    this.shiftNow = false;\n    this.envDecayRate = 0;\n    this.envDecayCounter = 0;\n    this.envVolume = 0;\n    this.masterVolume = 0;\n    this.shiftReg = 1;\n    this.randomBit = 0;\n    this.randomMode = 0;\n    this.sampleValue = 0;\n    this.tmp = 0;\n  },\n\n  clockLengthCounter: function() {\n    if (this.lengthCounterEnable && this.lengthCounter > 0) {\n      this.lengthCounter--;\n      if (this.lengthCounter === 0) {\n        this.updateSampleValue();\n      }\n    }\n  },\n\n  clockEnvDecay: function() {\n    if (this.envReset) {\n      // Reset envelope:\n      this.envReset = false;\n      this.envDecayCounter = this.envDecayRate + 1;\n      this.envVolume = 0xf;\n    } else if (--this.envDecayCounter <= 0) {\n      // Normal handling:\n      this.envDecayCounter = this.envDecayRate + 1;\n      if (this.envVolume > 0) {\n        this.envVolume--;\n      } else {\n        this.envVolume = this.envDecayLoopEnable ? 0xf : 0;\n      }\n    }\n    if (this.envDecayDisable) {\n      this.masterVolume = this.envDecayRate;\n    } else {\n      this.masterVolume = this.envVolume;\n    }\n    this.updateSampleValue();\n  },\n\n  updateSampleValue: function() {\n    if (this.isEnabled && this.lengthCounter > 0) {\n      this.sampleValue = this.randomBit * this.masterVolume;\n    }\n  },\n\n  writeReg: function(address, value) {\n    if (address === 0x400c) {\n      // Volume/Envelope decay:\n      this.envDecayDisable = (value & 0x10) !== 0;\n      this.envDecayRate = value & 0xf;\n      this.envDecayLoopEnable = (value & 0x20) !== 0;\n      this.lengthCounterEnable = (value & 0x20) === 0;\n      if (this.envDecayDisable) {\n        this.masterVolume = this.envDecayRate;\n      } else {\n        this.masterVolume = this.envVolume;\n      }\n    } else if (address === 0x400e) {\n      // Programmable timer:\n      this.progTimerMax = this.papu.getNoiseWaveLength(value & 0xf);\n      this.randomMode = value >> 7;\n    } else if (address === 0x400f) {\n      // Length counter\n      this.lengthCounter = this.papu.getLengthMax(value & 248);\n      this.envReset = true;\n    }\n    // Update:\n    //updateSampleValue();\n  },\n\n  setEnabled: function(value) {\n    this.isEnabled = value;\n    if (!value) {\n      this.lengthCounter = 0;\n    }\n    this.updateSampleValue();\n  },\n\n  getLengthStatus: function() {\n    return this.lengthCounter === 0 || !this.isEnabled ? 0 : 1;\n  }\n};\n\nvar ChannelSquare = function(papu, square1) {\n  this.papu = papu;\n\n  // prettier-ignore\n  this.dutyLookup = [\n         0, 1, 0, 0, 0, 0, 0, 0,\n         0, 1, 1, 0, 0, 0, 0, 0,\n         0, 1, 1, 1, 1, 0, 0, 0,\n         1, 0, 0, 1, 1, 1, 1, 1\n    ];\n  // prettier-ignore\n  this.impLookup = [\n         1,-1, 0, 0, 0, 0, 0, 0,\n         1, 0,-1, 0, 0, 0, 0, 0,\n         1, 0, 0, 0,-1, 0, 0, 0,\n        -1, 0, 1, 0, 0, 0, 0, 0\n    ];\n\n  this.sqr1 = square1;\n  this.isEnabled = null;\n  this.lengthCounterEnable = null;\n  this.sweepActive = null;\n  this.envDecayDisable = null;\n  this.envDecayLoopEnable = null;\n  this.envReset = null;\n  this.sweepCarry = null;\n  this.updateSweepPeriod = null;\n\n  this.progTimerCount = null;\n  this.progTimerMax = null;\n  this.lengthCounter = null;\n  this.squareCounter = null;\n  this.sweepCounter = null;\n  this.sweepCounterMax = null;\n  this.sweepMode = null;\n  this.sweepShiftAmount = null;\n  this.envDecayRate = null;\n  this.envDecayCounter = null;\n  this.envVolume = null;\n  this.masterVolume = null;\n  this.dutyMode = null;\n  this.sweepResult = null;\n  this.sampleValue = null;\n  this.vol = null;\n\n  this.reset();\n};\n\nChannelSquare.prototype = {\n  reset: function() {\n    this.progTimerCount = 0;\n    this.progTimerMax = 0;\n    this.lengthCounter = 0;\n    this.squareCounter = 0;\n    this.sweepCounter = 0;\n    this.sweepCounterMax = 0;\n    this.sweepMode = 0;\n    this.sweepShiftAmount = 0;\n    this.envDecayRate = 0;\n    this.envDecayCounter = 0;\n    this.envVolume = 0;\n    this.masterVolume = 0;\n    this.dutyMode = 0;\n    this.vol = 0;\n\n    this.isEnabled = false;\n    this.lengthCounterEnable = false;\n    this.sweepActive = false;\n    this.sweepCarry = false;\n    this.envDecayDisable = false;\n    this.envDecayLoopEnable = false;\n  },\n\n  clockLengthCounter: function() {\n    if (this.lengthCounterEnable && this.lengthCounter > 0) {\n      this.lengthCounter--;\n      if (this.lengthCounter === 0) {\n        this.updateSampleValue();\n      }\n    }\n  },\n\n  clockEnvDecay: function() {\n    if (this.envReset) {\n      // Reset envelope:\n      this.envReset = false;\n      this.envDecayCounter = this.envDecayRate + 1;\n      this.envVolume = 0xf;\n    } else if (--this.envDecayCounter <= 0) {\n      // Normal handling:\n      this.envDecayCounter = this.envDecayRate + 1;\n      if (this.envVolume > 0) {\n        this.envVolume--;\n      } else {\n        this.envVolume = this.envDecayLoopEnable ? 0xf : 0;\n      }\n    }\n\n    if (this.envDecayDisable) {\n      this.masterVolume = this.envDecayRate;\n    } else {\n      this.masterVolume = this.envVolume;\n    }\n    this.updateSampleValue();\n  },\n\n  clockSweep: function() {\n    if (--this.sweepCounter <= 0) {\n      this.sweepCounter = this.sweepCounterMax + 1;\n      if (\n        this.sweepActive &&\n        this.sweepShiftAmount > 0 &&\n        this.progTimerMax > 7\n      ) {\n        // Calculate result from shifter:\n        this.sweepCarry = false;\n        if (this.sweepMode === 0) {\n          this.progTimerMax += this.progTimerMax >> this.sweepShiftAmount;\n          if (this.progTimerMax > 4095) {\n            this.progTimerMax = 4095;\n            this.sweepCarry = true;\n          }\n        } else {\n          this.progTimerMax =\n            this.progTimerMax -\n            ((this.progTimerMax >> this.sweepShiftAmount) -\n              (this.sqr1 ? 1 : 0));\n        }\n      }\n    }\n\n    if (this.updateSweepPeriod) {\n      this.updateSweepPeriod = false;\n      this.sweepCounter = this.sweepCounterMax + 1;\n    }\n  },\n\n  updateSampleValue: function() {\n    if (this.isEnabled && this.lengthCounter > 0 && this.progTimerMax > 7) {\n      if (\n        this.sweepMode === 0 &&\n        this.progTimerMax + (this.progTimerMax >> this.sweepShiftAmount) > 4095\n      ) {\n        //if (this.sweepCarry) {\n        this.sampleValue = 0;\n      } else {\n        this.sampleValue =\n          this.masterVolume *\n          this.dutyLookup[(this.dutyMode << 3) + this.squareCounter];\n      }\n    } else {\n      this.sampleValue = 0;\n    }\n  },\n\n  writeReg: function(address, value) {\n    var addrAdd = this.sqr1 ? 0 : 4;\n    if (address === 0x4000 + addrAdd) {\n      // Volume/Envelope decay:\n      this.envDecayDisable = (value & 0x10) !== 0;\n      this.envDecayRate = value & 0xf;\n      this.envDecayLoopEnable = (value & 0x20) !== 0;\n      this.dutyMode = (value >> 6) & 0x3;\n      this.lengthCounterEnable = (value & 0x20) === 0;\n      if (this.envDecayDisable) {\n        this.masterVolume = this.envDecayRate;\n      } else {\n        this.masterVolume = this.envVolume;\n      }\n      this.updateSampleValue();\n    } else if (address === 0x4001 + addrAdd) {\n      // Sweep:\n      this.sweepActive = (value & 0x80) !== 0;\n      this.sweepCounterMax = (value >> 4) & 7;\n      this.sweepMode = (value >> 3) & 1;\n      this.sweepShiftAmount = value & 7;\n      this.updateSweepPeriod = true;\n    } else if (address === 0x4002 + addrAdd) {\n      // Programmable timer:\n      this.progTimerMax &= 0x700;\n      this.progTimerMax |= value;\n    } else if (address === 0x4003 + addrAdd) {\n      // Programmable timer, length counter\n      this.progTimerMax &= 0xff;\n      this.progTimerMax |= (value & 0x7) << 8;\n\n      if (this.isEnabled) {\n        this.lengthCounter = this.papu.getLengthMax(value & 0xf8);\n      }\n\n      this.envReset = true;\n    }\n  },\n\n  setEnabled: function(value) {\n    this.isEnabled = value;\n    if (!value) {\n      this.lengthCounter = 0;\n    }\n    this.updateSampleValue();\n  },\n\n  getLengthStatus: function() {\n    return this.lengthCounter === 0 || !this.isEnabled ? 0 : 1;\n  }\n};\n\nvar ChannelTriangle = function(papu) {\n  this.papu = papu;\n\n  this.isEnabled = null;\n  this.sampleCondition = null;\n  this.lengthCounterEnable = null;\n  this.lcHalt = null;\n  this.lcControl = null;\n\n  this.progTimerCount = null;\n  this.progTimerMax = null;\n  this.triangleCounter = null;\n  this.lengthCounter = null;\n  this.linearCounter = null;\n  this.lcLoadValue = null;\n  this.sampleValue = null;\n  this.tmp = null;\n\n  this.reset();\n};\n\nChannelTriangle.prototype = {\n  reset: function() {\n    this.progTimerCount = 0;\n    this.progTimerMax = 0;\n    this.triangleCounter = 0;\n    this.isEnabled = false;\n    this.sampleCondition = false;\n    this.lengthCounter = 0;\n    this.lengthCounterEnable = false;\n    this.linearCounter = 0;\n    this.lcLoadValue = 0;\n    this.lcHalt = true;\n    this.lcControl = false;\n    this.tmp = 0;\n    this.sampleValue = 0xf;\n  },\n\n  clockLengthCounter: function() {\n    if (this.lengthCounterEnable && this.lengthCounter > 0) {\n      this.lengthCounter--;\n      if (this.lengthCounter === 0) {\n        this.updateSampleCondition();\n      }\n    }\n  },\n\n  clockLinearCounter: function() {\n    if (this.lcHalt) {\n      // Load:\n      this.linearCounter = this.lcLoadValue;\n      this.updateSampleCondition();\n    } else if (this.linearCounter > 0) {\n      // Decrement:\n      this.linearCounter--;\n      this.updateSampleCondition();\n    }\n    if (!this.lcControl) {\n      // Clear halt flag:\n      this.lcHalt = false;\n    }\n  },\n\n  getLengthStatus: function() {\n    return this.lengthCounter === 0 || !this.isEnabled ? 0 : 1;\n  },\n\n  // eslint-disable-next-line no-unused-vars\n  readReg: function(address) {\n    return 0;\n  },\n\n  writeReg: function(address, value) {\n    if (address === 0x4008) {\n      // New values for linear counter:\n      this.lcControl = (value & 0x80) !== 0;\n      this.lcLoadValue = value & 0x7f;\n\n      // Length counter enable:\n      this.lengthCounterEnable = !this.lcControl;\n    } else if (address === 0x400a) {\n      // Programmable timer:\n      this.progTimerMax &= 0x700;\n      this.progTimerMax |= value;\n    } else if (address === 0x400b) {\n      // Programmable timer, length counter\n      this.progTimerMax &= 0xff;\n      this.progTimerMax |= (value & 0x07) << 8;\n      this.lengthCounter = this.papu.getLengthMax(value & 0xf8);\n      this.lcHalt = true;\n    }\n\n    this.updateSampleCondition();\n  },\n\n  clockProgrammableTimer: function(nCycles) {\n    if (this.progTimerMax > 0) {\n      this.progTimerCount += nCycles;\n      while (\n        this.progTimerMax > 0 &&\n        this.progTimerCount >= this.progTimerMax\n      ) {\n        this.progTimerCount -= this.progTimerMax;\n        if (\n          this.isEnabled &&\n          this.lengthCounter > 0 &&\n          this.linearCounter > 0\n        ) {\n          this.clockTriangleGenerator();\n        }\n      }\n    }\n  },\n\n  clockTriangleGenerator: function() {\n    this.triangleCounter++;\n    this.triangleCounter &= 0x1f;\n  },\n\n  setEnabled: function(value) {\n    this.isEnabled = value;\n    if (!value) {\n      this.lengthCounter = 0;\n    }\n    this.updateSampleCondition();\n  },\n\n  updateSampleCondition: function() {\n    this.sampleCondition =\n      this.isEnabled &&\n      this.progTimerMax > 7 &&\n      this.linearCounter > 0 &&\n      this.lengthCounter > 0;\n  }\n};\n\nmodule.exports = PAPU;\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Mappers = __webpack_require__(9);\nvar Tile = __webpack_require__(2);\n\nvar ROM = function(nes) {\n  this.nes = nes;\n\n  this.mapperName = new Array(92);\n\n  for (var i = 0; i < 92; i++) {\n    this.mapperName[i] = \"Unknown Mapper\";\n  }\n  this.mapperName[0] = \"Direct Access\";\n  this.mapperName[1] = \"Nintendo MMC1\";\n  this.mapperName[2] = \"UNROM\";\n  this.mapperName[3] = \"CNROM\";\n  this.mapperName[4] = \"Nintendo MMC3\";\n  this.mapperName[5] = \"Nintendo MMC5\";\n  this.mapperName[6] = \"FFE F4xxx\";\n  this.mapperName[7] = \"AOROM\";\n  this.mapperName[8] = \"FFE F3xxx\";\n  this.mapperName[9] = \"Nintendo MMC2\";\n  this.mapperName[10] = \"Nintendo MMC4\";\n  this.mapperName[11] = \"Color Dreams Chip\";\n  this.mapperName[12] = \"FFE F6xxx\";\n  this.mapperName[15] = \"100-in-1 switch\";\n  this.mapperName[16] = \"Bandai chip\";\n  this.mapperName[17] = \"FFE F8xxx\";\n  this.mapperName[18] = \"Jaleco SS8806 chip\";\n  this.mapperName[19] = \"Namcot 106 chip\";\n  this.mapperName[20] = \"Famicom Disk System\";\n  this.mapperName[21] = \"Konami VRC4a\";\n  this.mapperName[22] = \"Konami VRC2a\";\n  this.mapperName[23] = \"Konami VRC2a\";\n  this.mapperName[24] = \"Konami VRC6\";\n  this.mapperName[25] = \"Konami VRC4b\";\n  this.mapperName[32] = \"Irem G-101 chip\";\n  this.mapperName[33] = \"Taito TC0190/TC0350\";\n  this.mapperName[34] = \"32kB ROM switch\";\n\n  this.mapperName[64] = \"Tengen RAMBO-1 chip\";\n  this.mapperName[65] = \"Irem H-3001 chip\";\n  this.mapperName[66] = \"GNROM switch\";\n  this.mapperName[67] = \"SunSoft3 chip\";\n  this.mapperName[68] = \"SunSoft4 chip\";\n  this.mapperName[69] = \"SunSoft5 FME-7 chip\";\n  this.mapperName[71] = \"Camerica chip\";\n  this.mapperName[78] = \"Irem 74HC161/32-based\";\n  this.mapperName[91] = \"Pirate HK-SF3 chip\";\n};\n\nROM.prototype = {\n  // Mirroring types:\n  VERTICAL_MIRRORING: 0,\n  HORIZONTAL_MIRRORING: 1,\n  FOURSCREEN_MIRRORING: 2,\n  SINGLESCREEN_MIRRORING: 3,\n  SINGLESCREEN_MIRRORING2: 4,\n  SINGLESCREEN_MIRRORING3: 5,\n  SINGLESCREEN_MIRRORING4: 6,\n  CHRROM_MIRRORING: 7,\n\n  header: null,\n  rom: null,\n  vrom: null,\n  vromTile: null,\n\n  romCount: null,\n  vromCount: null,\n  mirroring: null,\n  batteryRam: null,\n  trainer: null,\n  fourScreen: null,\n  mapperType: null,\n  valid: false,\n\n  load: function(data) {\n    var i, j, v;\n\n    if (data.indexOf(\"NES\\x1a\") === -1) {\n      throw new Error(\"Not a valid NES ROM.\");\n    }\n    this.header = new Array(16);\n    for (i = 0; i < 16; i++) {\n      this.header[i] = data.charCodeAt(i) & 0xff;\n    }\n    this.romCount = this.header[4];\n    this.vromCount = this.header[5] * 2; // Get the number of 4kB banks, not 8kB\n    this.mirroring = (this.header[6] & 1) !== 0 ? 1 : 0;\n    this.batteryRam = (this.header[6] & 2) !== 0;\n    this.trainer = (this.header[6] & 4) !== 0;\n    this.fourScreen = (this.header[6] & 8) !== 0;\n    this.mapperType = (this.header[6] >> 4) | (this.header[7] & 0xf0);\n    /* TODO\n        if (this.batteryRam)\n            this.loadBatteryRam();*/\n    // Check whether byte 8-15 are zero's:\n    var foundError = false;\n    for (i = 8; i < 16; i++) {\n      if (this.header[i] !== 0) {\n        foundError = true;\n        break;\n      }\n    }\n    if (foundError) {\n      this.mapperType &= 0xf; // Ignore byte 7\n    }\n    // Load PRG-ROM banks:\n    this.rom = new Array(this.romCount);\n    var offset = 16;\n    for (i = 0; i < this.romCount; i++) {\n      this.rom[i] = new Uint8Array(16384);\n      for (j = 0; j < 16384; j++) {\n        if (offset + j >= data.length) {\n          break;\n        }\n        this.rom[i][j] = data.charCodeAt(offset + j) & 0xff;\n      }\n      offset += 16384;\n    }\n    // Load CHR-ROM banks:\n    this.vrom = new Array(this.vromCount);\n    for (i = 0; i < this.vromCount; i++) {\n      this.vrom[i] = new Uint8Array(4096);\n      for (j = 0; j < 4096; j++) {\n        if (offset + j >= data.length) {\n          break;\n        }\n        this.vrom[i][j] = data.charCodeAt(offset + j) & 0xff;\n      }\n      offset += 4096;\n    }\n\n    // Create VROM tiles:\n    this.vromTile = new Array(this.vromCount);\n    for (i = 0; i < this.vromCount; i++) {\n      this.vromTile[i] = new Array(256);\n      for (j = 0; j < 256; j++) {\n        this.vromTile[i][j] = new Tile();\n      }\n    }\n\n    // Convert CHR-ROM banks to tiles:\n    var tileIndex;\n    var leftOver;\n    for (v = 0; v < this.vromCount; v++) {\n      for (i = 0; i < 4096; i++) {\n        tileIndex = i >> 4;\n        leftOver = i % 16;\n        if (leftOver < 8) {\n          this.vromTile[v][tileIndex].setScanline(\n            leftOver,\n            this.vrom[v][i],\n            this.vrom[v][i + 8]\n          );\n        } else {\n          this.vromTile[v][tileIndex].setScanline(\n            leftOver - 8,\n            this.vrom[v][i - 8],\n            this.vrom[v][i]\n          );\n        }\n      }\n    }\n\n    this.valid = true;\n  },\n\n  getMirroringType: function() {\n    if (this.fourScreen) {\n      return this.FOURSCREEN_MIRRORING;\n    }\n    if (this.mirroring === 0) {\n      return this.HORIZONTAL_MIRRORING;\n    }\n    return this.VERTICAL_MIRRORING;\n  },\n\n  getMapperName: function() {\n    if (this.mapperType >= 0 && this.mapperType < this.mapperName.length) {\n      return this.mapperName[this.mapperType];\n    }\n    return \"Unknown Mapper, \" + this.mapperType;\n  },\n\n  mapperSupported: function() {\n    return typeof Mappers[this.mapperType] !== \"undefined\";\n  },\n\n  createMapper: function() {\n    if (this.mapperSupported()) {\n      return new Mappers[this.mapperType](this.nes);\n    } else {\n      throw new Error(\n        \"This ROM uses a mapper not supported by JSNES: \" +\n          this.getMapperName() +\n          \"(\" +\n          this.mapperType +\n          \")\"\n      );\n    }\n  }\n};\n\nmodule.exports = ROM;\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar utils = __webpack_require__(0);\n\nvar Mappers = {};\n\nMappers[0] = function(nes) {\n  this.nes = nes;\n};\n\nMappers[0].prototype = {\n  reset: function() {\n    this.joy1StrobeState = 0;\n    this.joy2StrobeState = 0;\n    this.joypadLastWrite = 0;\n\n    this.zapperFired = false;\n    this.zapperX = null;\n    this.zapperY = null;\n  },\n\n  write: function(address, value) {\n    if (address < 0x2000) {\n      // Mirroring of RAM:\n      this.nes.cpu.mem[address & 0x7ff] = value;\n    } else if (address > 0x4017) {\n      this.nes.cpu.mem[address] = value;\n      if (address >= 0x6000 && address < 0x8000) {\n        // Write to persistent RAM\n        this.nes.opts.onBatteryRamWrite(address, value);\n      }\n    } else if (address > 0x2007 && address < 0x4000) {\n      this.regWrite(0x2000 + (address & 0x7), value);\n    } else {\n      this.regWrite(address, value);\n    }\n  },\n\n  writelow: function(address, value) {\n    if (address < 0x2000) {\n      // Mirroring of RAM:\n      this.nes.cpu.mem[address & 0x7ff] = value;\n    } else if (address > 0x4017) {\n      this.nes.cpu.mem[address] = value;\n    } else if (address > 0x2007 && address < 0x4000) {\n      this.regWrite(0x2000 + (address & 0x7), value);\n    } else {\n      this.regWrite(address, value);\n    }\n  },\n\n  load: function(address) {\n    // Wrap around:\n    address &= 0xffff;\n\n    // Check address range:\n    if (address > 0x4017) {\n      // ROM:\n      return this.nes.cpu.mem[address];\n    } else if (address >= 0x2000) {\n      // I/O Ports.\n      return this.regLoad(address);\n    } else {\n      // RAM (mirrored)\n      return this.nes.cpu.mem[address & 0x7ff];\n    }\n  },\n\n  regLoad: function(address) {\n    switch (\n      address >> 12 // use fourth nibble (0xF000)\n    ) {\n      case 0:\n        break;\n\n      case 1:\n        break;\n\n      case 2:\n      // Fall through to case 3\n      case 3:\n        // PPU Registers\n        switch (address & 0x7) {\n          case 0x0:\n            // 0x2000:\n            // PPU Control Register 1.\n            // (the value is stored both\n            // in main memory and in the\n            // PPU as flags):\n            // (not in the real NES)\n            return this.nes.cpu.mem[0x2000];\n\n          case 0x1:\n            // 0x2001:\n            // PPU Control Register 2.\n            // (the value is stored both\n            // in main memory and in the\n            // PPU as flags):\n            // (not in the real NES)\n            return this.nes.cpu.mem[0x2001];\n\n          case 0x2:\n            // 0x2002:\n            // PPU Status Register.\n            // The value is stored in\n            // main memory in addition\n            // to as flags in the PPU.\n            // (not in the real NES)\n            return this.nes.ppu.readStatusRegister();\n\n          case 0x3:\n            return 0;\n\n          case 0x4:\n            // 0x2004:\n            // Sprite Memory read.\n            return this.nes.ppu.sramLoad();\n          case 0x5:\n            return 0;\n\n          case 0x6:\n            return 0;\n\n          case 0x7:\n            // 0x2007:\n            // VRAM read:\n            return this.nes.ppu.vramLoad();\n        }\n        break;\n      case 4:\n        // Sound+Joypad registers\n        switch (address - 0x4015) {\n          case 0:\n            // 0x4015:\n            // Sound channel enable, DMC Status\n            return this.nes.papu.readReg(address);\n\n          case 1:\n            // 0x4016:\n            // Joystick 1 + Strobe\n            return this.joy1Read();\n\n          case 2:\n            // 0x4017:\n            // Joystick 2 + Strobe\n            // https://wiki.nesdev.com/w/index.php/Zapper\n            var w;\n\n            if (\n              this.zapperX !== null &&\n              this.zapperY !== null &&\n              this.nes.ppu.isPixelWhite(this.zapperX, this.zapperY)\n            ) {\n              w = 0;\n            } else {\n              w = 0x1 << 3;\n            }\n\n            if (this.zapperFired) {\n              w |= 0x1 << 4;\n            }\n            return (this.joy2Read() | w) & 0xffff;\n        }\n        break;\n    }\n    return 0;\n  },\n\n  regWrite: function(address, value) {\n    switch (address) {\n      case 0x2000:\n        // PPU Control register 1\n        this.nes.cpu.mem[address] = value;\n        this.nes.ppu.updateControlReg1(value);\n        break;\n\n      case 0x2001:\n        // PPU Control register 2\n        this.nes.cpu.mem[address] = value;\n        this.nes.ppu.updateControlReg2(value);\n        break;\n\n      case 0x2003:\n        // Set Sprite RAM address:\n        this.nes.ppu.writeSRAMAddress(value);\n        break;\n\n      case 0x2004:\n        // Write to Sprite RAM:\n        this.nes.ppu.sramWrite(value);\n        break;\n\n      case 0x2005:\n        // Screen Scroll offsets:\n        this.nes.ppu.scrollWrite(value);\n        break;\n\n      case 0x2006:\n        // Set VRAM address:\n        this.nes.ppu.writeVRAMAddress(value);\n        break;\n\n      case 0x2007:\n        // Write to VRAM:\n        this.nes.ppu.vramWrite(value);\n        break;\n\n      case 0x4014:\n        // Sprite Memory DMA Access\n        this.nes.ppu.sramDMA(value);\n        break;\n\n      case 0x4015:\n        // Sound Channel Switch, DMC Status\n        this.nes.papu.writeReg(address, value);\n        break;\n\n      case 0x4016:\n        // Joystick 1 + Strobe\n        if ((value & 1) === 0 && (this.joypadLastWrite & 1) === 1) {\n          this.joy1StrobeState = 0;\n          this.joy2StrobeState = 0;\n        }\n        this.joypadLastWrite = value;\n        break;\n\n      case 0x4017:\n        // Sound channel frame sequencer:\n        this.nes.papu.writeReg(address, value);\n        break;\n\n      default:\n        // Sound registers\n        // console.log(\"write to sound reg\");\n        if (address >= 0x4000 && address <= 0x4017) {\n          this.nes.papu.writeReg(address, value);\n        }\n    }\n  },\n\n  joy1Read: function() {\n    var ret;\n\n    switch (this.joy1StrobeState) {\n      case 0:\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n        ret = this.nes.controllers[1].state[this.joy1StrobeState];\n        break;\n      case 8:\n      case 9:\n      case 10:\n      case 11:\n      case 12:\n      case 13:\n      case 14:\n      case 15:\n      case 16:\n      case 17:\n      case 18:\n        ret = 0;\n        break;\n      case 19:\n        ret = 1;\n        break;\n      default:\n        ret = 0;\n    }\n\n    this.joy1StrobeState++;\n    if (this.joy1StrobeState === 24) {\n      this.joy1StrobeState = 0;\n    }\n\n    return ret;\n  },\n\n  joy2Read: function() {\n    var ret;\n\n    switch (this.joy2StrobeState) {\n      case 0:\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n        ret = this.nes.controllers[2].state[this.joy2StrobeState];\n        break;\n      case 8:\n      case 9:\n      case 10:\n      case 11:\n      case 12:\n      case 13:\n      case 14:\n      case 15:\n      case 16:\n      case 17:\n      case 18:\n        ret = 0;\n        break;\n      case 19:\n        ret = 1;\n        break;\n      default:\n        ret = 0;\n    }\n\n    this.joy2StrobeState++;\n    if (this.joy2StrobeState === 24) {\n      this.joy2StrobeState = 0;\n    }\n\n    return ret;\n  },\n\n  loadROM: function() {\n    if (!this.nes.rom.valid || this.nes.rom.romCount < 1) {\n      throw new Error(\"NoMapper: Invalid ROM! Unable to load.\");\n    }\n\n    // Load ROM into memory:\n    this.loadPRGROM();\n\n    // Load CHR-ROM:\n    this.loadCHRROM();\n\n    // Load Battery RAM (if present):\n    this.loadBatteryRam();\n\n    // Reset IRQ:\n    //nes.getCpu().doResetInterrupt();\n    this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n  },\n\n  loadPRGROM: function() {\n    if (this.nes.rom.romCount > 1) {\n      // Load the two first banks into memory.\n      this.loadRomBank(0, 0x8000);\n      this.loadRomBank(1, 0xc000);\n    } else {\n      // Load the one bank into both memory locations:\n      this.loadRomBank(0, 0x8000);\n      this.loadRomBank(0, 0xc000);\n    }\n  },\n\n  loadCHRROM: function() {\n    // console.log(\"Loading CHR ROM..\");\n    if (this.nes.rom.vromCount > 0) {\n      if (this.nes.rom.vromCount === 1) {\n        this.loadVromBank(0, 0x0000);\n        this.loadVromBank(0, 0x1000);\n      } else {\n        this.loadVromBank(0, 0x0000);\n        this.loadVromBank(1, 0x1000);\n      }\n    } else {\n      //System.out.println(\"There aren't any CHR-ROM banks..\");\n    }\n  },\n\n  loadBatteryRam: function() {\n    if (this.nes.rom.batteryRam) {\n      var ram = this.nes.rom.batteryRam;\n      if (ram !== null && ram.length === 0x2000) {\n        // Load Battery RAM into memory:\n        utils.copyArrayElements(ram, 0, this.nes.cpu.mem, 0x6000, 0x2000);\n      }\n    }\n  },\n\n  loadRomBank: function(bank, address) {\n    // Loads a ROM bank into the specified address.\n    bank %= this.nes.rom.romCount;\n    //var data = this.nes.rom.rom[bank];\n    //cpuMem.write(address,data,data.length);\n    utils.copyArrayElements(\n      this.nes.rom.rom[bank],\n      0,\n      this.nes.cpu.mem,\n      address,\n      16384\n    );\n  },\n\n  loadVromBank: function(bank, address) {\n    if (this.nes.rom.vromCount === 0) {\n      return;\n    }\n    this.nes.ppu.triggerRendering();\n\n    utils.copyArrayElements(\n      this.nes.rom.vrom[bank % this.nes.rom.vromCount],\n      0,\n      this.nes.ppu.vramMem,\n      address,\n      4096\n    );\n\n    var vromTile = this.nes.rom.vromTile[bank % this.nes.rom.vromCount];\n    utils.copyArrayElements(\n      vromTile,\n      0,\n      this.nes.ppu.ptTile,\n      address >> 4,\n      256\n    );\n  },\n\n  load32kRomBank: function(bank, address) {\n    this.loadRomBank((bank * 2) % this.nes.rom.romCount, address);\n    this.loadRomBank((bank * 2 + 1) % this.nes.rom.romCount, address + 16384);\n  },\n\n  load8kVromBank: function(bank4kStart, address) {\n    if (this.nes.rom.vromCount === 0) {\n      return;\n    }\n    this.nes.ppu.triggerRendering();\n\n    this.loadVromBank(bank4kStart % this.nes.rom.vromCount, address);\n    this.loadVromBank(\n      (bank4kStart + 1) % this.nes.rom.vromCount,\n      address + 4096\n    );\n  },\n\n  load1kVromBank: function(bank1k, address) {\n    if (this.nes.rom.vromCount === 0) {\n      return;\n    }\n    this.nes.ppu.triggerRendering();\n\n    var bank4k = Math.floor(bank1k / 4) % this.nes.rom.vromCount;\n    var bankoffset = (bank1k % 4) * 1024;\n    utils.copyArrayElements(\n      this.nes.rom.vrom[bank4k],\n      bankoffset,\n      this.nes.ppu.vramMem,\n      address,\n      1024\n    );\n\n    // Update tiles:\n    var vromTile = this.nes.rom.vromTile[bank4k];\n    var baseIndex = address >> 4;\n    for (var i = 0; i < 64; i++) {\n      this.nes.ppu.ptTile[baseIndex + i] = vromTile[(bank1k % 4 << 6) + i];\n    }\n  },\n\n  load2kVromBank: function(bank2k, address) {\n    if (this.nes.rom.vromCount === 0) {\n      return;\n    }\n    this.nes.ppu.triggerRendering();\n\n    var bank4k = Math.floor(bank2k / 2) % this.nes.rom.vromCount;\n    var bankoffset = (bank2k % 2) * 2048;\n    utils.copyArrayElements(\n      this.nes.rom.vrom[bank4k],\n      bankoffset,\n      this.nes.ppu.vramMem,\n      address,\n      2048\n    );\n\n    // Update tiles:\n    var vromTile = this.nes.rom.vromTile[bank4k];\n    var baseIndex = address >> 4;\n    for (var i = 0; i < 128; i++) {\n      this.nes.ppu.ptTile[baseIndex + i] = vromTile[(bank2k % 2 << 7) + i];\n    }\n  },\n\n  load8kRomBank: function(bank8k, address) {\n    var bank16k = Math.floor(bank8k / 2) % this.nes.rom.romCount;\n    var offset = (bank8k % 2) * 8192;\n\n    //this.nes.cpu.mem.write(address,this.nes.rom.rom[bank16k],offset,8192);\n    utils.copyArrayElements(\n      this.nes.rom.rom[bank16k],\n      offset,\n      this.nes.cpu.mem,\n      address,\n      8192\n    );\n  },\n\n  clockIrqCounter: function() {\n    // Does nothing. This is used by the MMC3 mapper.\n  },\n\n  // eslint-disable-next-line no-unused-vars\n  latchAccess: function(address) {\n    // Does nothing. This is used by MMC2.\n  },\n\n  toJSON: function() {\n    return {\n      joy1StrobeState: this.joy1StrobeState,\n      joy2StrobeState: this.joy2StrobeState,\n      joypadLastWrite: this.joypadLastWrite\n    };\n  },\n\n  fromJSON: function(s) {\n    this.joy1StrobeState = s.joy1StrobeState;\n    this.joy2StrobeState = s.joy2StrobeState;\n    this.joypadLastWrite = s.joypadLastWrite;\n  }\n};\n\nMappers[1] = function(nes) {\n  this.nes = nes;\n};\n\nMappers[1].prototype = new Mappers[0]();\n\nMappers[1].prototype.reset = function() {\n  Mappers[0].prototype.reset.apply(this);\n\n  // 5-bit buffer:\n  this.regBuffer = 0;\n  this.regBufferCounter = 0;\n\n  // Register 0:\n  this.mirroring = 0;\n  this.oneScreenMirroring = 0;\n  this.prgSwitchingArea = 1;\n  this.prgSwitchingSize = 1;\n  this.vromSwitchingSize = 0;\n\n  // Register 1:\n  this.romSelectionReg0 = 0;\n\n  // Register 2:\n  this.romSelectionReg1 = 0;\n\n  // Register 3:\n  this.romBankSelect = 0;\n};\n\nMappers[1].prototype.write = function(address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  }\n\n  // See what should be done with the written value:\n  if ((value & 128) !== 0) {\n    // Reset buffering:\n    this.regBufferCounter = 0;\n    this.regBuffer = 0;\n\n    // Reset register:\n    if (this.getRegNumber(address) === 0) {\n      this.prgSwitchingArea = 1;\n      this.prgSwitchingSize = 1;\n    }\n  } else {\n    // Continue buffering:\n    //regBuffer = (regBuffer & (0xFF-(1<<regBufferCounter))) | ((value & (1<<regBufferCounter))<<regBufferCounter);\n    this.regBuffer =\n      (this.regBuffer & (0xff - (1 << this.regBufferCounter))) |\n      ((value & 1) << this.regBufferCounter);\n    this.regBufferCounter++;\n\n    if (this.regBufferCounter === 5) {\n      // Use the buffered value:\n      this.setReg(this.getRegNumber(address), this.regBuffer);\n\n      // Reset buffer:\n      this.regBuffer = 0;\n      this.regBufferCounter = 0;\n    }\n  }\n};\n\nMappers[1].prototype.setReg = function(reg, value) {\n  var tmp;\n\n  switch (reg) {\n    case 0:\n      // Mirroring:\n      tmp = value & 3;\n      if (tmp !== this.mirroring) {\n        // Set mirroring:\n        this.mirroring = tmp;\n        if ((this.mirroring & 2) === 0) {\n          // SingleScreen mirroring overrides the other setting:\n          this.nes.ppu.setMirroring(this.nes.rom.SINGLESCREEN_MIRRORING);\n        } else if ((this.mirroring & 1) !== 0) {\n          // Not overridden by SingleScreen mirroring.\n          this.nes.ppu.setMirroring(this.nes.rom.HORIZONTAL_MIRRORING);\n        } else {\n          this.nes.ppu.setMirroring(this.nes.rom.VERTICAL_MIRRORING);\n        }\n      }\n\n      // PRG Switching Area;\n      this.prgSwitchingArea = (value >> 2) & 1;\n\n      // PRG Switching Size:\n      this.prgSwitchingSize = (value >> 3) & 1;\n\n      // VROM Switching Size:\n      this.vromSwitchingSize = (value >> 4) & 1;\n\n      break;\n\n    case 1:\n      // ROM selection:\n      this.romSelectionReg0 = (value >> 4) & 1;\n\n      // Check whether the cart has VROM:\n      if (this.nes.rom.vromCount > 0) {\n        // Select VROM bank at 0x0000:\n        if (this.vromSwitchingSize === 0) {\n          // Swap 8kB VROM:\n          if (this.romSelectionReg0 === 0) {\n            this.load8kVromBank(value & 0xf, 0x0000);\n          } else {\n            this.load8kVromBank(\n              Math.floor(this.nes.rom.vromCount / 2) + (value & 0xf),\n              0x0000\n            );\n          }\n        } else {\n          // Swap 4kB VROM:\n          if (this.romSelectionReg0 === 0) {\n            this.loadVromBank(value & 0xf, 0x0000);\n          } else {\n            this.loadVromBank(\n              Math.floor(this.nes.rom.vromCount / 2) + (value & 0xf),\n              0x0000\n            );\n          }\n        }\n      }\n\n      break;\n\n    case 2:\n      // ROM selection:\n      this.romSelectionReg1 = (value >> 4) & 1;\n\n      // Check whether the cart has VROM:\n      if (this.nes.rom.vromCount > 0) {\n        // Select VROM bank at 0x1000:\n        if (this.vromSwitchingSize === 1) {\n          // Swap 4kB of VROM:\n          if (this.romSelectionReg1 === 0) {\n            this.loadVromBank(value & 0xf, 0x1000);\n          } else {\n            this.loadVromBank(\n              Math.floor(this.nes.rom.vromCount / 2) + (value & 0xf),\n              0x1000\n            );\n          }\n        }\n      }\n      break;\n\n    default:\n      // Select ROM bank:\n      // -------------------------\n      tmp = value & 0xf;\n      var bank;\n      var baseBank = 0;\n\n      if (this.nes.rom.romCount >= 32) {\n        // 1024 kB cart\n        if (this.vromSwitchingSize === 0) {\n          if (this.romSelectionReg0 === 1) {\n            baseBank = 16;\n          }\n        } else {\n          baseBank =\n            (this.romSelectionReg0 | (this.romSelectionReg1 << 1)) << 3;\n        }\n      } else if (this.nes.rom.romCount >= 16) {\n        // 512 kB cart\n        if (this.romSelectionReg0 === 1) {\n          baseBank = 8;\n        }\n      }\n\n      if (this.prgSwitchingSize === 0) {\n        // 32kB\n        bank = baseBank + (value & 0xf);\n        this.load32kRomBank(bank, 0x8000);\n      } else {\n        // 16kB\n        bank = baseBank * 2 + (value & 0xf);\n        if (this.prgSwitchingArea === 0) {\n          this.loadRomBank(bank, 0xc000);\n        } else {\n          this.loadRomBank(bank, 0x8000);\n        }\n      }\n  }\n};\n\n// Returns the register number from the address written to:\nMappers[1].prototype.getRegNumber = function(address) {\n  if (address >= 0x8000 && address <= 0x9fff) {\n    return 0;\n  } else if (address >= 0xa000 && address <= 0xbfff) {\n    return 1;\n  } else if (address >= 0xc000 && address <= 0xdfff) {\n    return 2;\n  } else {\n    return 3;\n  }\n};\n\nMappers[1].prototype.loadROM = function() {\n  if (!this.nes.rom.valid) {\n    throw new Error(\"MMC1: Invalid ROM! Unable to load.\");\n  }\n\n  // Load PRG-ROM:\n  this.loadRomBank(0, 0x8000); //   First ROM bank..\n  this.loadRomBank(this.nes.rom.romCount - 1, 0xc000); // ..and last ROM bank.\n\n  // Load CHR-ROM:\n  this.loadCHRROM();\n\n  // Load Battery RAM (if present):\n  this.loadBatteryRam();\n\n  // Do Reset-Interrupt:\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n};\n\n// eslint-disable-next-line no-unused-vars\nMappers[1].prototype.switchLowHighPrgRom = function(oldSetting) {\n  // not yet.\n};\n\nMappers[1].prototype.switch16to32 = function() {\n  // not yet.\n};\n\nMappers[1].prototype.switch32to16 = function() {\n  // not yet.\n};\n\nMappers[1].prototype.toJSON = function() {\n  var s = Mappers[0].prototype.toJSON.apply(this);\n  s.mirroring = this.mirroring;\n  s.oneScreenMirroring = this.oneScreenMirroring;\n  s.prgSwitchingArea = this.prgSwitchingArea;\n  s.prgSwitchingSize = this.prgSwitchingSize;\n  s.vromSwitchingSize = this.vromSwitchingSize;\n  s.romSelectionReg0 = this.romSelectionReg0;\n  s.romSelectionReg1 = this.romSelectionReg1;\n  s.romBankSelect = this.romBankSelect;\n  s.regBuffer = this.regBuffer;\n  s.regBufferCounter = this.regBufferCounter;\n  return s;\n};\n\nMappers[1].prototype.fromJSON = function(s) {\n  Mappers[0].prototype.fromJSON.apply(this, arguments);\n  this.mirroring = s.mirroring;\n  this.oneScreenMirroring = s.oneScreenMirroring;\n  this.prgSwitchingArea = s.prgSwitchingArea;\n  this.prgSwitchingSize = s.prgSwitchingSize;\n  this.vromSwitchingSize = s.vromSwitchingSize;\n  this.romSelectionReg0 = s.romSelectionReg0;\n  this.romSelectionReg1 = s.romSelectionReg1;\n  this.romBankSelect = s.romBankSelect;\n  this.regBuffer = s.regBuffer;\n  this.regBufferCounter = s.regBufferCounter;\n};\n\nMappers[2] = function(nes) {\n  this.nes = nes;\n};\n\nMappers[2].prototype = new Mappers[0]();\n\nMappers[2].prototype.write = function(address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    // This is a ROM bank select command.\n    // Swap in the given ROM bank at 0x8000:\n    this.loadRomBank(value, 0x8000);\n  }\n};\n\nMappers[2].prototype.loadROM = function() {\n  if (!this.nes.rom.valid) {\n    throw new Error(\"UNROM: Invalid ROM! Unable to load.\");\n  }\n\n  // Load PRG-ROM:\n  this.loadRomBank(0, 0x8000);\n  this.loadRomBank(this.nes.rom.romCount - 1, 0xc000);\n\n  // Load CHR-ROM:\n  this.loadCHRROM();\n\n  // Do Reset-Interrupt:\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n};\n\n/**\n * Mapper 003 (CNROM)\n *\n * @constructor\n * @example Solomon's Key, Arkanoid, Arkista's Ring, Bump 'n' Jump, Cybernoid\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_003\n */\nMappers[3] = function(nes) {\n  this.nes = nes;\n};\n\nMappers[3].prototype = new Mappers[0]();\n\nMappers[3].prototype.write = function(address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    // This is a ROM bank select command.\n    // Swap in the given ROM bank at 0x8000:\n    // This is a VROM bank select command.\n    // Swap in the given VROM bank at 0x0000:\n    var bank = (value % (this.nes.rom.vromCount / 2)) * 2;\n    this.loadVromBank(bank, 0x0000);\n    this.loadVromBank(bank + 1, 0x1000);\n    this.load8kVromBank(value * 2, 0x0000);\n  }\n};\n\nMappers[4] = function(nes) {\n  this.nes = nes;\n\n  this.CMD_SEL_2_1K_VROM_0000 = 0;\n  this.CMD_SEL_2_1K_VROM_0800 = 1;\n  this.CMD_SEL_1K_VROM_1000 = 2;\n  this.CMD_SEL_1K_VROM_1400 = 3;\n  this.CMD_SEL_1K_VROM_1800 = 4;\n  this.CMD_SEL_1K_VROM_1C00 = 5;\n  this.CMD_SEL_ROM_PAGE1 = 6;\n  this.CMD_SEL_ROM_PAGE2 = 7;\n\n  this.command = null;\n  this.prgAddressSelect = null;\n  this.chrAddressSelect = null;\n  this.irqCounter = 0xff;\n  this.irqLatchValue = 0xff;\n  this.irqReload = 0;\n  this.irqEnable = 0;\n  this.prgAddressChanged = false;\n};\n\nMappers[4].prototype = new Mappers[0]();\n\nMappers[4].prototype.write = function(address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  }\n\n  switch (address & 0xe001) {\n    case 0x8000:\n      // Command/Address Select register\n      this.command = value & 7;\n      var tmp = (value >> 6) & 1;\n      if (tmp !== this.prgAddressSelect) {\n        this.prgAddressChanged = true;\n      }\n      this.prgAddressSelect = tmp;\n      this.chrAddressSelect = (value >> 7) & 1;\n      break;\n\n    case 0x8001:\n      // Page number for command\n      this.executeCommand(this.command, value);\n      break;\n\n    case 0xa000:\n      // Mirroring select\n      if ((value & 1) !== 0) {\n        this.nes.ppu.setMirroring(this.nes.rom.HORIZONTAL_MIRRORING);\n      } else {\n        this.nes.ppu.setMirroring(this.nes.rom.VERTICAL_MIRRORING);\n      }\n      break;\n\n    case 0xa001:\n      // SaveRAM Toggle\n      // TODO\n      //nes.getRom().setSaveState((value&1)!=0);\n      break;\n\n    case 0xc000:\n      // IRQ Latch register\n      this.irqLatchValue = value;\n      break;\n\n    case 0xc001:\n      // IRQ Reload register (TODO: copy at next rising A12)\n      this.irqReload = 1;\n      break;\n\n    case 0xe000:\n      // IRQ Control Reg 0 (disable, ack)\n      this.irqEnable = 0;\n      break;\n\n    case 0xe001:\n      // IRQ Control Reg 1 (enable)\n      this.irqEnable = 1;\n      break;\n\n    default:\n    // Not a MMC3 register.\n    // The game has probably crashed,\n    // since it tries to write to ROM..\n    // IGNORE.\n  }\n};\n\nMappers[4].prototype.executeCommand = function(cmd, arg) {\n  switch (cmd) {\n    case this.CMD_SEL_2_1K_VROM_0000:\n      // Select 2 1KB VROM pages at 0x0000:\n      if (this.chrAddressSelect === 0) {\n        this.load1kVromBank(arg, 0x0000);\n        this.load1kVromBank(arg + 1, 0x0400);\n      } else {\n        this.load1kVromBank(arg, 0x1000);\n        this.load1kVromBank(arg + 1, 0x1400);\n      }\n      break;\n\n    case this.CMD_SEL_2_1K_VROM_0800:\n      // Select 2 1KB VROM pages at 0x0800:\n      if (this.chrAddressSelect === 0) {\n        this.load1kVromBank(arg, 0x0800);\n        this.load1kVromBank(arg + 1, 0x0c00);\n      } else {\n        this.load1kVromBank(arg, 0x1800);\n        this.load1kVromBank(arg + 1, 0x1c00);\n      }\n      break;\n\n    case this.CMD_SEL_1K_VROM_1000:\n      // Select 1K VROM Page at 0x1000:\n      if (this.chrAddressSelect === 0) {\n        this.load1kVromBank(arg, 0x1000);\n      } else {\n        this.load1kVromBank(arg, 0x0000);\n      }\n      break;\n\n    case this.CMD_SEL_1K_VROM_1400:\n      // Select 1K VROM Page at 0x1400:\n      if (this.chrAddressSelect === 0) {\n        this.load1kVromBank(arg, 0x1400);\n      } else {\n        this.load1kVromBank(arg, 0x0400);\n      }\n      break;\n\n    case this.CMD_SEL_1K_VROM_1800:\n      // Select 1K VROM Page at 0x1800:\n      if (this.chrAddressSelect === 0) {\n        this.load1kVromBank(arg, 0x1800);\n      } else {\n        this.load1kVromBank(arg, 0x0800);\n      }\n      break;\n\n    case this.CMD_SEL_1K_VROM_1C00:\n      // Select 1K VROM Page at 0x1C00:\n      if (this.chrAddressSelect === 0) {\n        this.load1kVromBank(arg, 0x1c00);\n      } else {\n        this.load1kVromBank(arg, 0x0c00);\n      }\n      break;\n\n    case this.CMD_SEL_ROM_PAGE1:\n      if (this.prgAddressChanged) {\n        // Load the two hardwired banks:\n        if (this.prgAddressSelect === 0) {\n          this.load8kRomBank((this.nes.rom.romCount - 1) * 2, 0xc000);\n        } else {\n          this.load8kRomBank((this.nes.rom.romCount - 1) * 2, 0x8000);\n        }\n        this.prgAddressChanged = false;\n      }\n\n      // Select first switchable ROM page:\n      if (this.prgAddressSelect === 0) {\n        this.load8kRomBank(arg, 0x8000);\n      } else {\n        this.load8kRomBank(arg, 0xc000);\n      }\n      break;\n\n    case this.CMD_SEL_ROM_PAGE2:\n      // Select second switchable ROM page:\n      this.load8kRomBank(arg, 0xa000);\n\n      // hardwire appropriate bank:\n      if (this.prgAddressChanged) {\n        // Load the two hardwired banks:\n        if (this.prgAddressSelect === 0) {\n          this.load8kRomBank((this.nes.rom.romCount - 1) * 2, 0xc000);\n        } else {\n          this.load8kRomBank((this.nes.rom.romCount - 1) * 2, 0x8000);\n        }\n        this.prgAddressChanged = false;\n      }\n  }\n};\n\nMappers[4].prototype.loadROM = function() {\n  if (!this.nes.rom.valid) {\n    throw new Error(\"MMC3: Invalid ROM! Unable to load.\");\n  }\n\n  // Load hardwired PRG banks (0xC000 and 0xE000):\n  this.load8kRomBank((this.nes.rom.romCount - 1) * 2, 0xc000);\n  this.load8kRomBank((this.nes.rom.romCount - 1) * 2 + 1, 0xe000);\n\n  // Load swappable PRG banks (0x8000 and 0xA000):\n  this.load8kRomBank(0, 0x8000);\n  this.load8kRomBank(1, 0xa000);\n\n  // Load CHR-ROM:\n  this.loadCHRROM();\n\n  // Load Battery RAM (if present):\n  this.loadBatteryRam();\n\n  // Do Reset-Interrupt:\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n};\n\nMappers[4].prototype.clockIrqCounter = function() {\n  if (this.irqReload === 1) {\n    this.irqCounter = this.irqLatchValue;\n    this.irqReload = 0;\n  }\n  this.irqCounter--;\n  if (this.irqCounter < 0) {\n    if (this.irqEnable === 1) {\n      this.nes.cpu.requestIrq(this.nes.cpu.IRQ_NORMAL);\n    }\n    this.irqCounter = this.irqLatchValue;\n  }\n};\n\nMappers[4].prototype.toJSON = function() {\n  var s = Mappers[0].prototype.toJSON.apply(this);\n  s.command = this.command;\n  s.prgAddressSelect = this.prgAddressSelect;\n  s.chrAddressSelect = this.chrAddressSelect;\n  s.irqReload = this.irqReload;\n  s.irqCounter = this.irqCounter;\n  s.irqLatchValue = this.irqLatchValue;\n  s.irqEnable = this.irqEnable;\n  s.prgAddressChanged = this.prgAddressChanged;\n  return s;\n};\n\nMappers[4].prototype.fromJSON = function(s) {\n  Mappers[0].prototype.fromJSON.apply(this, arguments);\n  this.command = s.command;\n  this.prgAddressSelect = s.prgAddressSelect;\n  this.chrAddressSelect = s.chrAddressSelect;\n  this.irqReload = s.irqReload;\n  this.irqCounter = s.irqCounter;\n  this.irqLatchValue = s.irqLatchValue;\n  this.irqEnable = s.irqEnable;\n  this.prgAddressChanged = s.prgAddressChanged;\n};\n\n/**\n * Mapper005 (MMC5,ExROM)\n *\n * @example Castlevania 3, Just Breed, Uncharted Waters, Romance of the 3 Kingdoms 2, Laser Invasion, Metal Slader Glory, Uchuu Keibitai SDF, Shin 4 Nin Uchi Mahjong - Yakuman Tengoku\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_005\n * @constructor\n */\nMappers[5] = function(nes) {\n  this.nes = nes;\n};\n\nMappers[5].prototype = new Mappers[0]();\n\nMappers[5].prototype.write = function(address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n  } else {\n    this.load8kVromBank(value, 0x0000);\n  }\n};\n\nMappers[5].prototype.write = function(address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x5000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  }\n\n  switch (address) {\n    case 0x5100:\n      this.prg_size = value & 3;\n      break;\n    case 0x5101:\n      this.chr_size = value & 3;\n      break;\n    case 0x5102:\n      this.sram_we_a = value & 3;\n      break;\n    case 0x5103:\n      this.sram_we_b = value & 3;\n      break;\n    case 0x5104:\n      this.graphic_mode = value & 3;\n      break;\n    case 0x5105:\n      this.nametable_mode = value;\n      this.nametable_type[0] = value & 3;\n      this.load1kVromBank(value & 3, 0x2000);\n      value >>= 2;\n      this.nametable_type[1] = value & 3;\n      this.load1kVromBank(value & 3, 0x2400);\n      value >>= 2;\n      this.nametable_type[2] = value & 3;\n      this.load1kVromBank(value & 3, 0x2800);\n      value >>= 2;\n      this.nametable_type[3] = value & 3;\n      this.load1kVromBank(value & 3, 0x2c00);\n      break;\n    case 0x5106:\n      this.fill_chr = value;\n      break;\n    case 0x5107:\n      this.fill_pal = value & 3;\n      break;\n    case 0x5113:\n      this.SetBank_SRAM(3, value & 3);\n      break;\n    case 0x5114:\n    case 0x5115:\n    case 0x5116:\n    case 0x5117:\n      this.SetBank_CPU(address, value);\n      break;\n    case 0x5120:\n    case 0x5121:\n    case 0x5122:\n    case 0x5123:\n    case 0x5124:\n    case 0x5125:\n    case 0x5126:\n    case 0x5127:\n      this.chr_mode = 0;\n      this.chr_page[0][address & 7] = value;\n      this.SetBank_PPU();\n      break;\n    case 0x5128:\n    case 0x5129:\n    case 0x512a:\n    case 0x512b:\n      this.chr_mode = 1;\n      this.chr_page[1][(address & 3) + 0] = value;\n      this.chr_page[1][(address & 3) + 4] = value;\n      this.SetBank_PPU();\n      break;\n    case 0x5200:\n      this.split_control = value;\n      break;\n    case 0x5201:\n      this.split_scroll = value;\n      break;\n    case 0x5202:\n      this.split_page = value & 0x3f;\n      break;\n    case 0x5203:\n      this.irq_line = value;\n      this.nes.cpu.ClearIRQ();\n      break;\n    case 0x5204:\n      this.irq_enable = value;\n      this.nes.cpu.ClearIRQ();\n      break;\n    case 0x5205:\n      this.mult_a = value;\n      break;\n    case 0x5206:\n      this.mult_b = value;\n      break;\n    default:\n      if (address >= 0x5000 && address <= 0x5015) {\n        this.nes.papu.exWrite(address, value);\n      } else if (address >= 0x5c00 && address <= 0x5fff) {\n        if (this.graphic_mode === 2) {\n          // ExRAM\n          // vram write\n        } else if (this.graphic_mode !== 3) {\n          // Split,ExGraphic\n          if (this.irq_status & 0x40) {\n            // vram write\n          } else {\n            // vram write\n          }\n        }\n      } else if (address >= 0x6000 && address <= 0x7fff) {\n        if (this.sram_we_a === 2 && this.sram_we_b === 1) {\n          // additional ram write\n        }\n      }\n      break;\n  }\n};\n\nMappers[5].prototype.loadROM = function() {\n  if (!this.nes.rom.valid) {\n    throw new Error(\"UNROM: Invalid ROM! Unable to load.\");\n  }\n\n  // Load PRG-ROM:\n  this.load8kRomBank(this.nes.rom.romCount * 2 - 1, 0x8000);\n  this.load8kRomBank(this.nes.rom.romCount * 2 - 1, 0xa000);\n  this.load8kRomBank(this.nes.rom.romCount * 2 - 1, 0xc000);\n  this.load8kRomBank(this.nes.rom.romCount * 2 - 1, 0xe000);\n\n  // Load CHR-ROM:\n  this.loadCHRROM();\n\n  // Do Reset-Interrupt:\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n};\n\n/**\n * Mapper007 (AxROM)\n * @example Battletoads, Time Lord, Marble Madness\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_007\n * @constructor\n */\nMappers[7] = function(nes) {\n  this.nes = nes;\n};\n\nMappers[7].prototype = new Mappers[0]();\n\nMappers[7].prototype.write = function(address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n  } else {\n    this.load32kRomBank(value & 0x7, 0x8000);\n    if (value & 0x10) {\n      this.nes.ppu.setMirroring(this.nes.rom.SINGLESCREEN_MIRRORING2);\n    } else {\n      this.nes.ppu.setMirroring(this.nes.rom.SINGLESCREEN_MIRRORING);\n    }\n  }\n};\n\nMappers[7].prototype.loadROM = function() {\n  if (!this.nes.rom.valid) {\n    throw new Error(\"AOROM: Invalid ROM! Unable to load.\");\n  }\n\n  // Load PRG-ROM:\n  this.loadPRGROM();\n\n  // Load CHR-ROM:\n  this.loadCHRROM();\n\n  // Do Reset-Interrupt:\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n};\n\n/**\n * Mapper 011 (Color Dreams)\n *\n * @description http://wiki.nesdev.com/w/index.php/Color_Dreams\n * @example Crystal Mines, Metal Fighter\n * @constructor\n */\nMappers[11] = function(nes) {\n  this.nes = nes;\n};\n\nMappers[11].prototype = new Mappers[0]();\n\nMappers[11].prototype.write = function(address, value) {\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    // Swap in the given PRG-ROM bank:\n    var prgbank1 = ((value & 0xf) * 2) % this.nes.rom.romCount;\n    var prgbank2 = ((value & 0xf) * 2 + 1) % this.nes.rom.romCount;\n\n    this.loadRomBank(prgbank1, 0x8000);\n    this.loadRomBank(prgbank2, 0xc000);\n\n    if (this.nes.rom.vromCount > 0) {\n      // Swap in the given VROM bank at 0x0000:\n      var bank = ((value >> 4) * 2) % this.nes.rom.vromCount;\n      this.loadVromBank(bank, 0x0000);\n      this.loadVromBank(bank + 1, 0x1000);\n    }\n  }\n};\n\n/**\n * Mapper 034 (BNROM, NINA-01)\n *\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_034\n * @example Darkseed, Mashou, Mission Impossible 2\n * @constructor\n */\nMappers[34] = function(nes) {\n  this.nes = nes;\n};\n\nMappers[34].prototype = new Mappers[0]();\n\nMappers[34].prototype.write = function(address, value) {\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    this.load32kRomBank(value, 0x8000);\n  }\n};\n\n/**\n * Mapper 038\n *\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_038\n * @example Crime Busters\n * @constructor\n */\nMappers[38] = function(nes) {\n  this.nes = nes;\n};\n\nMappers[38].prototype = new Mappers[0]();\n\nMappers[38].prototype.write = function(address, value) {\n  if (address < 0x7000 || address > 0x7fff) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    // Swap in the given PRG-ROM bank at 0x8000:\n    this.load32kRomBank(value & 3, 0x8000);\n\n    // Swap in the given VROM bank at 0x0000:\n    this.load8kVromBank(((value >> 2) & 3) * 2, 0x0000);\n  }\n};\n\n/**\n * Mapper 066 (GxROM)\n *\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_066\n * @example Doraemon, Dragon Power, Gumshoe, Thunder & Lightning,\n * Super Mario Bros. + Duck Hunt\n * @constructor\n */\nMappers[66] = function(nes) {\n  this.nes = nes;\n};\n\nMappers[66].prototype = new Mappers[0]();\n\nMappers[66].prototype.write = function(address, value) {\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    // Swap in the given PRG-ROM bank at 0x8000:\n    this.load32kRomBank((value >> 4) & 3, 0x8000);\n\n    // Swap in the given VROM bank at 0x0000:\n    this.load8kVromBank((value & 3) * 2, 0x0000);\n  }\n};\n\n/**\n * Mapper 094 (UN1ROM)\n *\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_094\n * @example Senjou no Ookami\n * @constructor\n */\nMappers[94] = function(nes) {\n  this.nes = nes;\n};\n\nMappers[94].prototype = new Mappers[0]();\n\nMappers[94].prototype.write = function(address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    // This is a ROM bank select command.\n    // Swap in the given ROM bank at 0x8000:\n    this.loadRomBank(value >> 2, 0x8000);\n  }\n};\n\nMappers[94].prototype.loadROM = function() {\n  if (!this.nes.rom.valid) {\n    throw new Error(\"UN1ROM: Invalid ROM! Unable to load.\");\n  }\n\n  // Load PRG-ROM:\n  this.loadRomBank(0, 0x8000);\n  this.loadRomBank(this.nes.rom.romCount - 1, 0xc000);\n\n  // Load CHR-ROM:\n  this.loadCHRROM();\n\n  // Do Reset-Interrupt:\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n};\n\n/**\n * Mapper 140\n *\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_140\n * @example Bio Senshi Dan - Increaser Tono Tatakai\n * @constructor\n */\nMappers[140] = function(nes) {\n  this.nes = nes;\n};\n\nMappers[140].prototype = new Mappers[0]();\n\nMappers[140].prototype.write = function(address, value) {\n  if (address < 0x6000 || address > 0x7fff) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    // Swap in the given PRG-ROM bank at 0x8000:\n    this.load32kRomBank((value >> 4) & 3, 0x8000);\n\n    // Swap in the given VROM bank at 0x0000:\n    this.load8kVromBank((value & 0xf) * 2, 0x0000);\n  }\n};\n\n/**\n * Mapper 180\n *\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_180\n * @example Crazy Climber\n * @constructor\n */\nMappers[180] = function(nes) {\n  this.nes = nes;\n};\n\nMappers[180].prototype = new Mappers[0]();\n\nMappers[180].prototype.write = function(address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    // This is a ROM bank select command.\n    // Swap in the given ROM bank at 0xc000:\n    this.loadRomBank(value, 0xc000);\n  }\n};\n\nMappers[180].prototype.loadROM = function() {\n  if (!this.nes.rom.valid) {\n    throw new Error(\"Mapper 180: Invalid ROM! Unable to load.\");\n  }\n\n  // Load PRG-ROM:\n  this.loadRomBank(0, 0x8000);\n  this.loadRomBank(this.nes.rom.romCount - 1, 0xc000);\n\n  // Load CHR-ROM:\n  this.loadCHRROM();\n\n  // Do Reset-Interrupt:\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n};\n\nmodule.exports = Mappers;\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// jsnes.min.js","module.exports = {\n  copyArrayElements: function(src, srcPos, dest, destPos, length) {\n    for (var i = 0; i < length; ++i) {\n      dest[destPos + i] = src[srcPos + i];\n    }\n  },\n\n  copyArray: function(src) {\n    return src.slice(0);\n  },\n\n  fromJSON: function(obj, state) {\n    for (var i = 0; i < obj.JSON_PROPERTIES.length; i++) {\n      var key = obj.JSON_PROPERTIES[i];\n      if (obj[key] !== null && obj[key].buffer && obj[key].set)\n        obj[key].set(state[key]); // set array elements\n      else\n        obj[key] = state[key]; // replace\n    }\n  },\n\n  toJSON: function(obj) {\n    var state = {};\n    for (var i = 0; i < obj.JSON_PROPERTIES.length; i++) {\n      var key = obj.JSON_PROPERTIES[i];\n      state[key] = obj[key];\n    }\n    return state;\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/utils.js\n// module id = 0\n// module chunks = 0 1","var Controller = function() {\n  this.state = new Array(8);\n  for (var i = 0; i < this.state.length; i++) {\n    this.state[i] = 0x40;\n  }\n};\n\nController.BUTTON_A = 0;\nController.BUTTON_B = 1;\nController.BUTTON_SELECT = 2;\nController.BUTTON_START = 3;\nController.BUTTON_UP = 4;\nController.BUTTON_DOWN = 5;\nController.BUTTON_LEFT = 6;\nController.BUTTON_RIGHT = 7;\n\nController.prototype = {\n  buttonDown: function(key) {\n    this.state[key] = 0x41;\n  },\n\n  buttonUp: function(key) {\n    this.state[key] = 0x40;\n  }\n};\n\nmodule.exports = Controller;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controller.js\n// module id = 1\n// module chunks = 0 1","var Tile = function() {\n  // Tile data:\n  this.pix = new Uint8Array(64);\n\n  this.fbIndex = null;\n  this.tIndex = null;\n  this.x = null;\n  this.y = null;\n  this.w = null;\n  this.h = null;\n  this.incX = null;\n  this.incY = null;\n  this.palIndex = null;\n  this.tpri = null;\n  this.c = null;\n  this.initialized = false;\n  this.opaque = new Array(8);\n};\n\nTile.prototype = {\n  setBuffer: function(scanline) {\n    for (this.y = 0; this.y < 8; this.y++) {\n      this.setScanline(this.y, scanline[this.y], scanline[this.y + 8]);\n    }\n  },\n\n  setScanline: function(sline, b1, b2) {\n    this.initialized = true;\n    this.tIndex = sline << 3;\n    for (this.x = 0; this.x < 8; this.x++) {\n      this.pix[this.tIndex + this.x] =\n        ((b1 >> (7 - this.x)) & 1) + (((b2 >> (7 - this.x)) & 1) << 1);\n      if (this.pix[this.tIndex + this.x] === 0) {\n        this.opaque[sline] = false;\n      }\n    }\n  },\n\n  render: function(\n    buffer,\n    srcx1,\n    srcy1,\n    srcx2,\n    srcy2,\n    dx,\n    dy,\n    palAdd,\n    palette,\n    flipHorizontal,\n    flipVertical,\n    pri,\n    priTable\n  ) {\n    if (dx < -7 || dx >= 256 || dy < -7 || dy >= 240) {\n      return;\n    }\n\n    this.w = srcx2 - srcx1;\n    this.h = srcy2 - srcy1;\n\n    if (dx < 0) {\n      srcx1 -= dx;\n    }\n    if (dx + srcx2 >= 256) {\n      srcx2 = 256 - dx;\n    }\n\n    if (dy < 0) {\n      srcy1 -= dy;\n    }\n    if (dy + srcy2 >= 240) {\n      srcy2 = 240 - dy;\n    }\n\n    if (!flipHorizontal && !flipVertical) {\n      this.fbIndex = (dy << 8) + dx;\n      this.tIndex = 0;\n      for (this.y = 0; this.y < 8; this.y++) {\n        for (this.x = 0; this.x < 8; this.x++) {\n          if (\n            this.x >= srcx1 &&\n            this.x < srcx2 &&\n            this.y >= srcy1 &&\n            this.y < srcy2\n          ) {\n            this.palIndex = this.pix[this.tIndex];\n            this.tpri = priTable[this.fbIndex];\n            if (this.palIndex !== 0 && pri <= (this.tpri & 0xff)) {\n              //console.log(\"Rendering upright tile to buffer\");\n              buffer[this.fbIndex] = palette[this.palIndex + palAdd];\n              this.tpri = (this.tpri & 0xf00) | pri;\n              priTable[this.fbIndex] = this.tpri;\n            }\n          }\n          this.fbIndex++;\n          this.tIndex++;\n        }\n        this.fbIndex -= 8;\n        this.fbIndex += 256;\n      }\n    } else if (flipHorizontal && !flipVertical) {\n      this.fbIndex = (dy << 8) + dx;\n      this.tIndex = 7;\n      for (this.y = 0; this.y < 8; this.y++) {\n        for (this.x = 0; this.x < 8; this.x++) {\n          if (\n            this.x >= srcx1 &&\n            this.x < srcx2 &&\n            this.y >= srcy1 &&\n            this.y < srcy2\n          ) {\n            this.palIndex = this.pix[this.tIndex];\n            this.tpri = priTable[this.fbIndex];\n            if (this.palIndex !== 0 && pri <= (this.tpri & 0xff)) {\n              buffer[this.fbIndex] = palette[this.palIndex + palAdd];\n              this.tpri = (this.tpri & 0xf00) | pri;\n              priTable[this.fbIndex] = this.tpri;\n            }\n          }\n          this.fbIndex++;\n          this.tIndex--;\n        }\n        this.fbIndex -= 8;\n        this.fbIndex += 256;\n        this.tIndex += 16;\n      }\n    } else if (flipVertical && !flipHorizontal) {\n      this.fbIndex = (dy << 8) + dx;\n      this.tIndex = 56;\n      for (this.y = 0; this.y < 8; this.y++) {\n        for (this.x = 0; this.x < 8; this.x++) {\n          if (\n            this.x >= srcx1 &&\n            this.x < srcx2 &&\n            this.y >= srcy1 &&\n            this.y < srcy2\n          ) {\n            this.palIndex = this.pix[this.tIndex];\n            this.tpri = priTable[this.fbIndex];\n            if (this.palIndex !== 0 && pri <= (this.tpri & 0xff)) {\n              buffer[this.fbIndex] = palette[this.palIndex + palAdd];\n              this.tpri = (this.tpri & 0xf00) | pri;\n              priTable[this.fbIndex] = this.tpri;\n            }\n          }\n          this.fbIndex++;\n          this.tIndex++;\n        }\n        this.fbIndex -= 8;\n        this.fbIndex += 256;\n        this.tIndex -= 16;\n      }\n    } else {\n      this.fbIndex = (dy << 8) + dx;\n      this.tIndex = 63;\n      for (this.y = 0; this.y < 8; this.y++) {\n        for (this.x = 0; this.x < 8; this.x++) {\n          if (\n            this.x >= srcx1 &&\n            this.x < srcx2 &&\n            this.y >= srcy1 &&\n            this.y < srcy2\n          ) {\n            this.palIndex = this.pix[this.tIndex];\n            this.tpri = priTable[this.fbIndex];\n            if (this.palIndex !== 0 && pri <= (this.tpri & 0xff)) {\n              buffer[this.fbIndex] = palette[this.palIndex + palAdd];\n              this.tpri = (this.tpri & 0xf00) | pri;\n              priTable[this.fbIndex] = this.tpri;\n            }\n          }\n          this.fbIndex++;\n          this.tIndex--;\n        }\n        this.fbIndex -= 8;\n        this.fbIndex += 256;\n      }\n    }\n  },\n\n  isTransparent: function(x, y) {\n    return this.pix[(y << 3) + x] === 0;\n  },\n\n  toJSON: function() {\n    return {\n      opaque: this.opaque,\n      pix: this.pix\n    };\n  },\n\n  fromJSON: function(s) {\n    this.opaque = s.opaque;\n    this.pix = s.pix;\n  }\n};\n\nmodule.exports = Tile;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/tile.js\n// module id = 2\n// module chunks = 0 1","module.exports = {\n  Controller: require(\"./controller\"),\n  NES: require(\"./nes\")\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/index.js\n// module id = 3\n// module chunks = 0 1","var CPU = require(\"./cpu\");\nvar Controller = require(\"./controller\");\nvar PPU = require(\"./ppu\");\nvar PAPU = require(\"./papu\");\nvar ROM = require(\"./rom\");\n\nvar NES = function(opts) {\n  this.opts = {\n    onFrame: function() {},\n    onAudioSample: null,\n    onStatusUpdate: function() {},\n    onBatteryRamWrite: function() {},\n\n    // FIXME: not actually used except for in PAPU\n    preferredFrameRate: 60,\n\n    emulateSound: true,\n    sampleRate: 44100 // Sound sample rate in hz\n  };\n  if (typeof opts !== \"undefined\") {\n    var key;\n    for (key in this.opts) {\n      if (typeof opts[key] !== \"undefined\") {\n        this.opts[key] = opts[key];\n      }\n    }\n  }\n\n  this.frameTime = 1000 / this.opts.preferredFrameRate;\n\n  this.ui = {\n    writeFrame: this.opts.onFrame,\n    updateStatus: this.opts.onStatusUpdate\n  };\n  this.cpu = new CPU(this);\n  this.ppu = new PPU(this);\n  this.papu = new PAPU(this);\n  this.mmap = null; // set in loadROM()\n  this.controllers = {\n    1: new Controller(),\n    2: new Controller()\n  };\n\n  this.ui.updateStatus(\"Ready to load a ROM.\");\n\n  this.frame = this.frame.bind(this);\n  this.buttonDown = this.buttonDown.bind(this);\n  this.buttonUp = this.buttonUp.bind(this);\n  this.zapperMove = this.zapperMove.bind(this);\n  this.zapperFireDown = this.zapperFireDown.bind(this);\n  this.zapperFireUp = this.zapperFireUp.bind(this);\n};\n\nNES.prototype = {\n  fpsFrameCount: 0,\n  romData: null,\n\n  // Resets the system\n  reset: function() {\n    if (this.mmap !== null) {\n      this.mmap.reset();\n    }\n\n    this.cpu.reset();\n    this.ppu.reset();\n    this.papu.reset();\n\n    this.lastFpsTime = null;\n    this.fpsFrameCount = 0;\n  },\n\n  frame: function() {\n    this.ppu.startFrame();\n    var cycles = 0;\n    var emulateSound = this.opts.emulateSound;\n    var cpu = this.cpu;\n    var ppu = this.ppu;\n    var papu = this.papu;\n    FRAMELOOP: for (;;) {\n      if (cpu.cyclesToHalt === 0) {\n        // Execute a CPU instruction\n        cycles = cpu.emulate();\n        if (emulateSound) {\n          papu.clockFrameCounter(cycles);\n        }\n        cycles *= 3;\n      } else {\n        if (cpu.cyclesToHalt > 8) {\n          cycles = 24;\n          if (emulateSound) {\n            papu.clockFrameCounter(8);\n          }\n          cpu.cyclesToHalt -= 8;\n        } else {\n          cycles = cpu.cyclesToHalt * 3;\n          if (emulateSound) {\n            papu.clockFrameCounter(cpu.cyclesToHalt);\n          }\n          cpu.cyclesToHalt = 0;\n        }\n      }\n\n      for (; cycles > 0; cycles--) {\n        if (\n          ppu.curX === ppu.spr0HitX &&\n          ppu.f_spVisibility === 1 &&\n          ppu.scanline - 21 === ppu.spr0HitY\n        ) {\n          // Set sprite 0 hit flag:\n          ppu.setStatusFlag(ppu.STATUS_SPRITE0HIT, true);\n        }\n\n        if (ppu.requestEndFrame) {\n          ppu.nmiCounter--;\n          if (ppu.nmiCounter === 0) {\n            ppu.requestEndFrame = false;\n            ppu.startVBlank();\n            break FRAMELOOP;\n          }\n        }\n\n        ppu.curX++;\n        if (ppu.curX === 341) {\n          ppu.curX = 0;\n          ppu.endScanline();\n        }\n      }\n    }\n    this.fpsFrameCount++;\n  },\n\n  buttonDown: function(controller, button) {\n    this.controllers[controller].buttonDown(button);\n  },\n\n  buttonUp: function(controller, button) {\n    this.controllers[controller].buttonUp(button);\n  },\n\n  zapperMove: function(x, y) {\n    if (!this.mmap) return;\n    this.mmap.zapperX = x;\n    this.mmap.zapperY = y;\n  },\n\n  zapperFireDown: function() {\n    if (!this.mmap) return;\n    this.mmap.zapperFired = true;\n  },\n\n  zapperFireUp: function() {\n    if (!this.mmap) return;\n    this.mmap.zapperFired = false;\n  },\n\n  getFPS: function() {\n    var now = +new Date();\n    var fps = null;\n    if (this.lastFpsTime) {\n      fps = this.fpsFrameCount / ((now - this.lastFpsTime) / 1000);\n    }\n    this.fpsFrameCount = 0;\n    this.lastFpsTime = now;\n    return fps;\n  },\n\n  reloadROM: function() {\n    if (this.romData !== null) {\n      this.loadROM(this.romData);\n    }\n  },\n\n  // Loads a ROM file into the CPU and PPU.\n  // The ROM file is validated first.\n  loadROM: function(data) {\n    // Load ROM file:\n    this.rom = new ROM(this);\n    this.rom.load(data);\n\n    this.reset();\n    this.mmap = this.rom.createMapper();\n    this.mmap.loadROM();\n    this.ppu.setMirroring(this.rom.getMirroringType());\n    this.romData = data;\n  },\n\n  setFramerate: function(rate) {\n    this.opts.preferredFrameRate = rate;\n    this.frameTime = 1000 / rate;\n    this.papu.setSampleRate(this.opts.sampleRate, false);\n  },\n\n  toJSON: function() {\n    return {\n      romData: this.romData,\n      cpu: this.cpu.toJSON(),\n      mmap: this.mmap.toJSON(),\n      ppu: this.ppu.toJSON()\n    };\n  },\n\n  fromJSON: function(s) {\n    this.loadROM(s.romData);\n    this.cpu.fromJSON(s.cpu);\n    this.mmap.fromJSON(s.mmap);\n    this.ppu.fromJSON(s.ppu);\n  }\n};\n\nmodule.exports = NES;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/nes.js\n// module id = 4\n// module chunks = 0 1","var utils = require(\"./utils\");\n\nvar CPU = function(nes) {\n  this.nes = nes;\n\n  // Keep Chrome happy\n  this.mem = null;\n  this.REG_ACC = null;\n  this.REG_X = null;\n  this.REG_Y = null;\n  this.REG_SP = null;\n  this.REG_PC = null;\n  this.REG_PC_NEW = null;\n  this.REG_STATUS = null;\n  this.F_CARRY = null;\n  this.F_DECIMAL = null;\n  this.F_INTERRUPT = null;\n  this.F_INTERRUPT_NEW = null;\n  this.F_OVERFLOW = null;\n  this.F_SIGN = null;\n  this.F_ZERO = null;\n  this.F_NOTUSED = null;\n  this.F_NOTUSED_NEW = null;\n  this.F_BRK = null;\n  this.F_BRK_NEW = null;\n  this.opdata = null;\n  this.cyclesToHalt = null;\n  this.crash = null;\n  this.irqRequested = null;\n  this.irqType = null;\n\n  this.reset();\n};\n\nCPU.prototype = {\n  // IRQ Types\n  IRQ_NORMAL: 0,\n  IRQ_NMI: 1,\n  IRQ_RESET: 2,\n\n  reset: function() {\n    // Main memory\n    this.mem = new Uint8Array(0x10000);\n\n    for (var i = 0; i < 0x2000; i++) {\n      this.mem[i] = 0xff;\n    }\n    for (var p = 0; p < 4; p++) {\n      var j = p * 0x800;\n      this.mem[j + 0x008] = 0xf7;\n      this.mem[j + 0x009] = 0xef;\n      this.mem[j + 0x00a] = 0xdf;\n      this.mem[j + 0x00f] = 0xbf;\n    }\n    for (var k = 0x2001; k < this.mem.length; k++) {\n      this.mem[k] = 0;\n    }\n\n    // CPU Registers:\n    this.REG_ACC = 0;\n    this.REG_X = 0;\n    this.REG_Y = 0;\n    // Reset Stack pointer:\n    this.REG_SP = 0x01ff;\n    // Reset Program counter:\n    this.REG_PC = 0x8000 - 1;\n    this.REG_PC_NEW = 0x8000 - 1;\n    // Reset Status register:\n    this.REG_STATUS = 0x28;\n\n    this.setStatus(0x28);\n\n    // Set flags:\n    this.F_CARRY = 0;\n    this.F_DECIMAL = 0;\n    this.F_INTERRUPT = 1;\n    this.F_INTERRUPT_NEW = 1;\n    this.F_OVERFLOW = 0;\n    this.F_SIGN = 0;\n    this.F_ZERO = 1;\n\n    this.F_NOTUSED = 1;\n    this.F_NOTUSED_NEW = 1;\n    this.F_BRK = 1;\n    this.F_BRK_NEW = 1;\n\n    this.opdata = new OpData().opdata;\n    this.cyclesToHalt = 0;\n\n    // Reset crash flag:\n    this.crash = false;\n\n    // Interrupt notification:\n    this.irqRequested = false;\n    this.irqType = null;\n  },\n\n  // Emulates a single CPU instruction, returns the number of cycles\n  emulate: function() {\n    var temp;\n    var add;\n\n    // Check interrupts:\n    if (this.irqRequested) {\n      temp =\n        this.F_CARRY |\n        ((this.F_ZERO === 0 ? 1 : 0) << 1) |\n        (this.F_INTERRUPT << 2) |\n        (this.F_DECIMAL << 3) |\n        (this.F_BRK << 4) |\n        (this.F_NOTUSED << 5) |\n        (this.F_OVERFLOW << 6) |\n        (this.F_SIGN << 7);\n\n      this.REG_PC_NEW = this.REG_PC;\n      this.F_INTERRUPT_NEW = this.F_INTERRUPT;\n      switch (this.irqType) {\n        case 0: {\n          // Normal IRQ:\n          if (this.F_INTERRUPT !== 0) {\n            // console.log(\"Interrupt was masked.\");\n            break;\n          }\n          this.doIrq(temp);\n          // console.log(\"Did normal IRQ. I=\"+this.F_INTERRUPT);\n          break;\n        }\n        case 1: {\n          // NMI:\n          this.doNonMaskableInterrupt(temp);\n          break;\n        }\n        case 2: {\n          // Reset:\n          this.doResetInterrupt();\n          break;\n        }\n      }\n\n      this.REG_PC = this.REG_PC_NEW;\n      this.F_INTERRUPT = this.F_INTERRUPT_NEW;\n      this.F_BRK = this.F_BRK_NEW;\n      this.irqRequested = false;\n    }\n\n    var opinf = this.opdata[this.nes.mmap.load(this.REG_PC + 1)];\n    var cycleCount = opinf >> 24;\n    var cycleAdd = 0;\n\n    // Find address mode:\n    var addrMode = (opinf >> 8) & 0xff;\n\n    // Increment PC by number of op bytes:\n    var opaddr = this.REG_PC;\n    this.REG_PC += (opinf >> 16) & 0xff;\n\n    var addr = 0;\n    switch (addrMode) {\n      case 0: {\n        // Zero Page mode. Use the address given after the opcode,\n        // but without high byte.\n        addr = this.load(opaddr + 2);\n        break;\n      }\n      case 1: {\n        // Relative mode.\n        addr = this.load(opaddr + 2);\n        if (addr < 0x80) {\n          addr += this.REG_PC;\n        } else {\n          addr += this.REG_PC - 256;\n        }\n        break;\n      }\n      case 2: {\n        // Ignore. Address is implied in instruction.\n        break;\n      }\n      case 3: {\n        // Absolute mode. Use the two bytes following the opcode as\n        // an address.\n        addr = this.load16bit(opaddr + 2);\n        break;\n      }\n      case 4: {\n        // Accumulator mode. The address is in the accumulator\n        // register.\n        addr = this.REG_ACC;\n        break;\n      }\n      case 5: {\n        // Immediate mode. The value is given after the opcode.\n        addr = this.REG_PC;\n        break;\n      }\n      case 6: {\n        // Zero Page Indexed mode, X as index. Use the address given\n        // after the opcode, then add the\n        // X register to it to get the final address.\n        addr = (this.load(opaddr + 2) + this.REG_X) & 0xff;\n        break;\n      }\n      case 7: {\n        // Zero Page Indexed mode, Y as index. Use the address given\n        // after the opcode, then add the\n        // Y register to it to get the final address.\n        addr = (this.load(opaddr + 2) + this.REG_Y) & 0xff;\n        break;\n      }\n      case 8: {\n        // Absolute Indexed Mode, X as index. Same as zero page\n        // indexed, but with the high byte.\n        addr = this.load16bit(opaddr + 2);\n        if ((addr & 0xff00) !== ((addr + this.REG_X) & 0xff00)) {\n          cycleAdd = 1;\n        }\n        addr += this.REG_X;\n        break;\n      }\n      case 9: {\n        // Absolute Indexed Mode, Y as index. Same as zero page\n        // indexed, but with the high byte.\n        addr = this.load16bit(opaddr + 2);\n        if ((addr & 0xff00) !== ((addr + this.REG_Y) & 0xff00)) {\n          cycleAdd = 1;\n        }\n        addr += this.REG_Y;\n        break;\n      }\n      case 10: {\n        // Pre-indexed Indirect mode. Find the 16-bit address\n        // starting at the given location plus\n        // the current X register. The value is the contents of that\n        // address.\n        addr = this.load(opaddr + 2);\n        if ((addr & 0xff00) !== ((addr + this.REG_X) & 0xff00)) {\n          cycleAdd = 1;\n        }\n        addr += this.REG_X;\n        addr &= 0xff;\n        addr = this.load16bit(addr);\n        break;\n      }\n      case 11: {\n        // Post-indexed Indirect mode. Find the 16-bit address\n        // contained in the given location\n        // (and the one following). Add to that address the contents\n        // of the Y register. Fetch the value\n        // stored at that adress.\n        addr = this.load16bit(this.load(opaddr + 2));\n        if ((addr & 0xff00) !== ((addr + this.REG_Y) & 0xff00)) {\n          cycleAdd = 1;\n        }\n        addr += this.REG_Y;\n        break;\n      }\n      case 12: {\n        // Indirect Absolute mode. Find the 16-bit address contained\n        // at the given location.\n        addr = this.load16bit(opaddr + 2); // Find op\n        if (addr < 0x1fff) {\n          addr =\n            this.mem[addr] +\n            (this.mem[(addr & 0xff00) | (((addr & 0xff) + 1) & 0xff)] << 8); // Read from address given in op\n        } else {\n          addr =\n            this.nes.mmap.load(addr) +\n            (this.nes.mmap.load(\n              (addr & 0xff00) | (((addr & 0xff) + 1) & 0xff)\n            ) <<\n              8);\n        }\n        break;\n      }\n    }\n    // Wrap around for addresses above 0xFFFF:\n    addr &= 0xffff;\n\n    // ----------------------------------------------------------------------------------------------------\n    // Decode & execute instruction:\n    // ----------------------------------------------------------------------------------------------------\n\n    // This should be compiled to a jump table.\n    switch (opinf & 0xff) {\n      case 0: {\n        // *******\n        // * ADC *\n        // *******\n\n        // Add with carry.\n        temp = this.REG_ACC + this.load(addr) + this.F_CARRY;\n\n        if (\n          ((this.REG_ACC ^ this.load(addr)) & 0x80) === 0 &&\n          ((this.REG_ACC ^ temp) & 0x80) !== 0\n        ) {\n          this.F_OVERFLOW = 1;\n        } else {\n          this.F_OVERFLOW = 0;\n        }\n        this.F_CARRY = temp > 255 ? 1 : 0;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp & 0xff;\n        this.REG_ACC = temp & 255;\n        cycleCount += cycleAdd;\n        break;\n      }\n      case 1: {\n        // *******\n        // * AND *\n        // *******\n\n        // AND memory with accumulator.\n        this.REG_ACC = this.REG_ACC & this.load(addr);\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        this.F_ZERO = this.REG_ACC;\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n        break;\n      }\n      case 2: {\n        // *******\n        // * ASL *\n        // *******\n\n        // Shift left one bit\n        if (addrMode === 4) {\n          // ADDR_ACC = 4\n\n          this.F_CARRY = (this.REG_ACC >> 7) & 1;\n          this.REG_ACC = (this.REG_ACC << 1) & 255;\n          this.F_SIGN = (this.REG_ACC >> 7) & 1;\n          this.F_ZERO = this.REG_ACC;\n        } else {\n          temp = this.load(addr);\n          this.F_CARRY = (temp >> 7) & 1;\n          temp = (temp << 1) & 255;\n          this.F_SIGN = (temp >> 7) & 1;\n          this.F_ZERO = temp;\n          this.write(addr, temp);\n        }\n        break;\n      }\n      case 3: {\n        // *******\n        // * BCC *\n        // *******\n\n        // Branch on carry clear\n        if (this.F_CARRY === 0) {\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\n          this.REG_PC = addr;\n        }\n        break;\n      }\n      case 4: {\n        // *******\n        // * BCS *\n        // *******\n\n        // Branch on carry set\n        if (this.F_CARRY === 1) {\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\n          this.REG_PC = addr;\n        }\n        break;\n      }\n      case 5: {\n        // *******\n        // * BEQ *\n        // *******\n\n        // Branch on zero\n        if (this.F_ZERO === 0) {\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\n          this.REG_PC = addr;\n        }\n        break;\n      }\n      case 6: {\n        // *******\n        // * BIT *\n        // *******\n\n        temp = this.load(addr);\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_OVERFLOW = (temp >> 6) & 1;\n        temp &= this.REG_ACC;\n        this.F_ZERO = temp;\n        break;\n      }\n      case 7: {\n        // *******\n        // * BMI *\n        // *******\n\n        // Branch on negative result\n        if (this.F_SIGN === 1) {\n          cycleCount++;\n          this.REG_PC = addr;\n        }\n        break;\n      }\n      case 8: {\n        // *******\n        // * BNE *\n        // *******\n\n        // Branch on not zero\n        if (this.F_ZERO !== 0) {\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\n          this.REG_PC = addr;\n        }\n        break;\n      }\n      case 9: {\n        // *******\n        // * BPL *\n        // *******\n\n        // Branch on positive result\n        if (this.F_SIGN === 0) {\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\n          this.REG_PC = addr;\n        }\n        break;\n      }\n      case 10: {\n        // *******\n        // * BRK *\n        // *******\n\n        this.REG_PC += 2;\n        this.push((this.REG_PC >> 8) & 255);\n        this.push(this.REG_PC & 255);\n        this.F_BRK = 1;\n\n        this.push(\n          this.F_CARRY |\n            ((this.F_ZERO === 0 ? 1 : 0) << 1) |\n            (this.F_INTERRUPT << 2) |\n            (this.F_DECIMAL << 3) |\n            (this.F_BRK << 4) |\n            (this.F_NOTUSED << 5) |\n            (this.F_OVERFLOW << 6) |\n            (this.F_SIGN << 7)\n        );\n\n        this.F_INTERRUPT = 1;\n        //this.REG_PC = load(0xFFFE) | (load(0xFFFF) << 8);\n        this.REG_PC = this.load16bit(0xfffe);\n        this.REG_PC--;\n        break;\n      }\n      case 11: {\n        // *******\n        // * BVC *\n        // *******\n\n        // Branch on overflow clear\n        if (this.F_OVERFLOW === 0) {\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\n          this.REG_PC = addr;\n        }\n        break;\n      }\n      case 12: {\n        // *******\n        // * BVS *\n        // *******\n\n        // Branch on overflow set\n        if (this.F_OVERFLOW === 1) {\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\n          this.REG_PC = addr;\n        }\n        break;\n      }\n      case 13: {\n        // *******\n        // * CLC *\n        // *******\n\n        // Clear carry flag\n        this.F_CARRY = 0;\n        break;\n      }\n      case 14: {\n        // *******\n        // * CLD *\n        // *******\n\n        // Clear decimal flag\n        this.F_DECIMAL = 0;\n        break;\n      }\n      case 15: {\n        // *******\n        // * CLI *\n        // *******\n\n        // Clear interrupt flag\n        this.F_INTERRUPT = 0;\n        break;\n      }\n      case 16: {\n        // *******\n        // * CLV *\n        // *******\n\n        // Clear overflow flag\n        this.F_OVERFLOW = 0;\n        break;\n      }\n      case 17: {\n        // *******\n        // * CMP *\n        // *******\n\n        // Compare memory and accumulator:\n        temp = this.REG_ACC - this.load(addr);\n        this.F_CARRY = temp >= 0 ? 1 : 0;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp & 0xff;\n        cycleCount += cycleAdd;\n        break;\n      }\n      case 18: {\n        // *******\n        // * CPX *\n        // *******\n\n        // Compare memory and index X:\n        temp = this.REG_X - this.load(addr);\n        this.F_CARRY = temp >= 0 ? 1 : 0;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp & 0xff;\n        break;\n      }\n      case 19: {\n        // *******\n        // * CPY *\n        // *******\n\n        // Compare memory and index Y:\n        temp = this.REG_Y - this.load(addr);\n        this.F_CARRY = temp >= 0 ? 1 : 0;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp & 0xff;\n        break;\n      }\n      case 20: {\n        // *******\n        // * DEC *\n        // *******\n\n        // Decrement memory by one:\n        temp = (this.load(addr) - 1) & 0xff;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp;\n        this.write(addr, temp);\n        break;\n      }\n      case 21: {\n        // *******\n        // * DEX *\n        // *******\n\n        // Decrement index X by one:\n        this.REG_X = (this.REG_X - 1) & 0xff;\n        this.F_SIGN = (this.REG_X >> 7) & 1;\n        this.F_ZERO = this.REG_X;\n        break;\n      }\n      case 22: {\n        // *******\n        // * DEY *\n        // *******\n\n        // Decrement index Y by one:\n        this.REG_Y = (this.REG_Y - 1) & 0xff;\n        this.F_SIGN = (this.REG_Y >> 7) & 1;\n        this.F_ZERO = this.REG_Y;\n        break;\n      }\n      case 23: {\n        // *******\n        // * EOR *\n        // *******\n\n        // XOR Memory with accumulator, store in accumulator:\n        this.REG_ACC = (this.load(addr) ^ this.REG_ACC) & 0xff;\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        this.F_ZERO = this.REG_ACC;\n        cycleCount += cycleAdd;\n        break;\n      }\n      case 24: {\n        // *******\n        // * INC *\n        // *******\n\n        // Increment memory by one:\n        temp = (this.load(addr) + 1) & 0xff;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp;\n        this.write(addr, temp & 0xff);\n        break;\n      }\n      case 25: {\n        // *******\n        // * INX *\n        // *******\n\n        // Increment index X by one:\n        this.REG_X = (this.REG_X + 1) & 0xff;\n        this.F_SIGN = (this.REG_X >> 7) & 1;\n        this.F_ZERO = this.REG_X;\n        break;\n      }\n      case 26: {\n        // *******\n        // * INY *\n        // *******\n\n        // Increment index Y by one:\n        this.REG_Y++;\n        this.REG_Y &= 0xff;\n        this.F_SIGN = (this.REG_Y >> 7) & 1;\n        this.F_ZERO = this.REG_Y;\n        break;\n      }\n      case 27: {\n        // *******\n        // * JMP *\n        // *******\n\n        // Jump to new location:\n        this.REG_PC = addr - 1;\n        break;\n      }\n      case 28: {\n        // *******\n        // * JSR *\n        // *******\n\n        // Jump to new location, saving return address.\n        // Push return address on stack:\n        this.push((this.REG_PC >> 8) & 255);\n        this.push(this.REG_PC & 255);\n        this.REG_PC = addr - 1;\n        break;\n      }\n      case 29: {\n        // *******\n        // * LDA *\n        // *******\n\n        // Load accumulator with memory:\n        this.REG_ACC = this.load(addr);\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        this.F_ZERO = this.REG_ACC;\n        cycleCount += cycleAdd;\n        break;\n      }\n      case 30: {\n        // *******\n        // * LDX *\n        // *******\n\n        // Load index X with memory:\n        this.REG_X = this.load(addr);\n        this.F_SIGN = (this.REG_X >> 7) & 1;\n        this.F_ZERO = this.REG_X;\n        cycleCount += cycleAdd;\n        break;\n      }\n      case 31: {\n        // *******\n        // * LDY *\n        // *******\n\n        // Load index Y with memory:\n        this.REG_Y = this.load(addr);\n        this.F_SIGN = (this.REG_Y >> 7) & 1;\n        this.F_ZERO = this.REG_Y;\n        cycleCount += cycleAdd;\n        break;\n      }\n      case 32: {\n        // *******\n        // * LSR *\n        // *******\n\n        // Shift right one bit:\n        if (addrMode === 4) {\n          // ADDR_ACC\n\n          temp = this.REG_ACC & 0xff;\n          this.F_CARRY = temp & 1;\n          temp >>= 1;\n          this.REG_ACC = temp;\n        } else {\n          temp = this.load(addr) & 0xff;\n          this.F_CARRY = temp & 1;\n          temp >>= 1;\n          this.write(addr, temp);\n        }\n        this.F_SIGN = 0;\n        this.F_ZERO = temp;\n        break;\n      }\n      case 33: {\n        // *******\n        // * NOP *\n        // *******\n\n        // No OPeration.\n        // Ignore.\n        break;\n      }\n      case 34: {\n        // *******\n        // * ORA *\n        // *******\n\n        // OR memory with accumulator, store in accumulator.\n        temp = (this.load(addr) | this.REG_ACC) & 255;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp;\n        this.REG_ACC = temp;\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n        break;\n      }\n      case 35: {\n        // *******\n        // * PHA *\n        // *******\n\n        // Push accumulator on stack\n        this.push(this.REG_ACC);\n        break;\n      }\n      case 36: {\n        // *******\n        // * PHP *\n        // *******\n\n        // Push processor status on stack\n        this.F_BRK = 1;\n        this.push(\n          this.F_CARRY |\n            ((this.F_ZERO === 0 ? 1 : 0) << 1) |\n            (this.F_INTERRUPT << 2) |\n            (this.F_DECIMAL << 3) |\n            (this.F_BRK << 4) |\n            (this.F_NOTUSED << 5) |\n            (this.F_OVERFLOW << 6) |\n            (this.F_SIGN << 7)\n        );\n        break;\n      }\n      case 37: {\n        // *******\n        // * PLA *\n        // *******\n\n        // Pull accumulator from stack\n        this.REG_ACC = this.pull();\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        this.F_ZERO = this.REG_ACC;\n        break;\n      }\n      case 38: {\n        // *******\n        // * PLP *\n        // *******\n\n        // Pull processor status from stack\n        temp = this.pull();\n        this.F_CARRY = temp & 1;\n        this.F_ZERO = ((temp >> 1) & 1) === 1 ? 0 : 1;\n        this.F_INTERRUPT = (temp >> 2) & 1;\n        this.F_DECIMAL = (temp >> 3) & 1;\n        this.F_BRK = (temp >> 4) & 1;\n        this.F_NOTUSED = (temp >> 5) & 1;\n        this.F_OVERFLOW = (temp >> 6) & 1;\n        this.F_SIGN = (temp >> 7) & 1;\n\n        this.F_NOTUSED = 1;\n        break;\n      }\n      case 39: {\n        // *******\n        // * ROL *\n        // *******\n\n        // Rotate one bit left\n        if (addrMode === 4) {\n          // ADDR_ACC = 4\n\n          temp = this.REG_ACC;\n          add = this.F_CARRY;\n          this.F_CARRY = (temp >> 7) & 1;\n          temp = ((temp << 1) & 0xff) + add;\n          this.REG_ACC = temp;\n        } else {\n          temp = this.load(addr);\n          add = this.F_CARRY;\n          this.F_CARRY = (temp >> 7) & 1;\n          temp = ((temp << 1) & 0xff) + add;\n          this.write(addr, temp);\n        }\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp;\n        break;\n      }\n      case 40: {\n        // *******\n        // * ROR *\n        // *******\n\n        // Rotate one bit right\n        if (addrMode === 4) {\n          // ADDR_ACC = 4\n\n          add = this.F_CARRY << 7;\n          this.F_CARRY = this.REG_ACC & 1;\n          temp = (this.REG_ACC >> 1) + add;\n          this.REG_ACC = temp;\n        } else {\n          temp = this.load(addr);\n          add = this.F_CARRY << 7;\n          this.F_CARRY = temp & 1;\n          temp = (temp >> 1) + add;\n          this.write(addr, temp);\n        }\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp;\n        break;\n      }\n      case 41: {\n        // *******\n        // * RTI *\n        // *******\n\n        // Return from interrupt. Pull status and PC from stack.\n\n        temp = this.pull();\n        this.F_CARRY = temp & 1;\n        this.F_ZERO = ((temp >> 1) & 1) === 0 ? 1 : 0;\n        this.F_INTERRUPT = (temp >> 2) & 1;\n        this.F_DECIMAL = (temp >> 3) & 1;\n        this.F_BRK = (temp >> 4) & 1;\n        this.F_NOTUSED = (temp >> 5) & 1;\n        this.F_OVERFLOW = (temp >> 6) & 1;\n        this.F_SIGN = (temp >> 7) & 1;\n\n        this.REG_PC = this.pull();\n        this.REG_PC += this.pull() << 8;\n        if (this.REG_PC === 0xffff) {\n          return;\n        }\n        this.REG_PC--;\n        this.F_NOTUSED = 1;\n        break;\n      }\n      case 42: {\n        // *******\n        // * RTS *\n        // *******\n\n        // Return from subroutine. Pull PC from stack.\n\n        this.REG_PC = this.pull();\n        this.REG_PC += this.pull() << 8;\n\n        if (this.REG_PC === 0xffff) {\n          return; // return from NSF play routine:\n        }\n        break;\n      }\n      case 43: {\n        // *******\n        // * SBC *\n        // *******\n\n        temp = this.REG_ACC - this.load(addr) - (1 - this.F_CARRY);\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp & 0xff;\n        if (\n          ((this.REG_ACC ^ temp) & 0x80) !== 0 &&\n          ((this.REG_ACC ^ this.load(addr)) & 0x80) !== 0\n        ) {\n          this.F_OVERFLOW = 1;\n        } else {\n          this.F_OVERFLOW = 0;\n        }\n        this.F_CARRY = temp < 0 ? 0 : 1;\n        this.REG_ACC = temp & 0xff;\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n        break;\n      }\n      case 44: {\n        // *******\n        // * SEC *\n        // *******\n\n        // Set carry flag\n        this.F_CARRY = 1;\n        break;\n      }\n      case 45: {\n        // *******\n        // * SED *\n        // *******\n\n        // Set decimal mode\n        this.F_DECIMAL = 1;\n        break;\n      }\n      case 46: {\n        // *******\n        // * SEI *\n        // *******\n\n        // Set interrupt disable status\n        this.F_INTERRUPT = 1;\n        break;\n      }\n      case 47: {\n        // *******\n        // * STA *\n        // *******\n\n        // Store accumulator in memory\n        this.write(addr, this.REG_ACC);\n        break;\n      }\n      case 48: {\n        // *******\n        // * STX *\n        // *******\n\n        // Store index X in memory\n        this.write(addr, this.REG_X);\n        break;\n      }\n      case 49: {\n        // *******\n        // * STY *\n        // *******\n\n        // Store index Y in memory:\n        this.write(addr, this.REG_Y);\n        break;\n      }\n      case 50: {\n        // *******\n        // * TAX *\n        // *******\n\n        // Transfer accumulator to index X:\n        this.REG_X = this.REG_ACC;\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        this.F_ZERO = this.REG_ACC;\n        break;\n      }\n      case 51: {\n        // *******\n        // * TAY *\n        // *******\n\n        // Transfer accumulator to index Y:\n        this.REG_Y = this.REG_ACC;\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        this.F_ZERO = this.REG_ACC;\n        break;\n      }\n      case 52: {\n        // *******\n        // * TSX *\n        // *******\n\n        // Transfer stack pointer to index X:\n        this.REG_X = this.REG_SP - 0x0100;\n        this.F_SIGN = (this.REG_SP >> 7) & 1;\n        this.F_ZERO = this.REG_X;\n        break;\n      }\n      case 53: {\n        // *******\n        // * TXA *\n        // *******\n\n        // Transfer index X to accumulator:\n        this.REG_ACC = this.REG_X;\n        this.F_SIGN = (this.REG_X >> 7) & 1;\n        this.F_ZERO = this.REG_X;\n        break;\n      }\n      case 54: {\n        // *******\n        // * TXS *\n        // *******\n\n        // Transfer index X to stack pointer:\n        this.REG_SP = this.REG_X + 0x0100;\n        this.stackWrap();\n        break;\n      }\n      case 55: {\n        // *******\n        // * TYA *\n        // *******\n\n        // Transfer index Y to accumulator:\n        this.REG_ACC = this.REG_Y;\n        this.F_SIGN = (this.REG_Y >> 7) & 1;\n        this.F_ZERO = this.REG_Y;\n        break;\n      }\n      case 56: {\n        // *******\n        // * ALR *\n        // *******\n\n        // Shift right one bit after ANDing:\n        temp = this.REG_ACC & this.load(addr);\n        this.F_CARRY = temp & 1;\n        this.REG_ACC = this.F_ZERO = temp >> 1;\n        this.F_SIGN = 0;\n        break;\n      }\n      case 57: {\n        // *******\n        // * ANC *\n        // *******\n\n        // AND accumulator, setting carry to bit 7 result.\n        this.REG_ACC = this.F_ZERO = this.REG_ACC & this.load(addr);\n        this.F_CARRY = this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        break;\n      }\n      case 58: {\n        // *******\n        // * ARR *\n        // *******\n\n        // Rotate right one bit after ANDing:\n        temp = this.REG_ACC & this.load(addr);\n        this.REG_ACC = this.F_ZERO = (temp >> 1) + (this.F_CARRY << 7);\n        this.F_SIGN = this.F_CARRY;\n        this.F_CARRY = (temp >> 7) & 1;\n        this.F_OVERFLOW = ((temp >> 7) ^ (temp >> 6)) & 1;\n        break;\n      }\n      case 59: {\n        // *******\n        // * AXS *\n        // *******\n\n        // Set X to (X AND A) - value.\n        temp = (this.REG_X & this.REG_ACC) - this.load(addr);\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp & 0xff;\n        if (\n          ((this.REG_X ^ temp) & 0x80) !== 0 &&\n          ((this.REG_X ^ this.load(addr)) & 0x80) !== 0\n        ) {\n          this.F_OVERFLOW = 1;\n        } else {\n          this.F_OVERFLOW = 0;\n        }\n        this.F_CARRY = temp < 0 ? 0 : 1;\n        this.REG_X = temp & 0xff;\n        break;\n      }\n      case 60: {\n        // *******\n        // * LAX *\n        // *******\n\n        // Load A and X with memory:\n        this.REG_ACC = this.REG_X = this.F_ZERO = this.load(addr);\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        cycleCount += cycleAdd;\n        break;\n      }\n      case 61: {\n        // *******\n        // * SAX *\n        // *******\n\n        // Store A AND X in memory:\n        this.write(addr, this.REG_ACC & this.REG_X);\n        break;\n      }\n      case 62: {\n        // *******\n        // * DCP *\n        // *******\n\n        // Decrement memory by one:\n        temp = (this.load(addr) - 1) & 0xff;\n        this.write(addr, temp);\n\n        // Then compare with the accumulator:\n        temp = this.REG_ACC - temp;\n        this.F_CARRY = temp >= 0 ? 1 : 0;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp & 0xff;\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n        break;\n      }\n      case 63: {\n        // *******\n        // * ISC *\n        // *******\n\n        // Increment memory by one:\n        temp = (this.load(addr) + 1) & 0xff;\n        this.write(addr, temp);\n\n        // Then subtract from the accumulator:\n        temp = this.REG_ACC - temp - (1 - this.F_CARRY);\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp & 0xff;\n        if (\n          ((this.REG_ACC ^ temp) & 0x80) !== 0 &&\n          ((this.REG_ACC ^ this.load(addr)) & 0x80) !== 0\n        ) {\n          this.F_OVERFLOW = 1;\n        } else {\n          this.F_OVERFLOW = 0;\n        }\n        this.F_CARRY = temp < 0 ? 0 : 1;\n        this.REG_ACC = temp & 0xff;\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n        break;\n      }\n      case 64: {\n        // *******\n        // * RLA *\n        // *******\n\n        // Rotate one bit left\n        temp = this.load(addr);\n        add = this.F_CARRY;\n        this.F_CARRY = (temp >> 7) & 1;\n        temp = ((temp << 1) & 0xff) + add;\n        this.write(addr, temp);\n\n        // Then AND with the accumulator.\n        this.REG_ACC = this.REG_ACC & temp;\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        this.F_ZERO = this.REG_ACC;\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n        break;\n      }\n      case 65: {\n        // *******\n        // * RRA *\n        // *******\n\n        // Rotate one bit right\n        temp = this.load(addr);\n        add = this.F_CARRY << 7;\n        this.F_CARRY = temp & 1;\n        temp = (temp >> 1) + add;\n        this.write(addr, temp);\n\n        // Then add to the accumulator\n        temp = this.REG_ACC + this.load(addr) + this.F_CARRY;\n\n        if (\n          ((this.REG_ACC ^ this.load(addr)) & 0x80) === 0 &&\n          ((this.REG_ACC ^ temp) & 0x80) !== 0\n        ) {\n          this.F_OVERFLOW = 1;\n        } else {\n          this.F_OVERFLOW = 0;\n        }\n        this.F_CARRY = temp > 255 ? 1 : 0;\n        this.F_SIGN = (temp >> 7) & 1;\n        this.F_ZERO = temp & 0xff;\n        this.REG_ACC = temp & 255;\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n        break;\n      }\n      case 66: {\n        // *******\n        // * SLO *\n        // *******\n\n        // Shift one bit left\n        temp = this.load(addr);\n        this.F_CARRY = (temp >> 7) & 1;\n        temp = (temp << 1) & 255;\n        this.write(addr, temp);\n\n        // Then OR with the accumulator.\n        this.REG_ACC = this.REG_ACC | temp;\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        this.F_ZERO = this.REG_ACC;\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n        break;\n      }\n      case 67: {\n        // *******\n        // * SRE *\n        // *******\n\n        // Shift one bit right\n        temp = this.load(addr) & 0xff;\n        this.F_CARRY = temp & 1;\n        temp >>= 1;\n        this.write(addr, temp);\n\n        // Then XOR with the accumulator.\n        this.REG_ACC = this.REG_ACC ^ temp;\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\n        this.F_ZERO = this.REG_ACC;\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n        break;\n      }\n      case 68: {\n        // *******\n        // * SKB *\n        // *******\n\n        // Do nothing\n        break;\n      }\n      case 69: {\n        // *******\n        // * IGN *\n        // *******\n\n        // Do nothing but load.\n        // TODO: Properly implement the double-reads.\n        this.load(addr);\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\n        break;\n      }\n\n      default: {\n        // *******\n        // * ??? *\n        // *******\n\n        this.nes.stop();\n        this.nes.crashMessage =\n          \"Game crashed, invalid opcode at address $\" + opaddr.toString(16);\n        break;\n      }\n    } // end of switch\n\n    return cycleCount;\n  },\n\n  load: function(addr) {\n    if (addr < 0x2000) {\n      return this.mem[addr & 0x7ff];\n    } else {\n      return this.nes.mmap.load(addr);\n    }\n  },\n\n  load16bit: function(addr) {\n    if (addr < 0x1fff) {\n      return this.mem[addr & 0x7ff] | (this.mem[(addr + 1) & 0x7ff] << 8);\n    } else {\n      return this.nes.mmap.load(addr) | (this.nes.mmap.load(addr + 1) << 8);\n    }\n  },\n\n  write: function(addr, val) {\n    if (addr < 0x2000) {\n      this.mem[addr & 0x7ff] = val;\n    } else {\n      this.nes.mmap.write(addr, val);\n    }\n  },\n\n  requestIrq: function(type) {\n    if (this.irqRequested) {\n      if (type === this.IRQ_NORMAL) {\n        return;\n      }\n      // console.log(\"too fast irqs. type=\"+type);\n    }\n    this.irqRequested = true;\n    this.irqType = type;\n  },\n\n  push: function(value) {\n    this.nes.mmap.write(this.REG_SP, value);\n    this.REG_SP--;\n    this.REG_SP = 0x0100 | (this.REG_SP & 0xff);\n  },\n\n  stackWrap: function() {\n    this.REG_SP = 0x0100 | (this.REG_SP & 0xff);\n  },\n\n  pull: function() {\n    this.REG_SP++;\n    this.REG_SP = 0x0100 | (this.REG_SP & 0xff);\n    return this.nes.mmap.load(this.REG_SP);\n  },\n\n  pageCrossed: function(addr1, addr2) {\n    return (addr1 & 0xff00) !== (addr2 & 0xff00);\n  },\n\n  haltCycles: function(cycles) {\n    this.cyclesToHalt += cycles;\n  },\n\n  doNonMaskableInterrupt: function(status) {\n    if ((this.nes.mmap.load(0x2000) & 128) !== 0) {\n      // Check whether VBlank Interrupts are enabled\n\n      this.REG_PC_NEW++;\n      this.push((this.REG_PC_NEW >> 8) & 0xff);\n      this.push(this.REG_PC_NEW & 0xff);\n      //this.F_INTERRUPT_NEW = 1;\n      this.push(status);\n\n      this.REG_PC_NEW =\n        this.nes.mmap.load(0xfffa) | (this.nes.mmap.load(0xfffb) << 8);\n      this.REG_PC_NEW--;\n    }\n  },\n\n  doResetInterrupt: function() {\n    this.REG_PC_NEW =\n      this.nes.mmap.load(0xfffc) | (this.nes.mmap.load(0xfffd) << 8);\n    this.REG_PC_NEW--;\n  },\n\n  doIrq: function(status) {\n    this.REG_PC_NEW++;\n    this.push((this.REG_PC_NEW >> 8) & 0xff);\n    this.push(this.REG_PC_NEW & 0xff);\n    this.push(status);\n    this.F_INTERRUPT_NEW = 1;\n    this.F_BRK_NEW = 0;\n\n    this.REG_PC_NEW =\n      this.nes.mmap.load(0xfffe) | (this.nes.mmap.load(0xffff) << 8);\n    this.REG_PC_NEW--;\n  },\n\n  getStatus: function() {\n    return (\n      this.F_CARRY |\n      (this.F_ZERO << 1) |\n      (this.F_INTERRUPT << 2) |\n      (this.F_DECIMAL << 3) |\n      (this.F_BRK << 4) |\n      (this.F_NOTUSED << 5) |\n      (this.F_OVERFLOW << 6) |\n      (this.F_SIGN << 7)\n    );\n  },\n\n  setStatus: function(st) {\n    this.F_CARRY = st & 1;\n    this.F_ZERO = (st >> 1) & 1;\n    this.F_INTERRUPT = (st >> 2) & 1;\n    this.F_DECIMAL = (st >> 3) & 1;\n    this.F_BRK = (st >> 4) & 1;\n    this.F_NOTUSED = (st >> 5) & 1;\n    this.F_OVERFLOW = (st >> 6) & 1;\n    this.F_SIGN = (st >> 7) & 1;\n  },\n\n  JSON_PROPERTIES: [\n    \"mem\",\n    \"cyclesToHalt\",\n    \"irqRequested\",\n    \"irqType\",\n    // Registers\n    \"REG_ACC\",\n    \"REG_X\",\n    \"REG_Y\",\n    \"REG_SP\",\n    \"REG_PC\",\n    \"REG_PC_NEW\",\n    \"REG_STATUS\",\n    // Status\n    \"F_CARRY\",\n    \"F_DECIMAL\",\n    \"F_INTERRUPT\",\n    \"F_INTERRUPT_NEW\",\n    \"F_OVERFLOW\",\n    \"F_SIGN\",\n    \"F_ZERO\",\n    \"F_NOTUSED\",\n    \"F_NOTUSED_NEW\",\n    \"F_BRK\",\n    \"F_BRK_NEW\"\n  ],\n\n  toJSON: function() {\n    return utils.toJSON(this);\n  },\n\n  fromJSON: function(s) {\n    utils.fromJSON(this, s);\n  }\n};\n\n// Generates and provides an array of details about instructions\nvar OpData = function() {\n  this.opdata = new Array(256);\n\n  // Set all to invalid instruction (to detect crashes):\n  for (var i = 0; i < 256; i++) this.opdata[i] = 0xff;\n\n  // Now fill in all valid opcodes:\n\n  // ADC:\n  this.setOp(this.INS_ADC, 0x69, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_ADC, 0x65, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_ADC, 0x75, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_ADC, 0x6d, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_ADC, 0x7d, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_ADC, 0x79, this.ADDR_ABSY, 3, 4);\n  this.setOp(this.INS_ADC, 0x61, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_ADC, 0x71, this.ADDR_POSTIDXIND, 2, 5);\n\n  // AND:\n  this.setOp(this.INS_AND, 0x29, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_AND, 0x25, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_AND, 0x35, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_AND, 0x2d, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_AND, 0x3d, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_AND, 0x39, this.ADDR_ABSY, 3, 4);\n  this.setOp(this.INS_AND, 0x21, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_AND, 0x31, this.ADDR_POSTIDXIND, 2, 5);\n\n  // ASL:\n  this.setOp(this.INS_ASL, 0x0a, this.ADDR_ACC, 1, 2);\n  this.setOp(this.INS_ASL, 0x06, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_ASL, 0x16, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_ASL, 0x0e, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_ASL, 0x1e, this.ADDR_ABSX, 3, 7);\n\n  // BCC:\n  this.setOp(this.INS_BCC, 0x90, this.ADDR_REL, 2, 2);\n\n  // BCS:\n  this.setOp(this.INS_BCS, 0xb0, this.ADDR_REL, 2, 2);\n\n  // BEQ:\n  this.setOp(this.INS_BEQ, 0xf0, this.ADDR_REL, 2, 2);\n\n  // BIT:\n  this.setOp(this.INS_BIT, 0x24, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_BIT, 0x2c, this.ADDR_ABS, 3, 4);\n\n  // BMI:\n  this.setOp(this.INS_BMI, 0x30, this.ADDR_REL, 2, 2);\n\n  // BNE:\n  this.setOp(this.INS_BNE, 0xd0, this.ADDR_REL, 2, 2);\n\n  // BPL:\n  this.setOp(this.INS_BPL, 0x10, this.ADDR_REL, 2, 2);\n\n  // BRK:\n  this.setOp(this.INS_BRK, 0x00, this.ADDR_IMP, 1, 7);\n\n  // BVC:\n  this.setOp(this.INS_BVC, 0x50, this.ADDR_REL, 2, 2);\n\n  // BVS:\n  this.setOp(this.INS_BVS, 0x70, this.ADDR_REL, 2, 2);\n\n  // CLC:\n  this.setOp(this.INS_CLC, 0x18, this.ADDR_IMP, 1, 2);\n\n  // CLD:\n  this.setOp(this.INS_CLD, 0xd8, this.ADDR_IMP, 1, 2);\n\n  // CLI:\n  this.setOp(this.INS_CLI, 0x58, this.ADDR_IMP, 1, 2);\n\n  // CLV:\n  this.setOp(this.INS_CLV, 0xb8, this.ADDR_IMP, 1, 2);\n\n  // CMP:\n  this.setOp(this.INS_CMP, 0xc9, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_CMP, 0xc5, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_CMP, 0xd5, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_CMP, 0xcd, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_CMP, 0xdd, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_CMP, 0xd9, this.ADDR_ABSY, 3, 4);\n  this.setOp(this.INS_CMP, 0xc1, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_CMP, 0xd1, this.ADDR_POSTIDXIND, 2, 5);\n\n  // CPX:\n  this.setOp(this.INS_CPX, 0xe0, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_CPX, 0xe4, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_CPX, 0xec, this.ADDR_ABS, 3, 4);\n\n  // CPY:\n  this.setOp(this.INS_CPY, 0xc0, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_CPY, 0xc4, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_CPY, 0xcc, this.ADDR_ABS, 3, 4);\n\n  // DEC:\n  this.setOp(this.INS_DEC, 0xc6, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_DEC, 0xd6, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_DEC, 0xce, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_DEC, 0xde, this.ADDR_ABSX, 3, 7);\n\n  // DEX:\n  this.setOp(this.INS_DEX, 0xca, this.ADDR_IMP, 1, 2);\n\n  // DEY:\n  this.setOp(this.INS_DEY, 0x88, this.ADDR_IMP, 1, 2);\n\n  // EOR:\n  this.setOp(this.INS_EOR, 0x49, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_EOR, 0x45, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_EOR, 0x55, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_EOR, 0x4d, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_EOR, 0x5d, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_EOR, 0x59, this.ADDR_ABSY, 3, 4);\n  this.setOp(this.INS_EOR, 0x41, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_EOR, 0x51, this.ADDR_POSTIDXIND, 2, 5);\n\n  // INC:\n  this.setOp(this.INS_INC, 0xe6, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_INC, 0xf6, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_INC, 0xee, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_INC, 0xfe, this.ADDR_ABSX, 3, 7);\n\n  // INX:\n  this.setOp(this.INS_INX, 0xe8, this.ADDR_IMP, 1, 2);\n\n  // INY:\n  this.setOp(this.INS_INY, 0xc8, this.ADDR_IMP, 1, 2);\n\n  // JMP:\n  this.setOp(this.INS_JMP, 0x4c, this.ADDR_ABS, 3, 3);\n  this.setOp(this.INS_JMP, 0x6c, this.ADDR_INDABS, 3, 5);\n\n  // JSR:\n  this.setOp(this.INS_JSR, 0x20, this.ADDR_ABS, 3, 6);\n\n  // LDA:\n  this.setOp(this.INS_LDA, 0xa9, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_LDA, 0xa5, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_LDA, 0xb5, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_LDA, 0xad, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_LDA, 0xbd, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_LDA, 0xb9, this.ADDR_ABSY, 3, 4);\n  this.setOp(this.INS_LDA, 0xa1, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_LDA, 0xb1, this.ADDR_POSTIDXIND, 2, 5);\n\n  // LDX:\n  this.setOp(this.INS_LDX, 0xa2, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_LDX, 0xa6, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_LDX, 0xb6, this.ADDR_ZPY, 2, 4);\n  this.setOp(this.INS_LDX, 0xae, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_LDX, 0xbe, this.ADDR_ABSY, 3, 4);\n\n  // LDY:\n  this.setOp(this.INS_LDY, 0xa0, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_LDY, 0xa4, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_LDY, 0xb4, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_LDY, 0xac, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_LDY, 0xbc, this.ADDR_ABSX, 3, 4);\n\n  // LSR:\n  this.setOp(this.INS_LSR, 0x4a, this.ADDR_ACC, 1, 2);\n  this.setOp(this.INS_LSR, 0x46, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_LSR, 0x56, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_LSR, 0x4e, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_LSR, 0x5e, this.ADDR_ABSX, 3, 7);\n\n  // NOP:\n  this.setOp(this.INS_NOP, 0x1a, this.ADDR_IMP, 1, 2);\n  this.setOp(this.INS_NOP, 0x3a, this.ADDR_IMP, 1, 2);\n  this.setOp(this.INS_NOP, 0x5a, this.ADDR_IMP, 1, 2);\n  this.setOp(this.INS_NOP, 0x7a, this.ADDR_IMP, 1, 2);\n  this.setOp(this.INS_NOP, 0xda, this.ADDR_IMP, 1, 2);\n  this.setOp(this.INS_NOP, 0xea, this.ADDR_IMP, 1, 2);\n  this.setOp(this.INS_NOP, 0xfa, this.ADDR_IMP, 1, 2);\n\n  // ORA:\n  this.setOp(this.INS_ORA, 0x09, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_ORA, 0x05, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_ORA, 0x15, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_ORA, 0x0d, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_ORA, 0x1d, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_ORA, 0x19, this.ADDR_ABSY, 3, 4);\n  this.setOp(this.INS_ORA, 0x01, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_ORA, 0x11, this.ADDR_POSTIDXIND, 2, 5);\n\n  // PHA:\n  this.setOp(this.INS_PHA, 0x48, this.ADDR_IMP, 1, 3);\n\n  // PHP:\n  this.setOp(this.INS_PHP, 0x08, this.ADDR_IMP, 1, 3);\n\n  // PLA:\n  this.setOp(this.INS_PLA, 0x68, this.ADDR_IMP, 1, 4);\n\n  // PLP:\n  this.setOp(this.INS_PLP, 0x28, this.ADDR_IMP, 1, 4);\n\n  // ROL:\n  this.setOp(this.INS_ROL, 0x2a, this.ADDR_ACC, 1, 2);\n  this.setOp(this.INS_ROL, 0x26, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_ROL, 0x36, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_ROL, 0x2e, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_ROL, 0x3e, this.ADDR_ABSX, 3, 7);\n\n  // ROR:\n  this.setOp(this.INS_ROR, 0x6a, this.ADDR_ACC, 1, 2);\n  this.setOp(this.INS_ROR, 0x66, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_ROR, 0x76, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_ROR, 0x6e, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_ROR, 0x7e, this.ADDR_ABSX, 3, 7);\n\n  // RTI:\n  this.setOp(this.INS_RTI, 0x40, this.ADDR_IMP, 1, 6);\n\n  // RTS:\n  this.setOp(this.INS_RTS, 0x60, this.ADDR_IMP, 1, 6);\n\n  // SBC:\n  this.setOp(this.INS_SBC, 0xe9, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_SBC, 0xe5, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_SBC, 0xf5, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_SBC, 0xed, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_SBC, 0xfd, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_SBC, 0xf9, this.ADDR_ABSY, 3, 4);\n  this.setOp(this.INS_SBC, 0xe1, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_SBC, 0xf1, this.ADDR_POSTIDXIND, 2, 5);\n\n  // SEC:\n  this.setOp(this.INS_SEC, 0x38, this.ADDR_IMP, 1, 2);\n\n  // SED:\n  this.setOp(this.INS_SED, 0xf8, this.ADDR_IMP, 1, 2);\n\n  // SEI:\n  this.setOp(this.INS_SEI, 0x78, this.ADDR_IMP, 1, 2);\n\n  // STA:\n  this.setOp(this.INS_STA, 0x85, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_STA, 0x95, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_STA, 0x8d, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_STA, 0x9d, this.ADDR_ABSX, 3, 5);\n  this.setOp(this.INS_STA, 0x99, this.ADDR_ABSY, 3, 5);\n  this.setOp(this.INS_STA, 0x81, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_STA, 0x91, this.ADDR_POSTIDXIND, 2, 6);\n\n  // STX:\n  this.setOp(this.INS_STX, 0x86, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_STX, 0x96, this.ADDR_ZPY, 2, 4);\n  this.setOp(this.INS_STX, 0x8e, this.ADDR_ABS, 3, 4);\n\n  // STY:\n  this.setOp(this.INS_STY, 0x84, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_STY, 0x94, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_STY, 0x8c, this.ADDR_ABS, 3, 4);\n\n  // TAX:\n  this.setOp(this.INS_TAX, 0xaa, this.ADDR_IMP, 1, 2);\n\n  // TAY:\n  this.setOp(this.INS_TAY, 0xa8, this.ADDR_IMP, 1, 2);\n\n  // TSX:\n  this.setOp(this.INS_TSX, 0xba, this.ADDR_IMP, 1, 2);\n\n  // TXA:\n  this.setOp(this.INS_TXA, 0x8a, this.ADDR_IMP, 1, 2);\n\n  // TXS:\n  this.setOp(this.INS_TXS, 0x9a, this.ADDR_IMP, 1, 2);\n\n  // TYA:\n  this.setOp(this.INS_TYA, 0x98, this.ADDR_IMP, 1, 2);\n\n  // ALR:\n  this.setOp(this.INS_ALR, 0x4b, this.ADDR_IMM, 2, 2);\n\n  // ANC:\n  this.setOp(this.INS_ANC, 0x0b, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_ANC, 0x2b, this.ADDR_IMM, 2, 2);\n\n  // ARR:\n  this.setOp(this.INS_ARR, 0x6b, this.ADDR_IMM, 2, 2);\n\n  // AXS:\n  this.setOp(this.INS_AXS, 0xcb, this.ADDR_IMM, 2, 2);\n\n  // LAX:\n  this.setOp(this.INS_LAX, 0xa3, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_LAX, 0xa7, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_LAX, 0xaf, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_LAX, 0xb3, this.ADDR_POSTIDXIND, 2, 5);\n  this.setOp(this.INS_LAX, 0xb7, this.ADDR_ZPY, 2, 4);\n  this.setOp(this.INS_LAX, 0xbf, this.ADDR_ABSY, 3, 4);\n\n  // SAX:\n  this.setOp(this.INS_SAX, 0x83, this.ADDR_PREIDXIND, 2, 6);\n  this.setOp(this.INS_SAX, 0x87, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_SAX, 0x8f, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_SAX, 0x97, this.ADDR_ZPY, 2, 4);\n\n  // DCP:\n  this.setOp(this.INS_DCP, 0xc3, this.ADDR_PREIDXIND, 2, 8);\n  this.setOp(this.INS_DCP, 0xc7, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_DCP, 0xcf, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_DCP, 0xd3, this.ADDR_POSTIDXIND, 2, 8);\n  this.setOp(this.INS_DCP, 0xd7, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_DCP, 0xdb, this.ADDR_ABSY, 3, 7);\n  this.setOp(this.INS_DCP, 0xdf, this.ADDR_ABSX, 3, 7);\n\n  // ISC:\n  this.setOp(this.INS_ISC, 0xe3, this.ADDR_PREIDXIND, 2, 8);\n  this.setOp(this.INS_ISC, 0xe7, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_ISC, 0xef, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_ISC, 0xf3, this.ADDR_POSTIDXIND, 2, 8);\n  this.setOp(this.INS_ISC, 0xf7, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_ISC, 0xfb, this.ADDR_ABSY, 3, 7);\n  this.setOp(this.INS_ISC, 0xff, this.ADDR_ABSX, 3, 7);\n\n  // RLA:\n  this.setOp(this.INS_RLA, 0x23, this.ADDR_PREIDXIND, 2, 8);\n  this.setOp(this.INS_RLA, 0x27, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_RLA, 0x2f, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_RLA, 0x33, this.ADDR_POSTIDXIND, 2, 8);\n  this.setOp(this.INS_RLA, 0x37, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_RLA, 0x3b, this.ADDR_ABSY, 3, 7);\n  this.setOp(this.INS_RLA, 0x3f, this.ADDR_ABSX, 3, 7);\n\n  // RRA:\n  this.setOp(this.INS_RRA, 0x63, this.ADDR_PREIDXIND, 2, 8);\n  this.setOp(this.INS_RRA, 0x67, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_RRA, 0x6f, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_RRA, 0x73, this.ADDR_POSTIDXIND, 2, 8);\n  this.setOp(this.INS_RRA, 0x77, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_RRA, 0x7b, this.ADDR_ABSY, 3, 7);\n  this.setOp(this.INS_RRA, 0x7f, this.ADDR_ABSX, 3, 7);\n\n  // SLO:\n  this.setOp(this.INS_SLO, 0x03, this.ADDR_PREIDXIND, 2, 8);\n  this.setOp(this.INS_SLO, 0x07, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_SLO, 0x0f, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_SLO, 0x13, this.ADDR_POSTIDXIND, 2, 8);\n  this.setOp(this.INS_SLO, 0x17, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_SLO, 0x1b, this.ADDR_ABSY, 3, 7);\n  this.setOp(this.INS_SLO, 0x1f, this.ADDR_ABSX, 3, 7);\n\n  // SRE:\n  this.setOp(this.INS_SRE, 0x43, this.ADDR_PREIDXIND, 2, 8);\n  this.setOp(this.INS_SRE, 0x47, this.ADDR_ZP, 2, 5);\n  this.setOp(this.INS_SRE, 0x4f, this.ADDR_ABS, 3, 6);\n  this.setOp(this.INS_SRE, 0x53, this.ADDR_POSTIDXIND, 2, 8);\n  this.setOp(this.INS_SRE, 0x57, this.ADDR_ZPX, 2, 6);\n  this.setOp(this.INS_SRE, 0x5b, this.ADDR_ABSY, 3, 7);\n  this.setOp(this.INS_SRE, 0x5f, this.ADDR_ABSX, 3, 7);\n\n  // SKB:\n  this.setOp(this.INS_SKB, 0x80, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_SKB, 0x82, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_SKB, 0x89, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_SKB, 0xc2, this.ADDR_IMM, 2, 2);\n  this.setOp(this.INS_SKB, 0xe2, this.ADDR_IMM, 2, 2);\n\n  // SKB:\n  this.setOp(this.INS_IGN, 0x0c, this.ADDR_ABS, 3, 4);\n  this.setOp(this.INS_IGN, 0x1c, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_IGN, 0x3c, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_IGN, 0x5c, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_IGN, 0x7c, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_IGN, 0xdc, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_IGN, 0xfc, this.ADDR_ABSX, 3, 4);\n  this.setOp(this.INS_IGN, 0x04, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_IGN, 0x44, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_IGN, 0x64, this.ADDR_ZP, 2, 3);\n  this.setOp(this.INS_IGN, 0x14, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_IGN, 0x34, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_IGN, 0x54, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_IGN, 0x74, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_IGN, 0xd4, this.ADDR_ZPX, 2, 4);\n  this.setOp(this.INS_IGN, 0xf4, this.ADDR_ZPX, 2, 4);\n\n  // prettier-ignore\n  this.cycTable = new Array(\n    /*0x00*/ 7,6,2,8,3,3,5,5,3,2,2,2,4,4,6,6,\n    /*0x10*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,\n    /*0x20*/ 6,6,2,8,3,3,5,5,4,2,2,2,4,4,6,6,\n    /*0x30*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,\n    /*0x40*/ 6,6,2,8,3,3,5,5,3,2,2,2,3,4,6,6,\n    /*0x50*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,\n    /*0x60*/ 6,6,2,8,3,3,5,5,4,2,2,2,5,4,6,6,\n    /*0x70*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,\n    /*0x80*/ 2,6,2,6,3,3,3,3,2,2,2,2,4,4,4,4,\n    /*0x90*/ 2,6,2,6,4,4,4,4,2,5,2,5,5,5,5,5,\n    /*0xA0*/ 2,6,2,6,3,3,3,3,2,2,2,2,4,4,4,4,\n    /*0xB0*/ 2,5,2,5,4,4,4,4,2,4,2,4,4,4,4,4,\n    /*0xC0*/ 2,6,2,8,3,3,5,5,2,2,2,2,4,4,6,6,\n    /*0xD0*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,\n    /*0xE0*/ 2,6,3,8,3,3,5,5,2,2,2,2,4,4,6,6,\n    /*0xF0*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7\n  );\n\n  this.instname = new Array(70);\n\n  // Instruction Names:\n  this.instname[0] = \"ADC\";\n  this.instname[1] = \"AND\";\n  this.instname[2] = \"ASL\";\n  this.instname[3] = \"BCC\";\n  this.instname[4] = \"BCS\";\n  this.instname[5] = \"BEQ\";\n  this.instname[6] = \"BIT\";\n  this.instname[7] = \"BMI\";\n  this.instname[8] = \"BNE\";\n  this.instname[9] = \"BPL\";\n  this.instname[10] = \"BRK\";\n  this.instname[11] = \"BVC\";\n  this.instname[12] = \"BVS\";\n  this.instname[13] = \"CLC\";\n  this.instname[14] = \"CLD\";\n  this.instname[15] = \"CLI\";\n  this.instname[16] = \"CLV\";\n  this.instname[17] = \"CMP\";\n  this.instname[18] = \"CPX\";\n  this.instname[19] = \"CPY\";\n  this.instname[20] = \"DEC\";\n  this.instname[21] = \"DEX\";\n  this.instname[22] = \"DEY\";\n  this.instname[23] = \"EOR\";\n  this.instname[24] = \"INC\";\n  this.instname[25] = \"INX\";\n  this.instname[26] = \"INY\";\n  this.instname[27] = \"JMP\";\n  this.instname[28] = \"JSR\";\n  this.instname[29] = \"LDA\";\n  this.instname[30] = \"LDX\";\n  this.instname[31] = \"LDY\";\n  this.instname[32] = \"LSR\";\n  this.instname[33] = \"NOP\";\n  this.instname[34] = \"ORA\";\n  this.instname[35] = \"PHA\";\n  this.instname[36] = \"PHP\";\n  this.instname[37] = \"PLA\";\n  this.instname[38] = \"PLP\";\n  this.instname[39] = \"ROL\";\n  this.instname[40] = \"ROR\";\n  this.instname[41] = \"RTI\";\n  this.instname[42] = \"RTS\";\n  this.instname[43] = \"SBC\";\n  this.instname[44] = \"SEC\";\n  this.instname[45] = \"SED\";\n  this.instname[46] = \"SEI\";\n  this.instname[47] = \"STA\";\n  this.instname[48] = \"STX\";\n  this.instname[49] = \"STY\";\n  this.instname[50] = \"TAX\";\n  this.instname[51] = \"TAY\";\n  this.instname[52] = \"TSX\";\n  this.instname[53] = \"TXA\";\n  this.instname[54] = \"TXS\";\n  this.instname[55] = \"TYA\";\n  this.instname[56] = \"ALR\";\n  this.instname[57] = \"ANC\";\n  this.instname[58] = \"ARR\";\n  this.instname[59] = \"AXS\";\n  this.instname[60] = \"LAX\";\n  this.instname[61] = \"SAX\";\n  this.instname[62] = \"DCP\";\n  this.instname[63] = \"ISC\";\n  this.instname[64] = \"RLA\";\n  this.instname[65] = \"RRA\";\n  this.instname[66] = \"SLO\";\n  this.instname[67] = \"SRE\";\n  this.instname[68] = \"SKB\";\n  this.instname[69] = \"IGN\";\n\n  this.addrDesc = new Array(\n    \"Zero Page           \",\n    \"Relative            \",\n    \"Implied             \",\n    \"Absolute            \",\n    \"Accumulator         \",\n    \"Immediate           \",\n    \"Zero Page,X         \",\n    \"Zero Page,Y         \",\n    \"Absolute,X          \",\n    \"Absolute,Y          \",\n    \"Preindexed Indirect \",\n    \"Postindexed Indirect\",\n    \"Indirect Absolute   \"\n  );\n};\n\nOpData.prototype = {\n  INS_ADC: 0,\n  INS_AND: 1,\n  INS_ASL: 2,\n\n  INS_BCC: 3,\n  INS_BCS: 4,\n  INS_BEQ: 5,\n  INS_BIT: 6,\n  INS_BMI: 7,\n  INS_BNE: 8,\n  INS_BPL: 9,\n  INS_BRK: 10,\n  INS_BVC: 11,\n  INS_BVS: 12,\n\n  INS_CLC: 13,\n  INS_CLD: 14,\n  INS_CLI: 15,\n  INS_CLV: 16,\n  INS_CMP: 17,\n  INS_CPX: 18,\n  INS_CPY: 19,\n\n  INS_DEC: 20,\n  INS_DEX: 21,\n  INS_DEY: 22,\n\n  INS_EOR: 23,\n\n  INS_INC: 24,\n  INS_INX: 25,\n  INS_INY: 26,\n\n  INS_JMP: 27,\n  INS_JSR: 28,\n\n  INS_LDA: 29,\n  INS_LDX: 30,\n  INS_LDY: 31,\n  INS_LSR: 32,\n\n  INS_NOP: 33,\n\n  INS_ORA: 34,\n\n  INS_PHA: 35,\n  INS_PHP: 36,\n  INS_PLA: 37,\n  INS_PLP: 38,\n\n  INS_ROL: 39,\n  INS_ROR: 40,\n  INS_RTI: 41,\n  INS_RTS: 42,\n\n  INS_SBC: 43,\n  INS_SEC: 44,\n  INS_SED: 45,\n  INS_SEI: 46,\n  INS_STA: 47,\n  INS_STX: 48,\n  INS_STY: 49,\n\n  INS_TAX: 50,\n  INS_TAY: 51,\n  INS_TSX: 52,\n  INS_TXA: 53,\n  INS_TXS: 54,\n  INS_TYA: 55,\n\n  INS_ALR: 56,\n  INS_ANC: 57,\n  INS_ARR: 58,\n  INS_AXS: 59,\n  INS_LAX: 60,\n  INS_SAX: 61,\n  INS_DCP: 62,\n  INS_ISC: 63,\n  INS_RLA: 64,\n  INS_RRA: 65,\n  INS_SLO: 66,\n  INS_SRE: 67,\n  INS_SKB: 68,\n  INS_IGN: 69,\n\n  INS_DUMMY: 70, // dummy instruction used for 'halting' the processor some cycles\n\n  // -------------------------------- //\n\n  // Addressing modes:\n  ADDR_ZP: 0,\n  ADDR_REL: 1,\n  ADDR_IMP: 2,\n  ADDR_ABS: 3,\n  ADDR_ACC: 4,\n  ADDR_IMM: 5,\n  ADDR_ZPX: 6,\n  ADDR_ZPY: 7,\n  ADDR_ABSX: 8,\n  ADDR_ABSY: 9,\n  ADDR_PREIDXIND: 10,\n  ADDR_POSTIDXIND: 11,\n  ADDR_INDABS: 12,\n\n  setOp: function(inst, op, addr, size, cycles) {\n    this.opdata[op] =\n      (inst & 0xff) |\n      ((addr & 0xff) << 8) |\n      ((size & 0xff) << 16) |\n      ((cycles & 0xff) << 24);\n  }\n};\n\nmodule.exports = CPU;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/cpu.js\n// module id = 5\n// module chunks = 0 1","var Tile = require(\"./tile\");\nvar utils = require(\"./utils\");\n\nvar PPU = function(nes) {\n  this.nes = nes;\n\n  // Keep Chrome happy\n  this.vramMem = null;\n  this.spriteMem = null;\n  this.vramAddress = null;\n  this.vramTmpAddress = null;\n  this.vramBufferedReadValue = null;\n  this.firstWrite = null;\n  this.sramAddress = null;\n  this.currentMirroring = null;\n  this.requestEndFrame = null;\n  this.nmiOk = null;\n  this.dummyCycleToggle = null;\n  this.validTileData = null;\n  this.nmiCounter = null;\n  this.scanlineAlreadyRendered = null;\n  this.f_nmiOnVblank = null;\n  this.f_spriteSize = null;\n  this.f_bgPatternTable = null;\n  this.f_spPatternTable = null;\n  this.f_addrInc = null;\n  this.f_nTblAddress = null;\n  this.f_color = null;\n  this.f_spVisibility = null;\n  this.f_bgVisibility = null;\n  this.f_spClipping = null;\n  this.f_bgClipping = null;\n  this.f_dispType = null;\n  this.cntFV = null;\n  this.cntV = null;\n  this.cntH = null;\n  this.cntVT = null;\n  this.cntHT = null;\n  this.regFV = null;\n  this.regV = null;\n  this.regH = null;\n  this.regVT = null;\n  this.regHT = null;\n  this.regFH = null;\n  this.regS = null;\n  this.curNt = null;\n  this.attrib = null;\n  this.buffer = null;\n  this.bgbuffer = null;\n  this.pixrendered = null;\n\n  this.validTileData = null;\n  this.scantile = null;\n  this.scanline = null;\n  this.lastRenderedScanline = null;\n  this.curX = null;\n  this.sprX = null;\n  this.sprY = null;\n  this.sprTile = null;\n  this.sprCol = null;\n  this.vertFlip = null;\n  this.horiFlip = null;\n  this.bgPriority = null;\n  this.spr0HitX = null;\n  this.spr0HitY = null;\n  this.hitSpr0 = null;\n  this.sprPalette = null;\n  this.imgPalette = null;\n  this.ptTile = null;\n  this.ntable1 = null;\n  this.currentMirroring = null;\n  this.nameTable = null;\n  this.vramMirrorTable = null;\n  this.palTable = null;\n\n  // Rendering Options:\n  this.showSpr0Hit = false;\n  this.clipToTvSize = true;\n\n  this.reset();\n};\n\nPPU.prototype = {\n  // Status flags:\n  STATUS_VRAMWRITE: 4,\n  STATUS_SLSPRITECOUNT: 5,\n  STATUS_SPRITE0HIT: 6,\n  STATUS_VBLANK: 7,\n\n  reset: function() {\n    var i;\n\n    // Memory\n    this.vramMem = new Uint8Array(0x8000);\n    this.spriteMem = new Uint8Array(0x100);\n    for (i = 0; i < this.vramMem.length; i++) {\n      this.vramMem[i] = 0;\n    }\n    for (i = 0; i < this.spriteMem.length; i++) {\n      this.spriteMem[i] = 0;\n    }\n\n    // VRAM I/O:\n    this.vramAddress = null;\n    this.vramTmpAddress = null;\n    this.vramBufferedReadValue = 0;\n    this.firstWrite = true; // VRAM/Scroll Hi/Lo latch\n\n    // SPR-RAM I/O:\n    this.sramAddress = 0; // 8-bit only.\n\n    this.currentMirroring = -1;\n    this.requestEndFrame = false;\n    this.nmiOk = false;\n    this.dummyCycleToggle = false;\n    this.validTileData = false;\n    this.nmiCounter = 0;\n    this.scanlineAlreadyRendered = null;\n\n    // Control Flags Register 1:\n    this.f_nmiOnVblank = 0; // NMI on VBlank. 0=disable, 1=enable\n    this.f_spriteSize = 0; // Sprite size. 0=8x8, 1=8x16\n    this.f_bgPatternTable = 0; // Background Pattern Table address. 0=0x0000,1=0x1000\n    this.f_spPatternTable = 0; // Sprite Pattern Table address. 0=0x0000,1=0x1000\n    this.f_addrInc = 0; // PPU Address Increment. 0=1,1=32\n    this.f_nTblAddress = 0; // Name Table Address. 0=0x2000,1=0x2400,2=0x2800,3=0x2C00\n\n    // Control Flags Register 2:\n    this.f_color = 0; // Background color. 0=black, 1=blue, 2=green, 4=red\n    this.f_spVisibility = 0; // Sprite visibility. 0=not displayed,1=displayed\n    this.f_bgVisibility = 0; // Background visibility. 0=Not Displayed,1=displayed\n    this.f_spClipping = 0; // Sprite clipping. 0=Sprites invisible in left 8-pixel column,1=No clipping\n    this.f_bgClipping = 0; // Background clipping. 0=BG invisible in left 8-pixel column, 1=No clipping\n    this.f_dispType = 0; // Display type. 0=color, 1=monochrome\n\n    // Counters:\n    this.cntFV = 0;\n    this.cntV = 0;\n    this.cntH = 0;\n    this.cntVT = 0;\n    this.cntHT = 0;\n\n    // Registers:\n    this.regFV = 0;\n    this.regV = 0;\n    this.regH = 0;\n    this.regVT = 0;\n    this.regHT = 0;\n    this.regFH = 0;\n    this.regS = 0;\n\n    // These are temporary variables used in rendering and sound procedures.\n    // Their states outside of those procedures can be ignored.\n    // TODO: the use of this is a bit weird, investigate\n    this.curNt = null;\n\n    // Variables used when rendering:\n    this.attrib = new Array(32);\n    this.buffer = new Uint32Array(256 * 240);\n    this.bgbuffer = new Uint32Array(256 * 240);\n    this.pixrendered = new Uint32Array(256 * 240);\n\n    this.validTileData = null;\n\n    this.scantile = new Array(32);\n\n    // Initialize misc vars:\n    this.scanline = 0;\n    this.lastRenderedScanline = -1;\n    this.curX = 0;\n\n    // Sprite data:\n    this.sprX = new Array(64); // X coordinate\n    this.sprY = new Array(64); // Y coordinate\n    this.sprTile = new Array(64); // Tile Index (into pattern table)\n    this.sprCol = new Array(64); // Upper two bits of color\n    this.vertFlip = new Array(64); // Vertical Flip\n    this.horiFlip = new Array(64); // Horizontal Flip\n    this.bgPriority = new Array(64); // Background priority\n    this.spr0HitX = 0; // Sprite #0 hit X coordinate\n    this.spr0HitY = 0; // Sprite #0 hit Y coordinate\n    this.hitSpr0 = false;\n\n    // Palette data:\n    this.sprPalette = new Uint32Array(16);\n    this.imgPalette = new Uint32Array(16);\n\n    // Create pattern table tile buffers:\n    this.ptTile = new Array(512);\n    for (i = 0; i < 512; i++) {\n      this.ptTile[i] = new Tile();\n    }\n\n    // Create nametable buffers:\n    // Name table data:\n    this.ntable1 = new Array(4);\n    this.currentMirroring = -1;\n    this.nameTable = new Array(4);\n    for (i = 0; i < 4; i++) {\n      this.nameTable[i] = new NameTable(32, 32, \"Nt\" + i);\n    }\n\n    // Initialize mirroring lookup table:\n    this.vramMirrorTable = new Uint16Array(0x8000);\n    for (i = 0; i < 0x8000; i++) {\n      this.vramMirrorTable[i] = i;\n    }\n\n    this.palTable = new PaletteTable();\n    this.palTable.loadNTSCPalette();\n    //this.palTable.loadDefaultPalette();\n\n    this.updateControlReg1(0);\n    this.updateControlReg2(0);\n  },\n\n  // Sets Nametable mirroring.\n  setMirroring: function(mirroring) {\n    if (mirroring === this.currentMirroring) {\n      return;\n    }\n\n    this.currentMirroring = mirroring;\n    this.triggerRendering();\n\n    // Remove mirroring:\n    if (this.vramMirrorTable === null) {\n      this.vramMirrorTable = new Uint16Array(0x8000);\n    }\n    for (var i = 0; i < 0x8000; i++) {\n      this.vramMirrorTable[i] = i;\n    }\n\n    // Palette mirroring:\n    this.defineMirrorRegion(0x3f20, 0x3f00, 0x20);\n    this.defineMirrorRegion(0x3f40, 0x3f00, 0x20);\n    this.defineMirrorRegion(0x3f80, 0x3f00, 0x20);\n    this.defineMirrorRegion(0x3fc0, 0x3f00, 0x20);\n\n    // Additional mirroring:\n    this.defineMirrorRegion(0x3000, 0x2000, 0xf00);\n    this.defineMirrorRegion(0x4000, 0x0000, 0x4000);\n\n    if (mirroring === this.nes.rom.HORIZONTAL_MIRRORING) {\n      // Horizontal mirroring.\n\n      this.ntable1[0] = 0;\n      this.ntable1[1] = 0;\n      this.ntable1[2] = 1;\n      this.ntable1[3] = 1;\n\n      this.defineMirrorRegion(0x2400, 0x2000, 0x400);\n      this.defineMirrorRegion(0x2c00, 0x2800, 0x400);\n    } else if (mirroring === this.nes.rom.VERTICAL_MIRRORING) {\n      // Vertical mirroring.\n\n      this.ntable1[0] = 0;\n      this.ntable1[1] = 1;\n      this.ntable1[2] = 0;\n      this.ntable1[3] = 1;\n\n      this.defineMirrorRegion(0x2800, 0x2000, 0x400);\n      this.defineMirrorRegion(0x2c00, 0x2400, 0x400);\n    } else if (mirroring === this.nes.rom.SINGLESCREEN_MIRRORING) {\n      // Single Screen mirroring\n\n      this.ntable1[0] = 0;\n      this.ntable1[1] = 0;\n      this.ntable1[2] = 0;\n      this.ntable1[3] = 0;\n\n      this.defineMirrorRegion(0x2400, 0x2000, 0x400);\n      this.defineMirrorRegion(0x2800, 0x2000, 0x400);\n      this.defineMirrorRegion(0x2c00, 0x2000, 0x400);\n    } else if (mirroring === this.nes.rom.SINGLESCREEN_MIRRORING2) {\n      this.ntable1[0] = 1;\n      this.ntable1[1] = 1;\n      this.ntable1[2] = 1;\n      this.ntable1[3] = 1;\n\n      this.defineMirrorRegion(0x2400, 0x2400, 0x400);\n      this.defineMirrorRegion(0x2800, 0x2400, 0x400);\n      this.defineMirrorRegion(0x2c00, 0x2400, 0x400);\n    } else {\n      // Assume Four-screen mirroring.\n\n      this.ntable1[0] = 0;\n      this.ntable1[1] = 1;\n      this.ntable1[2] = 2;\n      this.ntable1[3] = 3;\n    }\n  },\n\n  // Define a mirrored area in the address lookup table.\n  // Assumes the regions don't overlap.\n  // The 'to' region is the region that is physically in memory.\n  defineMirrorRegion: function(fromStart, toStart, size) {\n    for (var i = 0; i < size; i++) {\n      this.vramMirrorTable[fromStart + i] = toStart + i;\n    }\n  },\n\n  startVBlank: function() {\n    // Do NMI:\n    this.nes.cpu.requestIrq(this.nes.cpu.IRQ_NMI);\n\n    // Make sure everything is rendered:\n    if (this.lastRenderedScanline < 239) {\n      this.renderFramePartially(\n        this.lastRenderedScanline + 1,\n        240 - this.lastRenderedScanline\n      );\n    }\n\n    // End frame:\n    this.endFrame();\n\n    // Reset scanline counter:\n    this.lastRenderedScanline = -1;\n  },\n\n  endScanline: function() {\n    switch (this.scanline) {\n      case 19:\n        // Dummy scanline.\n        // May be variable length:\n        if (this.dummyCycleToggle) {\n          // Remove dead cycle at end of scanline,\n          // for next scanline:\n          this.curX = 1;\n          this.dummyCycleToggle = !this.dummyCycleToggle;\n        }\n        break;\n\n      case 20:\n        // Clear VBlank flag:\n        this.setStatusFlag(this.STATUS_VBLANK, false);\n\n        // Clear Sprite #0 hit flag:\n        this.setStatusFlag(this.STATUS_SPRITE0HIT, false);\n        this.hitSpr0 = false;\n        this.spr0HitX = -1;\n        this.spr0HitY = -1;\n\n        if (this.f_bgVisibility === 1 || this.f_spVisibility === 1) {\n          // Update counters:\n          this.cntFV = this.regFV;\n          this.cntV = this.regV;\n          this.cntH = this.regH;\n          this.cntVT = this.regVT;\n          this.cntHT = this.regHT;\n\n          if (this.f_bgVisibility === 1) {\n            // Render dummy scanline:\n            this.renderBgScanline(false, 0);\n          }\n        }\n\n        if (this.f_bgVisibility === 1 && this.f_spVisibility === 1) {\n          // Check sprite 0 hit for first scanline:\n          this.checkSprite0(0);\n        }\n\n        if (this.f_bgVisibility === 1 || this.f_spVisibility === 1) {\n          // Clock mapper IRQ Counter:\n          this.nes.mmap.clockIrqCounter();\n        }\n        break;\n\n      case 261:\n        // Dead scanline, no rendering.\n        // Set VINT:\n        this.setStatusFlag(this.STATUS_VBLANK, true);\n        this.requestEndFrame = true;\n        this.nmiCounter = 9;\n\n        // Wrap around:\n        this.scanline = -1; // will be incremented to 0\n\n        break;\n\n      default:\n        if (this.scanline >= 21 && this.scanline <= 260) {\n          // Render normally:\n          if (this.f_bgVisibility === 1) {\n            if (!this.scanlineAlreadyRendered) {\n              // update scroll:\n              this.cntHT = this.regHT;\n              this.cntH = this.regH;\n              this.renderBgScanline(true, this.scanline + 1 - 21);\n            }\n            this.scanlineAlreadyRendered = false;\n\n            // Check for sprite 0 (next scanline):\n            if (!this.hitSpr0 && this.f_spVisibility === 1) {\n              if (\n                this.sprX[0] >= -7 &&\n                this.sprX[0] < 256 &&\n                this.sprY[0] + 1 <= this.scanline - 20 &&\n                this.sprY[0] + 1 + (this.f_spriteSize === 0 ? 8 : 16) >=\n                  this.scanline - 20\n              ) {\n                if (this.checkSprite0(this.scanline - 20)) {\n                  this.hitSpr0 = true;\n                }\n              }\n            }\n          }\n\n          if (this.f_bgVisibility === 1 || this.f_spVisibility === 1) {\n            // Clock mapper IRQ Counter:\n            this.nes.mmap.clockIrqCounter();\n          }\n        }\n    }\n\n    this.scanline++;\n    this.regsToAddress();\n    this.cntsToAddress();\n  },\n\n  startFrame: function() {\n    // Set background color:\n    var bgColor = 0;\n\n    if (this.f_dispType === 0) {\n      // Color display.\n      // f_color determines color emphasis.\n      // Use first entry of image palette as BG color.\n      bgColor = this.imgPalette[0];\n    } else {\n      // Monochrome display.\n      // f_color determines the bg color.\n      switch (this.f_color) {\n        case 0:\n          // Black\n          bgColor = 0x00000;\n          break;\n        case 1:\n          // Green\n          bgColor = 0x00ff00;\n          break;\n        case 2:\n          // Blue\n          bgColor = 0xff0000;\n          break;\n        case 3:\n          // Invalid. Use black.\n          bgColor = 0x000000;\n          break;\n        case 4:\n          // Red\n          bgColor = 0x0000ff;\n          break;\n        default:\n          // Invalid. Use black.\n          bgColor = 0x0;\n      }\n    }\n\n    var buffer = this.buffer;\n    var i;\n    for (i = 0; i < 256 * 240; i++) {\n      buffer[i] = bgColor;\n    }\n    var pixrendered = this.pixrendered;\n    for (i = 0; i < pixrendered.length; i++) {\n      pixrendered[i] = 65;\n    }\n  },\n\n  endFrame: function() {\n    var i, x, y;\n    var buffer = this.buffer;\n\n    // Draw spr#0 hit coordinates:\n    if (this.showSpr0Hit) {\n      // Spr 0 position:\n      if (\n        this.sprX[0] >= 0 &&\n        this.sprX[0] < 256 &&\n        this.sprY[0] >= 0 &&\n        this.sprY[0] < 240\n      ) {\n        for (i = 0; i < 256; i++) {\n          buffer[(this.sprY[0] << 8) + i] = 0xff5555;\n        }\n        for (i = 0; i < 240; i++) {\n          buffer[(i << 8) + this.sprX[0]] = 0xff5555;\n        }\n      }\n      // Hit position:\n      if (\n        this.spr0HitX >= 0 &&\n        this.spr0HitX < 256 &&\n        this.spr0HitY >= 0 &&\n        this.spr0HitY < 240\n      ) {\n        for (i = 0; i < 256; i++) {\n          buffer[(this.spr0HitY << 8) + i] = 0x55ff55;\n        }\n        for (i = 0; i < 240; i++) {\n          buffer[(i << 8) + this.spr0HitX] = 0x55ff55;\n        }\n      }\n    }\n\n    // This is a bit lazy..\n    // if either the sprites or the background should be clipped,\n    // both are clipped after rendering is finished.\n    if (\n      this.clipToTvSize ||\n      this.f_bgClipping === 0 ||\n      this.f_spClipping === 0\n    ) {\n      // Clip left 8-pixels column:\n      for (y = 0; y < 240; y++) {\n        for (x = 0; x < 8; x++) {\n          buffer[(y << 8) + x] = 0;\n        }\n      }\n    }\n\n    if (this.clipToTvSize) {\n      // Clip right 8-pixels column too:\n      for (y = 0; y < 240; y++) {\n        for (x = 0; x < 8; x++) {\n          buffer[(y << 8) + 255 - x] = 0;\n        }\n      }\n    }\n\n    // Clip top and bottom 8 pixels:\n    if (this.clipToTvSize) {\n      for (y = 0; y < 8; y++) {\n        for (x = 0; x < 256; x++) {\n          buffer[(y << 8) + x] = 0;\n          buffer[((239 - y) << 8) + x] = 0;\n        }\n      }\n    }\n\n    this.nes.ui.writeFrame(buffer);\n  },\n\n  updateControlReg1: function(value) {\n    this.triggerRendering();\n\n    this.f_nmiOnVblank = (value >> 7) & 1;\n    this.f_spriteSize = (value >> 5) & 1;\n    this.f_bgPatternTable = (value >> 4) & 1;\n    this.f_spPatternTable = (value >> 3) & 1;\n    this.f_addrInc = (value >> 2) & 1;\n    this.f_nTblAddress = value & 3;\n\n    this.regV = (value >> 1) & 1;\n    this.regH = value & 1;\n    this.regS = (value >> 4) & 1;\n  },\n\n  updateControlReg2: function(value) {\n    this.triggerRendering();\n\n    this.f_color = (value >> 5) & 7;\n    this.f_spVisibility = (value >> 4) & 1;\n    this.f_bgVisibility = (value >> 3) & 1;\n    this.f_spClipping = (value >> 2) & 1;\n    this.f_bgClipping = (value >> 1) & 1;\n    this.f_dispType = value & 1;\n\n    if (this.f_dispType === 0) {\n      this.palTable.setEmphasis(this.f_color);\n    }\n    this.updatePalettes();\n  },\n\n  setStatusFlag: function(flag, value) {\n    var n = 1 << flag;\n    this.nes.cpu.mem[0x2002] =\n      (this.nes.cpu.mem[0x2002] & (255 - n)) | (value ? n : 0);\n  },\n\n  // CPU Register $2002:\n  // Read the Status Register.\n  readStatusRegister: function() {\n    var tmp = this.nes.cpu.mem[0x2002];\n\n    // Reset scroll & VRAM Address toggle:\n    this.firstWrite = true;\n\n    // Clear VBlank flag:\n    this.setStatusFlag(this.STATUS_VBLANK, false);\n\n    // Fetch status data:\n    return tmp;\n  },\n\n  // CPU Register $2003:\n  // Write the SPR-RAM address that is used for sramWrite (Register 0x2004 in CPU memory map)\n  writeSRAMAddress: function(address) {\n    this.sramAddress = address;\n  },\n\n  // CPU Register $2004 (R):\n  // Read from SPR-RAM (Sprite RAM).\n  // The address should be set first.\n  sramLoad: function() {\n    /*short tmp = sprMem.load(sramAddress);\n        sramAddress++; // Increment address\n        sramAddress%=0x100;\n        return tmp;*/\n    return this.spriteMem[this.sramAddress];\n  },\n\n  // CPU Register $2004 (W):\n  // Write to SPR-RAM (Sprite RAM).\n  // The address should be set first.\n  sramWrite: function(value) {\n    this.spriteMem[this.sramAddress] = value;\n    this.spriteRamWriteUpdate(this.sramAddress, value);\n    this.sramAddress++; // Increment address\n    this.sramAddress %= 0x100;\n  },\n\n  // CPU Register $2005:\n  // Write to scroll registers.\n  // The first write is the vertical offset, the second is the\n  // horizontal offset:\n  scrollWrite: function(value) {\n    this.triggerRendering();\n\n    if (this.firstWrite) {\n      // First write, horizontal scroll:\n      this.regHT = (value >> 3) & 31;\n      this.regFH = value & 7;\n    } else {\n      // Second write, vertical scroll:\n      this.regFV = value & 7;\n      this.regVT = (value >> 3) & 31;\n    }\n    this.firstWrite = !this.firstWrite;\n  },\n\n  // CPU Register $2006:\n  // Sets the adress used when reading/writing from/to VRAM.\n  // The first write sets the high byte, the second the low byte.\n  writeVRAMAddress: function(address) {\n    if (this.firstWrite) {\n      this.regFV = (address >> 4) & 3;\n      this.regV = (address >> 3) & 1;\n      this.regH = (address >> 2) & 1;\n      this.regVT = (this.regVT & 7) | ((address & 3) << 3);\n    } else {\n      this.triggerRendering();\n\n      this.regVT = (this.regVT & 24) | ((address >> 5) & 7);\n      this.regHT = address & 31;\n\n      this.cntFV = this.regFV;\n      this.cntV = this.regV;\n      this.cntH = this.regH;\n      this.cntVT = this.regVT;\n      this.cntHT = this.regHT;\n\n      this.checkSprite0(this.scanline - 20);\n    }\n\n    this.firstWrite = !this.firstWrite;\n\n    // Invoke mapper latch:\n    this.cntsToAddress();\n    if (this.vramAddress < 0x2000) {\n      this.nes.mmap.latchAccess(this.vramAddress);\n    }\n  },\n\n  // CPU Register $2007(R):\n  // Read from PPU memory. The address should be set first.\n  vramLoad: function() {\n    var tmp;\n\n    this.cntsToAddress();\n    this.regsToAddress();\n\n    // If address is in range 0x0000-0x3EFF, return buffered values:\n    if (this.vramAddress <= 0x3eff) {\n      tmp = this.vramBufferedReadValue;\n\n      // Update buffered value:\n      if (this.vramAddress < 0x2000) {\n        this.vramBufferedReadValue = this.vramMem[this.vramAddress];\n      } else {\n        this.vramBufferedReadValue = this.mirroredLoad(this.vramAddress);\n      }\n\n      // Mapper latch access:\n      if (this.vramAddress < 0x2000) {\n        this.nes.mmap.latchAccess(this.vramAddress);\n      }\n\n      // Increment by either 1 or 32, depending on d2 of Control Register 1:\n      this.vramAddress += this.f_addrInc === 1 ? 32 : 1;\n\n      this.cntsFromAddress();\n      this.regsFromAddress();\n\n      return tmp; // Return the previous buffered value.\n    }\n\n    // No buffering in this mem range. Read normally.\n    tmp = this.mirroredLoad(this.vramAddress);\n\n    // Increment by either 1 or 32, depending on d2 of Control Register 1:\n    this.vramAddress += this.f_addrInc === 1 ? 32 : 1;\n\n    this.cntsFromAddress();\n    this.regsFromAddress();\n\n    return tmp;\n  },\n\n  // CPU Register $2007(W):\n  // Write to PPU memory. The address should be set first.\n  vramWrite: function(value) {\n    this.triggerRendering();\n    this.cntsToAddress();\n    this.regsToAddress();\n\n    if (this.vramAddress >= 0x2000) {\n      // Mirroring is used.\n      this.mirroredWrite(this.vramAddress, value);\n    } else {\n      // Write normally.\n      this.writeMem(this.vramAddress, value);\n\n      // Invoke mapper latch:\n      this.nes.mmap.latchAccess(this.vramAddress);\n    }\n\n    // Increment by either 1 or 32, depending on d2 of Control Register 1:\n    this.vramAddress += this.f_addrInc === 1 ? 32 : 1;\n    this.regsFromAddress();\n    this.cntsFromAddress();\n  },\n\n  // CPU Register $4014:\n  // Write 256 bytes of main memory\n  // into Sprite RAM.\n  sramDMA: function(value) {\n    var baseAddress = value * 0x100;\n    var data;\n    for (var i = this.sramAddress; i < 256; i++) {\n      data = this.nes.cpu.mem[baseAddress + i];\n      this.spriteMem[i] = data;\n      this.spriteRamWriteUpdate(i, data);\n    }\n\n    this.nes.cpu.haltCycles(513);\n  },\n\n  // Updates the scroll registers from a new VRAM address.\n  regsFromAddress: function() {\n    var address = (this.vramTmpAddress >> 8) & 0xff;\n    this.regFV = (address >> 4) & 7;\n    this.regV = (address >> 3) & 1;\n    this.regH = (address >> 2) & 1;\n    this.regVT = (this.regVT & 7) | ((address & 3) << 3);\n\n    address = this.vramTmpAddress & 0xff;\n    this.regVT = (this.regVT & 24) | ((address >> 5) & 7);\n    this.regHT = address & 31;\n  },\n\n  // Updates the scroll registers from a new VRAM address.\n  cntsFromAddress: function() {\n    var address = (this.vramAddress >> 8) & 0xff;\n    this.cntFV = (address >> 4) & 3;\n    this.cntV = (address >> 3) & 1;\n    this.cntH = (address >> 2) & 1;\n    this.cntVT = (this.cntVT & 7) | ((address & 3) << 3);\n\n    address = this.vramAddress & 0xff;\n    this.cntVT = (this.cntVT & 24) | ((address >> 5) & 7);\n    this.cntHT = address & 31;\n  },\n\n  regsToAddress: function() {\n    var b1 = (this.regFV & 7) << 4;\n    b1 |= (this.regV & 1) << 3;\n    b1 |= (this.regH & 1) << 2;\n    b1 |= (this.regVT >> 3) & 3;\n\n    var b2 = (this.regVT & 7) << 5;\n    b2 |= this.regHT & 31;\n\n    this.vramTmpAddress = ((b1 << 8) | b2) & 0x7fff;\n  },\n\n  cntsToAddress: function() {\n    var b1 = (this.cntFV & 7) << 4;\n    b1 |= (this.cntV & 1) << 3;\n    b1 |= (this.cntH & 1) << 2;\n    b1 |= (this.cntVT >> 3) & 3;\n\n    var b2 = (this.cntVT & 7) << 5;\n    b2 |= this.cntHT & 31;\n\n    this.vramAddress = ((b1 << 8) | b2) & 0x7fff;\n  },\n\n  incTileCounter: function(count) {\n    for (var i = count; i !== 0; i--) {\n      this.cntHT++;\n      if (this.cntHT === 32) {\n        this.cntHT = 0;\n        this.cntVT++;\n        if (this.cntVT >= 30) {\n          this.cntH++;\n          if (this.cntH === 2) {\n            this.cntH = 0;\n            this.cntV++;\n            if (this.cntV === 2) {\n              this.cntV = 0;\n              this.cntFV++;\n              this.cntFV &= 0x7;\n            }\n          }\n        }\n      }\n    }\n  },\n\n  // Reads from memory, taking into account\n  // mirroring/mapping of address ranges.\n  mirroredLoad: function(address) {\n    return this.vramMem[this.vramMirrorTable[address]];\n  },\n\n  // Writes to memory, taking into account\n  // mirroring/mapping of address ranges.\n  mirroredWrite: function(address, value) {\n    if (address >= 0x3f00 && address < 0x3f20) {\n      // Palette write mirroring.\n      if (address === 0x3f00 || address === 0x3f10) {\n        this.writeMem(0x3f00, value);\n        this.writeMem(0x3f10, value);\n      } else if (address === 0x3f04 || address === 0x3f14) {\n        this.writeMem(0x3f04, value);\n        this.writeMem(0x3f14, value);\n      } else if (address === 0x3f08 || address === 0x3f18) {\n        this.writeMem(0x3f08, value);\n        this.writeMem(0x3f18, value);\n      } else if (address === 0x3f0c || address === 0x3f1c) {\n        this.writeMem(0x3f0c, value);\n        this.writeMem(0x3f1c, value);\n      } else {\n        this.writeMem(address, value);\n      }\n    } else {\n      // Use lookup table for mirrored address:\n      if (address < this.vramMirrorTable.length) {\n        this.writeMem(this.vramMirrorTable[address], value);\n      } else {\n        throw new Error(\"Invalid VRAM address: \" + address.toString(16));\n      }\n    }\n  },\n\n  triggerRendering: function() {\n    if (this.scanline >= 21 && this.scanline <= 260) {\n      // Render sprites, and combine:\n      this.renderFramePartially(\n        this.lastRenderedScanline + 1,\n        this.scanline - 21 - this.lastRenderedScanline\n      );\n\n      // Set last rendered scanline:\n      this.lastRenderedScanline = this.scanline - 21;\n    }\n  },\n\n  renderFramePartially: function(startScan, scanCount) {\n    if (this.f_spVisibility === 1) {\n      this.renderSpritesPartially(startScan, scanCount, true);\n    }\n\n    if (this.f_bgVisibility === 1) {\n      var si = startScan << 8;\n      var ei = (startScan + scanCount) << 8;\n      if (ei > 0xf000) {\n        ei = 0xf000;\n      }\n      var buffer = this.buffer;\n      var bgbuffer = this.bgbuffer;\n      var pixrendered = this.pixrendered;\n      for (var destIndex = si; destIndex < ei; destIndex++) {\n        if (pixrendered[destIndex] > 0xff) {\n          buffer[destIndex] = bgbuffer[destIndex];\n        }\n      }\n    }\n\n    if (this.f_spVisibility === 1) {\n      this.renderSpritesPartially(startScan, scanCount, false);\n    }\n\n    this.validTileData = false;\n  },\n\n  renderBgScanline: function(bgbuffer, scan) {\n    var baseTile = this.regS === 0 ? 0 : 256;\n    var destIndex = (scan << 8) - this.regFH;\n\n    this.curNt = this.ntable1[this.cntV + this.cntV + this.cntH];\n\n    this.cntHT = this.regHT;\n    this.cntH = this.regH;\n    this.curNt = this.ntable1[this.cntV + this.cntV + this.cntH];\n\n    if (scan < 240 && scan - this.cntFV >= 0) {\n      var tscanoffset = this.cntFV << 3;\n      var scantile = this.scantile;\n      var attrib = this.attrib;\n      var ptTile = this.ptTile;\n      var nameTable = this.nameTable;\n      var imgPalette = this.imgPalette;\n      var pixrendered = this.pixrendered;\n      var targetBuffer = bgbuffer ? this.bgbuffer : this.buffer;\n\n      var t, tpix, att, col;\n\n      for (var tile = 0; tile < 32; tile++) {\n        if (scan >= 0) {\n          // Fetch tile & attrib data:\n          if (this.validTileData) {\n            // Get data from array:\n            t = scantile[tile];\n            if (typeof t === \"undefined\") {\n              continue;\n            }\n            tpix = t.pix;\n            att = attrib[tile];\n          } else {\n            // Fetch data:\n            t =\n              ptTile[\n                baseTile +\n                  nameTable[this.curNt].getTileIndex(this.cntHT, this.cntVT)\n              ];\n            if (typeof t === \"undefined\") {\n              continue;\n            }\n            tpix = t.pix;\n            att = nameTable[this.curNt].getAttrib(this.cntHT, this.cntVT);\n            scantile[tile] = t;\n            attrib[tile] = att;\n          }\n\n          // Render tile scanline:\n          var sx = 0;\n          var x = (tile << 3) - this.regFH;\n\n          if (x > -8) {\n            if (x < 0) {\n              destIndex -= x;\n              sx = -x;\n            }\n            if (t.opaque[this.cntFV]) {\n              for (; sx < 8; sx++) {\n                targetBuffer[destIndex] =\n                  imgPalette[tpix[tscanoffset + sx] + att];\n                pixrendered[destIndex] |= 256;\n                destIndex++;\n              }\n            } else {\n              for (; sx < 8; sx++) {\n                col = tpix[tscanoffset + sx];\n                if (col !== 0) {\n                  targetBuffer[destIndex] = imgPalette[col + att];\n                  pixrendered[destIndex] |= 256;\n                }\n                destIndex++;\n              }\n            }\n          }\n        }\n\n        // Increase Horizontal Tile Counter:\n        if (++this.cntHT === 32) {\n          this.cntHT = 0;\n          this.cntH++;\n          this.cntH %= 2;\n          this.curNt = this.ntable1[(this.cntV << 1) + this.cntH];\n        }\n      }\n\n      // Tile data for one row should now have been fetched,\n      // so the data in the array is valid.\n      this.validTileData = true;\n    }\n\n    // update vertical scroll:\n    this.cntFV++;\n    if (this.cntFV === 8) {\n      this.cntFV = 0;\n      this.cntVT++;\n      if (this.cntVT === 30) {\n        this.cntVT = 0;\n        this.cntV++;\n        this.cntV %= 2;\n        this.curNt = this.ntable1[(this.cntV << 1) + this.cntH];\n      } else if (this.cntVT === 32) {\n        this.cntVT = 0;\n      }\n\n      // Invalidate fetched data:\n      this.validTileData = false;\n    }\n  },\n\n  renderSpritesPartially: function(startscan, scancount, bgPri) {\n    if (this.f_spVisibility === 1) {\n      for (var i = 0; i < 64; i++) {\n        if (\n          this.bgPriority[i] === bgPri &&\n          this.sprX[i] >= 0 &&\n          this.sprX[i] < 256 &&\n          this.sprY[i] + 8 >= startscan &&\n          this.sprY[i] < startscan + scancount\n        ) {\n          // Show sprite.\n          if (this.f_spriteSize === 0) {\n            // 8x8 sprites\n\n            this.srcy1 = 0;\n            this.srcy2 = 8;\n\n            if (this.sprY[i] < startscan) {\n              this.srcy1 = startscan - this.sprY[i] - 1;\n            }\n\n            if (this.sprY[i] + 8 > startscan + scancount) {\n              this.srcy2 = startscan + scancount - this.sprY[i] + 1;\n            }\n\n            if (this.f_spPatternTable === 0) {\n              this.ptTile[this.sprTile[i]].render(\n                this.buffer,\n                0,\n                this.srcy1,\n                8,\n                this.srcy2,\n                this.sprX[i],\n                this.sprY[i] + 1,\n                this.sprCol[i],\n                this.sprPalette,\n                this.horiFlip[i],\n                this.vertFlip[i],\n                i,\n                this.pixrendered\n              );\n            } else {\n              this.ptTile[this.sprTile[i] + 256].render(\n                this.buffer,\n                0,\n                this.srcy1,\n                8,\n                this.srcy2,\n                this.sprX[i],\n                this.sprY[i] + 1,\n                this.sprCol[i],\n                this.sprPalette,\n                this.horiFlip[i],\n                this.vertFlip[i],\n                i,\n                this.pixrendered\n              );\n            }\n          } else {\n            // 8x16 sprites\n            var top = this.sprTile[i];\n            if ((top & 1) !== 0) {\n              top = this.sprTile[i] - 1 + 256;\n            }\n\n            var srcy1 = 0;\n            var srcy2 = 8;\n\n            if (this.sprY[i] < startscan) {\n              srcy1 = startscan - this.sprY[i] - 1;\n            }\n\n            if (this.sprY[i] + 8 > startscan + scancount) {\n              srcy2 = startscan + scancount - this.sprY[i];\n            }\n\n            this.ptTile[top + (this.vertFlip[i] ? 1 : 0)].render(\n              this.buffer,\n              0,\n              srcy1,\n              8,\n              srcy2,\n              this.sprX[i],\n              this.sprY[i] + 1,\n              this.sprCol[i],\n              this.sprPalette,\n              this.horiFlip[i],\n              this.vertFlip[i],\n              i,\n              this.pixrendered\n            );\n\n            srcy1 = 0;\n            srcy2 = 8;\n\n            if (this.sprY[i] + 8 < startscan) {\n              srcy1 = startscan - (this.sprY[i] + 8 + 1);\n            }\n\n            if (this.sprY[i] + 16 > startscan + scancount) {\n              srcy2 = startscan + scancount - (this.sprY[i] + 8);\n            }\n\n            this.ptTile[top + (this.vertFlip[i] ? 0 : 1)].render(\n              this.buffer,\n              0,\n              srcy1,\n              8,\n              srcy2,\n              this.sprX[i],\n              this.sprY[i] + 1 + 8,\n              this.sprCol[i],\n              this.sprPalette,\n              this.horiFlip[i],\n              this.vertFlip[i],\n              i,\n              this.pixrendered\n            );\n          }\n        }\n      }\n    }\n  },\n\n  checkSprite0: function(scan) {\n    this.spr0HitX = -1;\n    this.spr0HitY = -1;\n\n    var toffset;\n    var tIndexAdd = this.f_spPatternTable === 0 ? 0 : 256;\n    var x, y, t, i;\n    var bufferIndex;\n\n    x = this.sprX[0];\n    y = this.sprY[0] + 1;\n\n    if (this.f_spriteSize === 0) {\n      // 8x8 sprites.\n\n      // Check range:\n      if (y <= scan && y + 8 > scan && x >= -7 && x < 256) {\n        // Sprite is in range.\n        // Draw scanline:\n        t = this.ptTile[this.sprTile[0] + tIndexAdd];\n\n        if (this.vertFlip[0]) {\n          toffset = 7 - (scan - y);\n        } else {\n          toffset = scan - y;\n        }\n        toffset *= 8;\n\n        bufferIndex = scan * 256 + x;\n        if (this.horiFlip[0]) {\n          for (i = 7; i >= 0; i--) {\n            if (x >= 0 && x < 256) {\n              if (\n                bufferIndex >= 0 &&\n                bufferIndex < 61440 &&\n                this.pixrendered[bufferIndex] !== 0\n              ) {\n                if (t.pix[toffset + i] !== 0) {\n                  this.spr0HitX = bufferIndex % 256;\n                  this.spr0HitY = scan;\n                  return true;\n                }\n              }\n            }\n            x++;\n            bufferIndex++;\n          }\n        } else {\n          for (i = 0; i < 8; i++) {\n            if (x >= 0 && x < 256) {\n              if (\n                bufferIndex >= 0 &&\n                bufferIndex < 61440 &&\n                this.pixrendered[bufferIndex] !== 0\n              ) {\n                if (t.pix[toffset + i] !== 0) {\n                  this.spr0HitX = bufferIndex % 256;\n                  this.spr0HitY = scan;\n                  return true;\n                }\n              }\n            }\n            x++;\n            bufferIndex++;\n          }\n        }\n      }\n    } else {\n      // 8x16 sprites:\n\n      // Check range:\n      if (y <= scan && y + 16 > scan && x >= -7 && x < 256) {\n        // Sprite is in range.\n        // Draw scanline:\n\n        if (this.vertFlip[0]) {\n          toffset = 15 - (scan - y);\n        } else {\n          toffset = scan - y;\n        }\n\n        if (toffset < 8) {\n          // first half of sprite.\n          t = this.ptTile[\n            this.sprTile[0] +\n              (this.vertFlip[0] ? 1 : 0) +\n              ((this.sprTile[0] & 1) !== 0 ? 255 : 0)\n          ];\n        } else {\n          // second half of sprite.\n          t = this.ptTile[\n            this.sprTile[0] +\n              (this.vertFlip[0] ? 0 : 1) +\n              ((this.sprTile[0] & 1) !== 0 ? 255 : 0)\n          ];\n          if (this.vertFlip[0]) {\n            toffset = 15 - toffset;\n          } else {\n            toffset -= 8;\n          }\n        }\n        toffset *= 8;\n\n        bufferIndex = scan * 256 + x;\n        if (this.horiFlip[0]) {\n          for (i = 7; i >= 0; i--) {\n            if (x >= 0 && x < 256) {\n              if (\n                bufferIndex >= 0 &&\n                bufferIndex < 61440 &&\n                this.pixrendered[bufferIndex] !== 0\n              ) {\n                if (t.pix[toffset + i] !== 0) {\n                  this.spr0HitX = bufferIndex % 256;\n                  this.spr0HitY = scan;\n                  return true;\n                }\n              }\n            }\n            x++;\n            bufferIndex++;\n          }\n        } else {\n          for (i = 0; i < 8; i++) {\n            if (x >= 0 && x < 256) {\n              if (\n                bufferIndex >= 0 &&\n                bufferIndex < 61440 &&\n                this.pixrendered[bufferIndex] !== 0\n              ) {\n                if (t.pix[toffset + i] !== 0) {\n                  this.spr0HitX = bufferIndex % 256;\n                  this.spr0HitY = scan;\n                  return true;\n                }\n              }\n            }\n            x++;\n            bufferIndex++;\n          }\n        }\n      }\n    }\n\n    return false;\n  },\n\n  // This will write to PPU memory, and\n  // update internally buffered data\n  // appropriately.\n  writeMem: function(address, value) {\n    this.vramMem[address] = value;\n\n    // Update internally buffered data:\n    if (address < 0x2000) {\n      this.vramMem[address] = value;\n      this.patternWrite(address, value);\n    } else if (address >= 0x2000 && address < 0x23c0) {\n      this.nameTableWrite(this.ntable1[0], address - 0x2000, value);\n    } else if (address >= 0x23c0 && address < 0x2400) {\n      this.attribTableWrite(this.ntable1[0], address - 0x23c0, value);\n    } else if (address >= 0x2400 && address < 0x27c0) {\n      this.nameTableWrite(this.ntable1[1], address - 0x2400, value);\n    } else if (address >= 0x27c0 && address < 0x2800) {\n      this.attribTableWrite(this.ntable1[1], address - 0x27c0, value);\n    } else if (address >= 0x2800 && address < 0x2bc0) {\n      this.nameTableWrite(this.ntable1[2], address - 0x2800, value);\n    } else if (address >= 0x2bc0 && address < 0x2c00) {\n      this.attribTableWrite(this.ntable1[2], address - 0x2bc0, value);\n    } else if (address >= 0x2c00 && address < 0x2fc0) {\n      this.nameTableWrite(this.ntable1[3], address - 0x2c00, value);\n    } else if (address >= 0x2fc0 && address < 0x3000) {\n      this.attribTableWrite(this.ntable1[3], address - 0x2fc0, value);\n    } else if (address >= 0x3f00 && address < 0x3f20) {\n      this.updatePalettes();\n    }\n  },\n\n  // Reads data from $3f00 to $f20\n  // into the two buffered palettes.\n  updatePalettes: function() {\n    var i;\n\n    for (i = 0; i < 16; i++) {\n      if (this.f_dispType === 0) {\n        this.imgPalette[i] = this.palTable.getEntry(\n          this.vramMem[0x3f00 + i] & 63\n        );\n      } else {\n        this.imgPalette[i] = this.palTable.getEntry(\n          this.vramMem[0x3f00 + i] & 32\n        );\n      }\n    }\n    for (i = 0; i < 16; i++) {\n      if (this.f_dispType === 0) {\n        this.sprPalette[i] = this.palTable.getEntry(\n          this.vramMem[0x3f10 + i] & 63\n        );\n      } else {\n        this.sprPalette[i] = this.palTable.getEntry(\n          this.vramMem[0x3f10 + i] & 32\n        );\n      }\n    }\n  },\n\n  // Updates the internal pattern\n  // table buffers with this new byte.\n  // In vNES, there is a version of this with 4 arguments which isn't used.\n  patternWrite: function(address, value) {\n    var tileIndex = Math.floor(address / 16);\n    var leftOver = address % 16;\n    if (leftOver < 8) {\n      this.ptTile[tileIndex].setScanline(\n        leftOver,\n        value,\n        this.vramMem[address + 8]\n      );\n    } else {\n      this.ptTile[tileIndex].setScanline(\n        leftOver - 8,\n        this.vramMem[address - 8],\n        value\n      );\n    }\n  },\n\n  // Updates the internal name table buffers\n  // with this new byte.\n  nameTableWrite: function(index, address, value) {\n    this.nameTable[index].tile[address] = value;\n\n    // Update Sprite #0 hit:\n    //updateSpr0Hit();\n    this.checkSprite0(this.scanline - 20);\n  },\n\n  // Updates the internal pattern\n  // table buffers with this new attribute\n  // table byte.\n  attribTableWrite: function(index, address, value) {\n    this.nameTable[index].writeAttrib(address, value);\n  },\n\n  // Updates the internally buffered sprite\n  // data with this new byte of info.\n  spriteRamWriteUpdate: function(address, value) {\n    var tIndex = Math.floor(address / 4);\n\n    if (tIndex === 0) {\n      //updateSpr0Hit();\n      this.checkSprite0(this.scanline - 20);\n    }\n\n    if (address % 4 === 0) {\n      // Y coordinate\n      this.sprY[tIndex] = value;\n    } else if (address % 4 === 1) {\n      // Tile index\n      this.sprTile[tIndex] = value;\n    } else if (address % 4 === 2) {\n      // Attributes\n      this.vertFlip[tIndex] = (value & 0x80) !== 0;\n      this.horiFlip[tIndex] = (value & 0x40) !== 0;\n      this.bgPriority[tIndex] = (value & 0x20) !== 0;\n      this.sprCol[tIndex] = (value & 3) << 2;\n    } else if (address % 4 === 3) {\n      // X coordinate\n      this.sprX[tIndex] = value;\n    }\n  },\n\n  doNMI: function() {\n    // Set VBlank flag:\n    this.setStatusFlag(this.STATUS_VBLANK, true);\n    //nes.getCpu().doNonMaskableInterrupt();\n    this.nes.cpu.requestIrq(this.nes.cpu.IRQ_NMI);\n  },\n\n  isPixelWhite: function(x, y) {\n    this.triggerRendering();\n    return this.nes.ppu.buffer[(y << 8) + x] === 0xffffff;\n  },\n\n  JSON_PROPERTIES: [\n    // Memory\n    \"vramMem\",\n    \"spriteMem\",\n    // Counters\n    \"cntFV\",\n    \"cntV\",\n    \"cntH\",\n    \"cntVT\",\n    \"cntHT\",\n    // Registers\n    \"regFV\",\n    \"regV\",\n    \"regH\",\n    \"regVT\",\n    \"regHT\",\n    \"regFH\",\n    \"regS\",\n    // VRAM addr\n    \"vramAddress\",\n    \"vramTmpAddress\",\n    // Control/Status registers\n    \"f_nmiOnVblank\",\n    \"f_spriteSize\",\n    \"f_bgPatternTable\",\n    \"f_spPatternTable\",\n    \"f_addrInc\",\n    \"f_nTblAddress\",\n    \"f_color\",\n    \"f_spVisibility\",\n    \"f_bgVisibility\",\n    \"f_spClipping\",\n    \"f_bgClipping\",\n    \"f_dispType\",\n    // VRAM I/O\n    \"vramBufferedReadValue\",\n    \"firstWrite\",\n    // Mirroring\n    \"currentMirroring\",\n    \"vramMirrorTable\",\n    \"ntable1\",\n    // SPR-RAM I/O\n    \"sramAddress\",\n    // Sprites. Most sprite data is rebuilt from spriteMem\n    \"hitSpr0\",\n    // Palettes\n    \"sprPalette\",\n    \"imgPalette\",\n    // Rendering progression\n    \"curX\",\n    \"scanline\",\n    \"lastRenderedScanline\",\n    \"curNt\",\n    \"scantile\",\n    // Used during rendering\n    \"attrib\",\n    \"buffer\",\n    \"bgbuffer\",\n    \"pixrendered\",\n    // Misc\n    \"requestEndFrame\",\n    \"nmiOk\",\n    \"dummyCycleToggle\",\n    \"nmiCounter\",\n    \"validTileData\",\n    \"scanlineAlreadyRendered\"\n  ],\n\n  toJSON: function() {\n    var i;\n    var state = utils.toJSON(this);\n\n    state.nameTable = [];\n    for (i = 0; i < this.nameTable.length; i++) {\n      state.nameTable[i] = this.nameTable[i].toJSON();\n    }\n\n    state.ptTile = [];\n    for (i = 0; i < this.ptTile.length; i++) {\n      state.ptTile[i] = this.ptTile[i].toJSON();\n    }\n\n    return state;\n  },\n\n  fromJSON: function(state) {\n    var i;\n\n    utils.fromJSON(this, state);\n\n    for (i = 0; i < this.nameTable.length; i++) {\n      this.nameTable[i].fromJSON(state.nameTable[i]);\n    }\n\n    for (i = 0; i < this.ptTile.length; i++) {\n      this.ptTile[i].fromJSON(state.ptTile[i]);\n    }\n\n    // Sprite data:\n    for (i = 0; i < this.spriteMem.length; i++) {\n      this.spriteRamWriteUpdate(i, this.spriteMem[i]);\n    }\n  }\n};\n\nvar NameTable = function(width, height, name) {\n  this.width = width;\n  this.height = height;\n  this.name = name;\n\n  this.tile = new Uint8Array(width * height);\n  this.attrib = new Uint8Array(width * height);\n  for (var i = 0; i < width * height; i++) {\n    this.tile[i] = 0;\n    this.attrib[i] = 0;\n  }\n};\n\nNameTable.prototype = {\n  getTileIndex: function(x, y) {\n    return this.tile[y * this.width + x];\n  },\n\n  getAttrib: function(x, y) {\n    return this.attrib[y * this.width + x];\n  },\n\n  writeAttrib: function(index, value) {\n    var basex = (index % 8) * 4;\n    var basey = Math.floor(index / 8) * 4;\n    var add;\n    var tx, ty;\n    var attindex;\n\n    for (var sqy = 0; sqy < 2; sqy++) {\n      for (var sqx = 0; sqx < 2; sqx++) {\n        add = (value >> (2 * (sqy * 2 + sqx))) & 3;\n        for (var y = 0; y < 2; y++) {\n          for (var x = 0; x < 2; x++) {\n            tx = basex + sqx * 2 + x;\n            ty = basey + sqy * 2 + y;\n            attindex = ty * this.width + tx;\n            this.attrib[attindex] = (add << 2) & 12;\n          }\n        }\n      }\n    }\n  },\n\n  toJSON: function() {\n    return {\n      tile: this.tile,\n      attrib: this.attrib\n    };\n  },\n\n  fromJSON: function(s) {\n    this.tile = s.tile;\n    this.attrib = s.attrib;\n  }\n};\n\nvar PaletteTable = function() {\n  this.curTable = new Uint32Array(64);\n  this.emphTable = new Array(8);\n  this.currentEmph = -1;\n};\n\nPaletteTable.prototype = {\n  reset: function() {\n    this.setEmphasis(0);\n  },\n\n  loadNTSCPalette: function() {\n    // prettier-ignore\n    this.curTable = new Uint32Array([0x525252, 0xB40000, 0xA00000, 0xB1003D, 0x740069, 0x00005B, 0x00005F, 0x001840, 0x002F10, 0x084A08, 0x006700, 0x124200, 0x6D2800, 0x000000, 0x000000, 0x000000, 0xC4D5E7, 0xFF4000, 0xDC0E22, 0xFF476B, 0xD7009F, 0x680AD7, 0x0019BC, 0x0054B1, 0x006A5B, 0x008C03, 0x00AB00, 0x2C8800, 0xA47200, 0x000000, 0x000000, 0x000000, 0xF8F8F8, 0xFFAB3C, 0xFF7981, 0xFF5BC5, 0xFF48F2, 0xDF49FF, 0x476DFF, 0x00B4F7, 0x00E0FF, 0x00E375, 0x03F42B, 0x78B82E, 0xE5E218, 0x787878, 0x000000, 0x000000, 0xFFFFFF, 0xFFF2BE, 0xF8B8B8, 0xF8B8D8, 0xFFB6FF, 0xFFC3FF, 0xC7D1FF, 0x9ADAFF, 0x88EDF8, 0x83FFDD, 0xB8F8B8, 0xF5F8AC, 0xFFFFB0, 0xF8D8F8, 0x000000, 0x000000]);\n    this.makeTables();\n    this.setEmphasis(0);\n  },\n\n  loadPALPalette: function() {\n    // prettier-ignore\n    this.curTable = new Uint32Array([0x525252, 0xB40000, 0xA00000, 0xB1003D, 0x740069, 0x00005B, 0x00005F, 0x001840, 0x002F10, 0x084A08, 0x006700, 0x124200, 0x6D2800, 0x000000, 0x000000, 0x000000, 0xC4D5E7, 0xFF4000, 0xDC0E22, 0xFF476B, 0xD7009F, 0x680AD7, 0x0019BC, 0x0054B1, 0x006A5B, 0x008C03, 0x00AB00, 0x2C8800, 0xA47200, 0x000000, 0x000000, 0x000000, 0xF8F8F8, 0xFFAB3C, 0xFF7981, 0xFF5BC5, 0xFF48F2, 0xDF49FF, 0x476DFF, 0x00B4F7, 0x00E0FF, 0x00E375, 0x03F42B, 0x78B82E, 0xE5E218, 0x787878, 0x000000, 0x000000, 0xFFFFFF, 0xFFF2BE, 0xF8B8B8, 0xF8B8D8, 0xFFB6FF, 0xFFC3FF, 0xC7D1FF, 0x9ADAFF, 0x88EDF8, 0x83FFDD, 0xB8F8B8, 0xF5F8AC, 0xFFFFB0, 0xF8D8F8, 0x000000, 0x000000]);\n    this.makeTables();\n    this.setEmphasis(0);\n  },\n\n  makeTables: function() {\n    var r, g, b, col, i, rFactor, gFactor, bFactor;\n\n    // Calculate a table for each possible emphasis setting:\n    for (var emph = 0; emph < 8; emph++) {\n      // Determine color component factors:\n      rFactor = 1.0;\n      gFactor = 1.0;\n      bFactor = 1.0;\n\n      if ((emph & 1) !== 0) {\n        rFactor = 0.75;\n        bFactor = 0.75;\n      }\n      if ((emph & 2) !== 0) {\n        rFactor = 0.75;\n        gFactor = 0.75;\n      }\n      if ((emph & 4) !== 0) {\n        gFactor = 0.75;\n        bFactor = 0.75;\n      }\n\n      this.emphTable[emph] = new Uint32Array(64);\n\n      // Calculate table:\n      for (i = 0; i < 64; i++) {\n        col = this.curTable[i];\n        r = Math.floor(this.getRed(col) * rFactor);\n        g = Math.floor(this.getGreen(col) * gFactor);\n        b = Math.floor(this.getBlue(col) * bFactor);\n        this.emphTable[emph][i] = this.getRgb(r, g, b);\n      }\n    }\n  },\n\n  setEmphasis: function(emph) {\n    if (emph !== this.currentEmph) {\n      this.currentEmph = emph;\n      for (var i = 0; i < 64; i++) {\n        this.curTable[i] = this.emphTable[emph][i];\n      }\n    }\n  },\n\n  getEntry: function(yiq) {\n    return this.curTable[yiq];\n  },\n\n  getRed: function(rgb) {\n    return (rgb >> 16) & 0xff;\n  },\n\n  getGreen: function(rgb) {\n    return (rgb >> 8) & 0xff;\n  },\n\n  getBlue: function(rgb) {\n    return rgb & 0xff;\n  },\n\n  getRgb: function(r, g, b) {\n    return (r << 16) | (g << 8) | b;\n  },\n\n  loadDefaultPalette: function() {\n    this.curTable[0] = this.getRgb(117, 117, 117);\n    this.curTable[1] = this.getRgb(39, 27, 143);\n    this.curTable[2] = this.getRgb(0, 0, 171);\n    this.curTable[3] = this.getRgb(71, 0, 159);\n    this.curTable[4] = this.getRgb(143, 0, 119);\n    this.curTable[5] = this.getRgb(171, 0, 19);\n    this.curTable[6] = this.getRgb(167, 0, 0);\n    this.curTable[7] = this.getRgb(127, 11, 0);\n    this.curTable[8] = this.getRgb(67, 47, 0);\n    this.curTable[9] = this.getRgb(0, 71, 0);\n    this.curTable[10] = this.getRgb(0, 81, 0);\n    this.curTable[11] = this.getRgb(0, 63, 23);\n    this.curTable[12] = this.getRgb(27, 63, 95);\n    this.curTable[13] = this.getRgb(0, 0, 0);\n    this.curTable[14] = this.getRgb(0, 0, 0);\n    this.curTable[15] = this.getRgb(0, 0, 0);\n    this.curTable[16] = this.getRgb(188, 188, 188);\n    this.curTable[17] = this.getRgb(0, 115, 239);\n    this.curTable[18] = this.getRgb(35, 59, 239);\n    this.curTable[19] = this.getRgb(131, 0, 243);\n    this.curTable[20] = this.getRgb(191, 0, 191);\n    this.curTable[21] = this.getRgb(231, 0, 91);\n    this.curTable[22] = this.getRgb(219, 43, 0);\n    this.curTable[23] = this.getRgb(203, 79, 15);\n    this.curTable[24] = this.getRgb(139, 115, 0);\n    this.curTable[25] = this.getRgb(0, 151, 0);\n    this.curTable[26] = this.getRgb(0, 171, 0);\n    this.curTable[27] = this.getRgb(0, 147, 59);\n    this.curTable[28] = this.getRgb(0, 131, 139);\n    this.curTable[29] = this.getRgb(0, 0, 0);\n    this.curTable[30] = this.getRgb(0, 0, 0);\n    this.curTable[31] = this.getRgb(0, 0, 0);\n    this.curTable[32] = this.getRgb(255, 255, 255);\n    this.curTable[33] = this.getRgb(63, 191, 255);\n    this.curTable[34] = this.getRgb(95, 151, 255);\n    this.curTable[35] = this.getRgb(167, 139, 253);\n    this.curTable[36] = this.getRgb(247, 123, 255);\n    this.curTable[37] = this.getRgb(255, 119, 183);\n    this.curTable[38] = this.getRgb(255, 119, 99);\n    this.curTable[39] = this.getRgb(255, 155, 59);\n    this.curTable[40] = this.getRgb(243, 191, 63);\n    this.curTable[41] = this.getRgb(131, 211, 19);\n    this.curTable[42] = this.getRgb(79, 223, 75);\n    this.curTable[43] = this.getRgb(88, 248, 152);\n    this.curTable[44] = this.getRgb(0, 235, 219);\n    this.curTable[45] = this.getRgb(0, 0, 0);\n    this.curTable[46] = this.getRgb(0, 0, 0);\n    this.curTable[47] = this.getRgb(0, 0, 0);\n    this.curTable[48] = this.getRgb(255, 255, 255);\n    this.curTable[49] = this.getRgb(171, 231, 255);\n    this.curTable[50] = this.getRgb(199, 215, 255);\n    this.curTable[51] = this.getRgb(215, 203, 255);\n    this.curTable[52] = this.getRgb(255, 199, 255);\n    this.curTable[53] = this.getRgb(255, 199, 219);\n    this.curTable[54] = this.getRgb(255, 191, 179);\n    this.curTable[55] = this.getRgb(255, 219, 171);\n    this.curTable[56] = this.getRgb(255, 231, 163);\n    this.curTable[57] = this.getRgb(227, 255, 163);\n    this.curTable[58] = this.getRgb(171, 243, 191);\n    this.curTable[59] = this.getRgb(179, 255, 207);\n    this.curTable[60] = this.getRgb(159, 255, 243);\n    this.curTable[61] = this.getRgb(0, 0, 0);\n    this.curTable[62] = this.getRgb(0, 0, 0);\n    this.curTable[63] = this.getRgb(0, 0, 0);\n\n    this.makeTables();\n    this.setEmphasis(0);\n  }\n};\n\nmodule.exports = PPU;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/ppu.js\n// module id = 6\n// module chunks = 0 1","var CPU_FREQ_NTSC = 1789772.5; //1789772.72727272d;\n// var CPU_FREQ_PAL = 1773447.4;\n\nvar PAPU = function(nes) {\n  this.nes = nes;\n\n  this.square1 = new ChannelSquare(this, true);\n  this.square2 = new ChannelSquare(this, false);\n  this.triangle = new ChannelTriangle(this);\n  this.noise = new ChannelNoise(this);\n  this.dmc = new ChannelDM(this);\n\n  this.frameIrqCounter = null;\n  this.frameIrqCounterMax = 4;\n  this.initCounter = 2048;\n  this.channelEnableValue = null;\n\n  this.sampleRate = 44100;\n\n  this.lengthLookup = null;\n  this.dmcFreqLookup = null;\n  this.noiseWavelengthLookup = null;\n  this.square_table = null;\n  this.tnd_table = null;\n\n  this.frameIrqEnabled = false;\n  this.frameIrqActive = null;\n  this.frameClockNow = null;\n  this.startedPlaying = false;\n  this.recordOutput = false;\n  this.initingHardware = false;\n\n  this.masterFrameCounter = null;\n  this.derivedFrameCounter = null;\n  this.countSequence = null;\n  this.sampleTimer = null;\n  this.frameTime = null;\n  this.sampleTimerMax = null;\n  this.sampleCount = null;\n  this.triValue = 0;\n\n  this.smpSquare1 = null;\n  this.smpSquare2 = null;\n  this.smpTriangle = null;\n  this.smpDmc = null;\n  this.accCount = null;\n\n  // DC removal vars:\n  this.prevSampleL = 0;\n  this.prevSampleR = 0;\n  this.smpAccumL = 0;\n  this.smpAccumR = 0;\n\n  // DAC range:\n  this.dacRange = 0;\n  this.dcValue = 0;\n\n  // Master volume:\n  this.masterVolume = 256;\n\n  // Stereo positioning:\n  this.stereoPosLSquare1 = null;\n  this.stereoPosLSquare2 = null;\n  this.stereoPosLTriangle = null;\n  this.stereoPosLNoise = null;\n  this.stereoPosLDMC = null;\n  this.stereoPosRSquare1 = null;\n  this.stereoPosRSquare2 = null;\n  this.stereoPosRTriangle = null;\n  this.stereoPosRNoise = null;\n  this.stereoPosRDMC = null;\n\n  this.extraCycles = null;\n\n  this.maxSample = null;\n  this.minSample = null;\n\n  // Panning:\n  this.panning = [80, 170, 100, 150, 128];\n  this.setPanning(this.panning);\n\n  // Initialize lookup tables:\n  this.initLengthLookup();\n  this.initDmcFrequencyLookup();\n  this.initNoiseWavelengthLookup();\n  this.initDACtables();\n\n  // Init sound registers:\n  for (var i = 0; i < 0x14; i++) {\n    if (i === 0x10) {\n      this.writeReg(0x4010, 0x10);\n    } else {\n      this.writeReg(0x4000 + i, 0);\n    }\n  }\n\n  this.reset();\n};\n\nPAPU.prototype = {\n  reset: function() {\n    this.sampleRate = this.nes.opts.sampleRate;\n    this.sampleTimerMax = Math.floor(\n      (1024.0 * CPU_FREQ_NTSC * this.nes.opts.preferredFrameRate) /\n        (this.sampleRate * 60.0)\n    );\n\n    this.frameTime = Math.floor(\n      (14915.0 * this.nes.opts.preferredFrameRate) / 60.0\n    );\n\n    this.sampleTimer = 0;\n\n    this.updateChannelEnable(0);\n    this.masterFrameCounter = 0;\n    this.derivedFrameCounter = 0;\n    this.countSequence = 0;\n    this.sampleCount = 0;\n    this.initCounter = 2048;\n    this.frameIrqEnabled = false;\n    this.initingHardware = false;\n\n    this.resetCounter();\n\n    this.square1.reset();\n    this.square2.reset();\n    this.triangle.reset();\n    this.noise.reset();\n    this.dmc.reset();\n\n    this.accCount = 0;\n    this.smpSquare1 = 0;\n    this.smpSquare2 = 0;\n    this.smpTriangle = 0;\n    this.smpDmc = 0;\n\n    this.frameIrqEnabled = false;\n    this.frameIrqCounterMax = 4;\n\n    this.channelEnableValue = 0xff;\n    this.startedPlaying = false;\n    this.prevSampleL = 0;\n    this.prevSampleR = 0;\n    this.smpAccumL = 0;\n    this.smpAccumR = 0;\n\n    this.maxSample = -500000;\n    this.minSample = 500000;\n  },\n\n  // eslint-disable-next-line no-unused-vars\n  readReg: function(address) {\n    // Read 0x4015:\n    var tmp = 0;\n    tmp |= this.square1.getLengthStatus();\n    tmp |= this.square2.getLengthStatus() << 1;\n    tmp |= this.triangle.getLengthStatus() << 2;\n    tmp |= this.noise.getLengthStatus() << 3;\n    tmp |= this.dmc.getLengthStatus() << 4;\n    tmp |= (this.frameIrqActive && this.frameIrqEnabled ? 1 : 0) << 6;\n    tmp |= this.dmc.getIrqStatus() << 7;\n\n    this.frameIrqActive = false;\n    this.dmc.irqGenerated = false;\n\n    return tmp & 0xffff;\n  },\n\n  writeReg: function(address, value) {\n    if (address >= 0x4000 && address < 0x4004) {\n      // Square Wave 1 Control\n      this.square1.writeReg(address, value);\n      // console.log(\"Square Write\");\n    } else if (address >= 0x4004 && address < 0x4008) {\n      // Square 2 Control\n      this.square2.writeReg(address, value);\n    } else if (address >= 0x4008 && address < 0x400c) {\n      // Triangle Control\n      this.triangle.writeReg(address, value);\n    } else if (address >= 0x400c && address <= 0x400f) {\n      // Noise Control\n      this.noise.writeReg(address, value);\n    } else if (address === 0x4010) {\n      // DMC Play mode & DMA frequency\n      this.dmc.writeReg(address, value);\n    } else if (address === 0x4011) {\n      // DMC Delta Counter\n      this.dmc.writeReg(address, value);\n    } else if (address === 0x4012) {\n      // DMC Play code starting address\n      this.dmc.writeReg(address, value);\n    } else if (address === 0x4013) {\n      // DMC Play code length\n      this.dmc.writeReg(address, value);\n    } else if (address === 0x4015) {\n      // Channel enable\n      this.updateChannelEnable(value);\n\n      if (value !== 0 && this.initCounter > 0) {\n        // Start hardware initialization\n        this.initingHardware = true;\n      }\n\n      // DMC/IRQ Status\n      this.dmc.writeReg(address, value);\n    } else if (address === 0x4017) {\n      // Frame counter control\n      this.countSequence = (value >> 7) & 1;\n      this.masterFrameCounter = 0;\n      this.frameIrqActive = false;\n\n      if (((value >> 6) & 0x1) === 0) {\n        this.frameIrqEnabled = true;\n      } else {\n        this.frameIrqEnabled = false;\n      }\n\n      if (this.countSequence === 0) {\n        // NTSC:\n        this.frameIrqCounterMax = 4;\n        this.derivedFrameCounter = 4;\n      } else {\n        // PAL:\n        this.frameIrqCounterMax = 5;\n        this.derivedFrameCounter = 0;\n        this.frameCounterTick();\n      }\n    }\n  },\n\n  resetCounter: function() {\n    if (this.countSequence === 0) {\n      this.derivedFrameCounter = 4;\n    } else {\n      this.derivedFrameCounter = 0;\n    }\n  },\n\n  // Updates channel enable status.\n  // This is done on writes to the\n  // channel enable register (0x4015),\n  // and when the user enables/disables channels\n  // in the GUI.\n  updateChannelEnable: function(value) {\n    this.channelEnableValue = value & 0xffff;\n    this.square1.setEnabled((value & 1) !== 0);\n    this.square2.setEnabled((value & 2) !== 0);\n    this.triangle.setEnabled((value & 4) !== 0);\n    this.noise.setEnabled((value & 8) !== 0);\n    this.dmc.setEnabled((value & 16) !== 0);\n  },\n\n  // Clocks the frame counter. It should be clocked at\n  // twice the cpu speed, so the cycles will be\n  // divided by 2 for those counters that are\n  // clocked at cpu speed.\n  clockFrameCounter: function(nCycles) {\n    if (this.initCounter > 0) {\n      if (this.initingHardware) {\n        this.initCounter -= nCycles;\n        if (this.initCounter <= 0) {\n          this.initingHardware = false;\n        }\n        return;\n      }\n    }\n\n    // Don't process ticks beyond next sampling:\n    nCycles += this.extraCycles;\n    var maxCycles = this.sampleTimerMax - this.sampleTimer;\n    if (nCycles << 10 > maxCycles) {\n      this.extraCycles = ((nCycles << 10) - maxCycles) >> 10;\n      nCycles -= this.extraCycles;\n    } else {\n      this.extraCycles = 0;\n    }\n\n    var dmc = this.dmc;\n    var triangle = this.triangle;\n    var square1 = this.square1;\n    var square2 = this.square2;\n    var noise = this.noise;\n\n    // Clock DMC:\n    if (dmc.isEnabled) {\n      dmc.shiftCounter -= nCycles << 3;\n      while (dmc.shiftCounter <= 0 && dmc.dmaFrequency > 0) {\n        dmc.shiftCounter += dmc.dmaFrequency;\n        dmc.clockDmc();\n      }\n    }\n\n    // Clock Triangle channel Prog timer:\n    if (triangle.progTimerMax > 0) {\n      triangle.progTimerCount -= nCycles;\n      while (triangle.progTimerCount <= 0) {\n        triangle.progTimerCount += triangle.progTimerMax + 1;\n        if (triangle.linearCounter > 0 && triangle.lengthCounter > 0) {\n          triangle.triangleCounter++;\n          triangle.triangleCounter &= 0x1f;\n\n          if (triangle.isEnabled) {\n            if (triangle.triangleCounter >= 0x10) {\n              // Normal value.\n              triangle.sampleValue = triangle.triangleCounter & 0xf;\n            } else {\n              // Inverted value.\n              triangle.sampleValue = 0xf - (triangle.triangleCounter & 0xf);\n            }\n            triangle.sampleValue <<= 4;\n          }\n        }\n      }\n    }\n\n    // Clock Square channel 1 Prog timer:\n    square1.progTimerCount -= nCycles;\n    if (square1.progTimerCount <= 0) {\n      square1.progTimerCount += (square1.progTimerMax + 1) << 1;\n\n      square1.squareCounter++;\n      square1.squareCounter &= 0x7;\n      square1.updateSampleValue();\n    }\n\n    // Clock Square channel 2 Prog timer:\n    square2.progTimerCount -= nCycles;\n    if (square2.progTimerCount <= 0) {\n      square2.progTimerCount += (square2.progTimerMax + 1) << 1;\n\n      square2.squareCounter++;\n      square2.squareCounter &= 0x7;\n      square2.updateSampleValue();\n    }\n\n    // Clock noise channel Prog timer:\n    var acc_c = nCycles;\n    if (noise.progTimerCount - acc_c > 0) {\n      // Do all cycles at once:\n      noise.progTimerCount -= acc_c;\n      noise.accCount += acc_c;\n      noise.accValue += acc_c * noise.sampleValue;\n    } else {\n      // Slow-step:\n      while (acc_c-- > 0) {\n        if (--noise.progTimerCount <= 0 && noise.progTimerMax > 0) {\n          // Update noise shift register:\n          noise.shiftReg <<= 1;\n          noise.tmp =\n            ((noise.shiftReg << (noise.randomMode === 0 ? 1 : 6)) ^\n              noise.shiftReg) &\n            0x8000;\n          if (noise.tmp !== 0) {\n            // Sample value must be 0.\n            noise.shiftReg |= 0x01;\n            noise.randomBit = 0;\n            noise.sampleValue = 0;\n          } else {\n            // Find sample value:\n            noise.randomBit = 1;\n            if (noise.isEnabled && noise.lengthCounter > 0) {\n              noise.sampleValue = noise.masterVolume;\n            } else {\n              noise.sampleValue = 0;\n            }\n          }\n\n          noise.progTimerCount += noise.progTimerMax;\n        }\n\n        noise.accValue += noise.sampleValue;\n        noise.accCount++;\n      }\n    }\n\n    // Frame IRQ handling:\n    if (this.frameIrqEnabled && this.frameIrqActive) {\n      this.nes.cpu.requestIrq(this.nes.cpu.IRQ_NORMAL);\n    }\n\n    // Clock frame counter at double CPU speed:\n    this.masterFrameCounter += nCycles << 1;\n    if (this.masterFrameCounter >= this.frameTime) {\n      // 240Hz tick:\n      this.masterFrameCounter -= this.frameTime;\n      this.frameCounterTick();\n    }\n\n    // Accumulate sample value:\n    this.accSample(nCycles);\n\n    // Clock sample timer:\n    this.sampleTimer += nCycles << 10;\n    if (this.sampleTimer >= this.sampleTimerMax) {\n      // Sample channels:\n      this.sample();\n      this.sampleTimer -= this.sampleTimerMax;\n    }\n  },\n\n  accSample: function(cycles) {\n    // Special treatment for triangle channel - need to interpolate.\n    if (this.triangle.sampleCondition) {\n      this.triValue = Math.floor(\n        (this.triangle.progTimerCount << 4) / (this.triangle.progTimerMax + 1)\n      );\n      if (this.triValue > 16) {\n        this.triValue = 16;\n      }\n      if (this.triangle.triangleCounter >= 16) {\n        this.triValue = 16 - this.triValue;\n      }\n\n      // Add non-interpolated sample value:\n      this.triValue += this.triangle.sampleValue;\n    }\n\n    // Now sample normally:\n    if (cycles === 2) {\n      this.smpTriangle += this.triValue << 1;\n      this.smpDmc += this.dmc.sample << 1;\n      this.smpSquare1 += this.square1.sampleValue << 1;\n      this.smpSquare2 += this.square2.sampleValue << 1;\n      this.accCount += 2;\n    } else if (cycles === 4) {\n      this.smpTriangle += this.triValue << 2;\n      this.smpDmc += this.dmc.sample << 2;\n      this.smpSquare1 += this.square1.sampleValue << 2;\n      this.smpSquare2 += this.square2.sampleValue << 2;\n      this.accCount += 4;\n    } else {\n      this.smpTriangle += cycles * this.triValue;\n      this.smpDmc += cycles * this.dmc.sample;\n      this.smpSquare1 += cycles * this.square1.sampleValue;\n      this.smpSquare2 += cycles * this.square2.sampleValue;\n      this.accCount += cycles;\n    }\n  },\n\n  frameCounterTick: function() {\n    this.derivedFrameCounter++;\n    if (this.derivedFrameCounter >= this.frameIrqCounterMax) {\n      this.derivedFrameCounter = 0;\n    }\n\n    if (this.derivedFrameCounter === 1 || this.derivedFrameCounter === 3) {\n      // Clock length & sweep:\n      this.triangle.clockLengthCounter();\n      this.square1.clockLengthCounter();\n      this.square2.clockLengthCounter();\n      this.noise.clockLengthCounter();\n      this.square1.clockSweep();\n      this.square2.clockSweep();\n    }\n\n    if (this.derivedFrameCounter >= 0 && this.derivedFrameCounter < 4) {\n      // Clock linear & decay:\n      this.square1.clockEnvDecay();\n      this.square2.clockEnvDecay();\n      this.noise.clockEnvDecay();\n      this.triangle.clockLinearCounter();\n    }\n\n    if (this.derivedFrameCounter === 3 && this.countSequence === 0) {\n      // Enable IRQ:\n      this.frameIrqActive = true;\n    }\n\n    // End of 240Hz tick\n  },\n\n  // Samples the channels, mixes the output together, then writes to buffer.\n  sample: function() {\n    var sq_index, tnd_index;\n\n    if (this.accCount > 0) {\n      this.smpSquare1 <<= 4;\n      this.smpSquare1 = Math.floor(this.smpSquare1 / this.accCount);\n\n      this.smpSquare2 <<= 4;\n      this.smpSquare2 = Math.floor(this.smpSquare2 / this.accCount);\n\n      this.smpTriangle = Math.floor(this.smpTriangle / this.accCount);\n\n      this.smpDmc <<= 4;\n      this.smpDmc = Math.floor(this.smpDmc / this.accCount);\n\n      this.accCount = 0;\n    } else {\n      this.smpSquare1 = this.square1.sampleValue << 4;\n      this.smpSquare2 = this.square2.sampleValue << 4;\n      this.smpTriangle = this.triangle.sampleValue;\n      this.smpDmc = this.dmc.sample << 4;\n    }\n\n    var smpNoise = Math.floor((this.noise.accValue << 4) / this.noise.accCount);\n    this.noise.accValue = smpNoise >> 4;\n    this.noise.accCount = 1;\n\n    // Stereo sound.\n\n    // Left channel:\n    sq_index =\n      (this.smpSquare1 * this.stereoPosLSquare1 +\n        this.smpSquare2 * this.stereoPosLSquare2) >>\n      8;\n    tnd_index =\n      (3 * this.smpTriangle * this.stereoPosLTriangle +\n        (smpNoise << 1) * this.stereoPosLNoise +\n        this.smpDmc * this.stereoPosLDMC) >>\n      8;\n    if (sq_index >= this.square_table.length) {\n      sq_index = this.square_table.length - 1;\n    }\n    if (tnd_index >= this.tnd_table.length) {\n      tnd_index = this.tnd_table.length - 1;\n    }\n    var sampleValueL =\n      this.square_table[sq_index] + this.tnd_table[tnd_index] - this.dcValue;\n\n    // Right channel:\n    sq_index =\n      (this.smpSquare1 * this.stereoPosRSquare1 +\n        this.smpSquare2 * this.stereoPosRSquare2) >>\n      8;\n    tnd_index =\n      (3 * this.smpTriangle * this.stereoPosRTriangle +\n        (smpNoise << 1) * this.stereoPosRNoise +\n        this.smpDmc * this.stereoPosRDMC) >>\n      8;\n    if (sq_index >= this.square_table.length) {\n      sq_index = this.square_table.length - 1;\n    }\n    if (tnd_index >= this.tnd_table.length) {\n      tnd_index = this.tnd_table.length - 1;\n    }\n    var sampleValueR =\n      this.square_table[sq_index] + this.tnd_table[tnd_index] - this.dcValue;\n\n    // Remove DC from left channel:\n    var smpDiffL = sampleValueL - this.prevSampleL;\n    this.prevSampleL += smpDiffL;\n    this.smpAccumL += smpDiffL - (this.smpAccumL >> 10);\n    sampleValueL = this.smpAccumL;\n\n    // Remove DC from right channel:\n    var smpDiffR = sampleValueR - this.prevSampleR;\n    this.prevSampleR += smpDiffR;\n    this.smpAccumR += smpDiffR - (this.smpAccumR >> 10);\n    sampleValueR = this.smpAccumR;\n\n    // Write:\n    if (sampleValueL > this.maxSample) {\n      this.maxSample = sampleValueL;\n    }\n    if (sampleValueL < this.minSample) {\n      this.minSample = sampleValueL;\n    }\n\n    if (this.nes.opts.onAudioSample) {\n      this.nes.opts.onAudioSample(sampleValueL / 32768, sampleValueR / 32768);\n    }\n\n    // Reset sampled values:\n    this.smpSquare1 = 0;\n    this.smpSquare2 = 0;\n    this.smpTriangle = 0;\n    this.smpDmc = 0;\n  },\n\n  getLengthMax: function(value) {\n    return this.lengthLookup[value >> 3];\n  },\n\n  getDmcFrequency: function(value) {\n    if (value >= 0 && value < 0x10) {\n      return this.dmcFreqLookup[value];\n    }\n    return 0;\n  },\n\n  getNoiseWaveLength: function(value) {\n    if (value >= 0 && value < 0x10) {\n      return this.noiseWavelengthLookup[value];\n    }\n    return 0;\n  },\n\n  setPanning: function(pos) {\n    for (var i = 0; i < 5; i++) {\n      this.panning[i] = pos[i];\n    }\n    this.updateStereoPos();\n  },\n\n  setMasterVolume: function(value) {\n    if (value < 0) {\n      value = 0;\n    }\n    if (value > 256) {\n      value = 256;\n    }\n    this.masterVolume = value;\n    this.updateStereoPos();\n  },\n\n  updateStereoPos: function() {\n    this.stereoPosLSquare1 = (this.panning[0] * this.masterVolume) >> 8;\n    this.stereoPosLSquare2 = (this.panning[1] * this.masterVolume) >> 8;\n    this.stereoPosLTriangle = (this.panning[2] * this.masterVolume) >> 8;\n    this.stereoPosLNoise = (this.panning[3] * this.masterVolume) >> 8;\n    this.stereoPosLDMC = (this.panning[4] * this.masterVolume) >> 8;\n\n    this.stereoPosRSquare1 = this.masterVolume - this.stereoPosLSquare1;\n    this.stereoPosRSquare2 = this.masterVolume - this.stereoPosLSquare2;\n    this.stereoPosRTriangle = this.masterVolume - this.stereoPosLTriangle;\n    this.stereoPosRNoise = this.masterVolume - this.stereoPosLNoise;\n    this.stereoPosRDMC = this.masterVolume - this.stereoPosLDMC;\n  },\n\n  initLengthLookup: function() {\n    // prettier-ignore\n    this.lengthLookup = [\n            0x0A, 0xFE,\n            0x14, 0x02,\n            0x28, 0x04,\n            0x50, 0x06,\n            0xA0, 0x08,\n            0x3C, 0x0A,\n            0x0E, 0x0C,\n            0x1A, 0x0E,\n            0x0C, 0x10,\n            0x18, 0x12,\n            0x30, 0x14,\n            0x60, 0x16,\n            0xC0, 0x18,\n            0x48, 0x1A,\n            0x10, 0x1C,\n            0x20, 0x1E\n        ];\n  },\n\n  initDmcFrequencyLookup: function() {\n    this.dmcFreqLookup = new Array(16);\n\n    this.dmcFreqLookup[0x0] = 0xd60;\n    this.dmcFreqLookup[0x1] = 0xbe0;\n    this.dmcFreqLookup[0x2] = 0xaa0;\n    this.dmcFreqLookup[0x3] = 0xa00;\n    this.dmcFreqLookup[0x4] = 0x8f0;\n    this.dmcFreqLookup[0x5] = 0x7f0;\n    this.dmcFreqLookup[0x6] = 0x710;\n    this.dmcFreqLookup[0x7] = 0x6b0;\n    this.dmcFreqLookup[0x8] = 0x5f0;\n    this.dmcFreqLookup[0x9] = 0x500;\n    this.dmcFreqLookup[0xa] = 0x470;\n    this.dmcFreqLookup[0xb] = 0x400;\n    this.dmcFreqLookup[0xc] = 0x350;\n    this.dmcFreqLookup[0xd] = 0x2a0;\n    this.dmcFreqLookup[0xe] = 0x240;\n    this.dmcFreqLookup[0xf] = 0x1b0;\n    //for(int i=0;i<16;i++)dmcFreqLookup[i]/=8;\n  },\n\n  initNoiseWavelengthLookup: function() {\n    this.noiseWavelengthLookup = new Array(16);\n\n    this.noiseWavelengthLookup[0x0] = 0x004;\n    this.noiseWavelengthLookup[0x1] = 0x008;\n    this.noiseWavelengthLookup[0x2] = 0x010;\n    this.noiseWavelengthLookup[0x3] = 0x020;\n    this.noiseWavelengthLookup[0x4] = 0x040;\n    this.noiseWavelengthLookup[0x5] = 0x060;\n    this.noiseWavelengthLookup[0x6] = 0x080;\n    this.noiseWavelengthLookup[0x7] = 0x0a0;\n    this.noiseWavelengthLookup[0x8] = 0x0ca;\n    this.noiseWavelengthLookup[0x9] = 0x0fe;\n    this.noiseWavelengthLookup[0xa] = 0x17c;\n    this.noiseWavelengthLookup[0xb] = 0x1fc;\n    this.noiseWavelengthLookup[0xc] = 0x2fa;\n    this.noiseWavelengthLookup[0xd] = 0x3f8;\n    this.noiseWavelengthLookup[0xe] = 0x7f2;\n    this.noiseWavelengthLookup[0xf] = 0xfe4;\n  },\n\n  initDACtables: function() {\n    var value, ival, i;\n    var max_sqr = 0;\n    var max_tnd = 0;\n\n    this.square_table = new Float32Array(32 * 16);\n    this.tnd_table = new Float32Array(204 * 16);\n\n    for (i = 0; i < 32 * 16; i++) {\n      value = 95.52 / (8128.0 / (i / 16.0) + 100.0);\n      value *= 0.98411;\n      value *= 50000.0;\n      ival = Math.floor(value);\n\n      this.square_table[i] = ival;\n      if (ival > max_sqr) {\n        max_sqr = ival;\n      }\n    }\n\n    for (i = 0; i < 204 * 16; i++) {\n      value = 163.67 / (24329.0 / (i / 16.0) + 100.0);\n      value *= 0.98411;\n      value *= 50000.0;\n      ival = Math.floor(value);\n\n      this.tnd_table[i] = ival;\n      if (ival > max_tnd) {\n        max_tnd = ival;\n      }\n    }\n\n    this.dacRange = max_sqr + max_tnd;\n    this.dcValue = this.dacRange / 2;\n  }\n};\n\nvar ChannelDM = function(papu) {\n  this.papu = papu;\n\n  this.MODE_NORMAL = 0;\n  this.MODE_LOOP = 1;\n  this.MODE_IRQ = 2;\n\n  this.isEnabled = null;\n  this.hasSample = null;\n  this.irqGenerated = false;\n\n  this.playMode = null;\n  this.dmaFrequency = null;\n  this.dmaCounter = null;\n  this.deltaCounter = null;\n  this.playStartAddress = null;\n  this.playAddress = null;\n  this.playLength = null;\n  this.playLengthCounter = null;\n  this.shiftCounter = null;\n  this.reg4012 = null;\n  this.reg4013 = null;\n  this.sample = null;\n  this.dacLsb = null;\n  this.data = null;\n\n  this.reset();\n};\n\nChannelDM.prototype = {\n  clockDmc: function() {\n    // Only alter DAC value if the sample buffer has data:\n    if (this.hasSample) {\n      if ((this.data & 1) === 0) {\n        // Decrement delta:\n        if (this.deltaCounter > 0) {\n          this.deltaCounter--;\n        }\n      } else {\n        // Increment delta:\n        if (this.deltaCounter < 63) {\n          this.deltaCounter++;\n        }\n      }\n\n      // Update sample value:\n      this.sample = this.isEnabled ? (this.deltaCounter << 1) + this.dacLsb : 0;\n\n      // Update shift register:\n      this.data >>= 1;\n    }\n\n    this.dmaCounter--;\n    if (this.dmaCounter <= 0) {\n      // No more sample bits.\n      this.hasSample = false;\n      this.endOfSample();\n      this.dmaCounter = 8;\n    }\n\n    if (this.irqGenerated) {\n      this.papu.nes.cpu.requestIrq(this.papu.nes.cpu.IRQ_NORMAL);\n    }\n  },\n\n  endOfSample: function() {\n    if (this.playLengthCounter === 0 && this.playMode === this.MODE_LOOP) {\n      // Start from beginning of sample:\n      this.playAddress = this.playStartAddress;\n      this.playLengthCounter = this.playLength;\n    }\n\n    if (this.playLengthCounter > 0) {\n      // Fetch next sample:\n      this.nextSample();\n\n      if (this.playLengthCounter === 0) {\n        // Last byte of sample fetched, generate IRQ:\n        if (this.playMode === this.MODE_IRQ) {\n          // Generate IRQ:\n          this.irqGenerated = true;\n        }\n      }\n    }\n  },\n\n  nextSample: function() {\n    // Fetch byte:\n    this.data = this.papu.nes.mmap.load(this.playAddress);\n    this.papu.nes.cpu.haltCycles(4);\n\n    this.playLengthCounter--;\n    this.playAddress++;\n    if (this.playAddress > 0xffff) {\n      this.playAddress = 0x8000;\n    }\n\n    this.hasSample = true;\n  },\n\n  writeReg: function(address, value) {\n    if (address === 0x4010) {\n      // Play mode, DMA Frequency\n      if (value >> 6 === 0) {\n        this.playMode = this.MODE_NORMAL;\n      } else if (((value >> 6) & 1) === 1) {\n        this.playMode = this.MODE_LOOP;\n      } else if (value >> 6 === 2) {\n        this.playMode = this.MODE_IRQ;\n      }\n\n      if ((value & 0x80) === 0) {\n        this.irqGenerated = false;\n      }\n\n      this.dmaFrequency = this.papu.getDmcFrequency(value & 0xf);\n    } else if (address === 0x4011) {\n      // Delta counter load register:\n      this.deltaCounter = (value >> 1) & 63;\n      this.dacLsb = value & 1;\n      this.sample = (this.deltaCounter << 1) + this.dacLsb; // update sample value\n    } else if (address === 0x4012) {\n      // DMA address load register\n      this.playStartAddress = (value << 6) | 0x0c000;\n      this.playAddress = this.playStartAddress;\n      this.reg4012 = value;\n    } else if (address === 0x4013) {\n      // Length of play code\n      this.playLength = (value << 4) + 1;\n      this.playLengthCounter = this.playLength;\n      this.reg4013 = value;\n    } else if (address === 0x4015) {\n      // DMC/IRQ Status\n      if (((value >> 4) & 1) === 0) {\n        // Disable:\n        this.playLengthCounter = 0;\n      } else {\n        // Restart:\n        this.playAddress = this.playStartAddress;\n        this.playLengthCounter = this.playLength;\n      }\n      this.irqGenerated = false;\n    }\n  },\n\n  setEnabled: function(value) {\n    if (!this.isEnabled && value) {\n      this.playLengthCounter = this.playLength;\n    }\n    this.isEnabled = value;\n  },\n\n  getLengthStatus: function() {\n    return this.playLengthCounter === 0 || !this.isEnabled ? 0 : 1;\n  },\n\n  getIrqStatus: function() {\n    return this.irqGenerated ? 1 : 0;\n  },\n\n  reset: function() {\n    this.isEnabled = false;\n    this.irqGenerated = false;\n    this.playMode = this.MODE_NORMAL;\n    this.dmaFrequency = 0;\n    this.dmaCounter = 0;\n    this.deltaCounter = 0;\n    this.playStartAddress = 0;\n    this.playAddress = 0;\n    this.playLength = 0;\n    this.playLengthCounter = 0;\n    this.sample = 0;\n    this.dacLsb = 0;\n    this.shiftCounter = 0;\n    this.reg4012 = 0;\n    this.reg4013 = 0;\n    this.data = 0;\n  }\n};\n\nvar ChannelNoise = function(papu) {\n  this.papu = papu;\n\n  this.isEnabled = null;\n  this.envDecayDisable = null;\n  this.envDecayLoopEnable = null;\n  this.lengthCounterEnable = null;\n  this.envReset = null;\n  this.shiftNow = null;\n\n  this.lengthCounter = null;\n  this.progTimerCount = null;\n  this.progTimerMax = null;\n  this.envDecayRate = null;\n  this.envDecayCounter = null;\n  this.envVolume = null;\n  this.masterVolume = null;\n  this.shiftReg = 1 << 14;\n  this.randomBit = null;\n  this.randomMode = null;\n  this.sampleValue = null;\n  this.accValue = 0;\n  this.accCount = 1;\n  this.tmp = null;\n\n  this.reset();\n};\n\nChannelNoise.prototype = {\n  reset: function() {\n    this.progTimerCount = 0;\n    this.progTimerMax = 0;\n    this.isEnabled = false;\n    this.lengthCounter = 0;\n    this.lengthCounterEnable = false;\n    this.envDecayDisable = false;\n    this.envDecayLoopEnable = false;\n    this.shiftNow = false;\n    this.envDecayRate = 0;\n    this.envDecayCounter = 0;\n    this.envVolume = 0;\n    this.masterVolume = 0;\n    this.shiftReg = 1;\n    this.randomBit = 0;\n    this.randomMode = 0;\n    this.sampleValue = 0;\n    this.tmp = 0;\n  },\n\n  clockLengthCounter: function() {\n    if (this.lengthCounterEnable && this.lengthCounter > 0) {\n      this.lengthCounter--;\n      if (this.lengthCounter === 0) {\n        this.updateSampleValue();\n      }\n    }\n  },\n\n  clockEnvDecay: function() {\n    if (this.envReset) {\n      // Reset envelope:\n      this.envReset = false;\n      this.envDecayCounter = this.envDecayRate + 1;\n      this.envVolume = 0xf;\n    } else if (--this.envDecayCounter <= 0) {\n      // Normal handling:\n      this.envDecayCounter = this.envDecayRate + 1;\n      if (this.envVolume > 0) {\n        this.envVolume--;\n      } else {\n        this.envVolume = this.envDecayLoopEnable ? 0xf : 0;\n      }\n    }\n    if (this.envDecayDisable) {\n      this.masterVolume = this.envDecayRate;\n    } else {\n      this.masterVolume = this.envVolume;\n    }\n    this.updateSampleValue();\n  },\n\n  updateSampleValue: function() {\n    if (this.isEnabled && this.lengthCounter > 0) {\n      this.sampleValue = this.randomBit * this.masterVolume;\n    }\n  },\n\n  writeReg: function(address, value) {\n    if (address === 0x400c) {\n      // Volume/Envelope decay:\n      this.envDecayDisable = (value & 0x10) !== 0;\n      this.envDecayRate = value & 0xf;\n      this.envDecayLoopEnable = (value & 0x20) !== 0;\n      this.lengthCounterEnable = (value & 0x20) === 0;\n      if (this.envDecayDisable) {\n        this.masterVolume = this.envDecayRate;\n      } else {\n        this.masterVolume = this.envVolume;\n      }\n    } else if (address === 0x400e) {\n      // Programmable timer:\n      this.progTimerMax = this.papu.getNoiseWaveLength(value & 0xf);\n      this.randomMode = value >> 7;\n    } else if (address === 0x400f) {\n      // Length counter\n      this.lengthCounter = this.papu.getLengthMax(value & 248);\n      this.envReset = true;\n    }\n    // Update:\n    //updateSampleValue();\n  },\n\n  setEnabled: function(value) {\n    this.isEnabled = value;\n    if (!value) {\n      this.lengthCounter = 0;\n    }\n    this.updateSampleValue();\n  },\n\n  getLengthStatus: function() {\n    return this.lengthCounter === 0 || !this.isEnabled ? 0 : 1;\n  }\n};\n\nvar ChannelSquare = function(papu, square1) {\n  this.papu = papu;\n\n  // prettier-ignore\n  this.dutyLookup = [\n         0, 1, 0, 0, 0, 0, 0, 0,\n         0, 1, 1, 0, 0, 0, 0, 0,\n         0, 1, 1, 1, 1, 0, 0, 0,\n         1, 0, 0, 1, 1, 1, 1, 1\n    ];\n  // prettier-ignore\n  this.impLookup = [\n         1,-1, 0, 0, 0, 0, 0, 0,\n         1, 0,-1, 0, 0, 0, 0, 0,\n         1, 0, 0, 0,-1, 0, 0, 0,\n        -1, 0, 1, 0, 0, 0, 0, 0\n    ];\n\n  this.sqr1 = square1;\n  this.isEnabled = null;\n  this.lengthCounterEnable = null;\n  this.sweepActive = null;\n  this.envDecayDisable = null;\n  this.envDecayLoopEnable = null;\n  this.envReset = null;\n  this.sweepCarry = null;\n  this.updateSweepPeriod = null;\n\n  this.progTimerCount = null;\n  this.progTimerMax = null;\n  this.lengthCounter = null;\n  this.squareCounter = null;\n  this.sweepCounter = null;\n  this.sweepCounterMax = null;\n  this.sweepMode = null;\n  this.sweepShiftAmount = null;\n  this.envDecayRate = null;\n  this.envDecayCounter = null;\n  this.envVolume = null;\n  this.masterVolume = null;\n  this.dutyMode = null;\n  this.sweepResult = null;\n  this.sampleValue = null;\n  this.vol = null;\n\n  this.reset();\n};\n\nChannelSquare.prototype = {\n  reset: function() {\n    this.progTimerCount = 0;\n    this.progTimerMax = 0;\n    this.lengthCounter = 0;\n    this.squareCounter = 0;\n    this.sweepCounter = 0;\n    this.sweepCounterMax = 0;\n    this.sweepMode = 0;\n    this.sweepShiftAmount = 0;\n    this.envDecayRate = 0;\n    this.envDecayCounter = 0;\n    this.envVolume = 0;\n    this.masterVolume = 0;\n    this.dutyMode = 0;\n    this.vol = 0;\n\n    this.isEnabled = false;\n    this.lengthCounterEnable = false;\n    this.sweepActive = false;\n    this.sweepCarry = false;\n    this.envDecayDisable = false;\n    this.envDecayLoopEnable = false;\n  },\n\n  clockLengthCounter: function() {\n    if (this.lengthCounterEnable && this.lengthCounter > 0) {\n      this.lengthCounter--;\n      if (this.lengthCounter === 0) {\n        this.updateSampleValue();\n      }\n    }\n  },\n\n  clockEnvDecay: function() {\n    if (this.envReset) {\n      // Reset envelope:\n      this.envReset = false;\n      this.envDecayCounter = this.envDecayRate + 1;\n      this.envVolume = 0xf;\n    } else if (--this.envDecayCounter <= 0) {\n      // Normal handling:\n      this.envDecayCounter = this.envDecayRate + 1;\n      if (this.envVolume > 0) {\n        this.envVolume--;\n      } else {\n        this.envVolume = this.envDecayLoopEnable ? 0xf : 0;\n      }\n    }\n\n    if (this.envDecayDisable) {\n      this.masterVolume = this.envDecayRate;\n    } else {\n      this.masterVolume = this.envVolume;\n    }\n    this.updateSampleValue();\n  },\n\n  clockSweep: function() {\n    if (--this.sweepCounter <= 0) {\n      this.sweepCounter = this.sweepCounterMax + 1;\n      if (\n        this.sweepActive &&\n        this.sweepShiftAmount > 0 &&\n        this.progTimerMax > 7\n      ) {\n        // Calculate result from shifter:\n        this.sweepCarry = false;\n        if (this.sweepMode === 0) {\n          this.progTimerMax += this.progTimerMax >> this.sweepShiftAmount;\n          if (this.progTimerMax > 4095) {\n            this.progTimerMax = 4095;\n            this.sweepCarry = true;\n          }\n        } else {\n          this.progTimerMax =\n            this.progTimerMax -\n            ((this.progTimerMax >> this.sweepShiftAmount) -\n              (this.sqr1 ? 1 : 0));\n        }\n      }\n    }\n\n    if (this.updateSweepPeriod) {\n      this.updateSweepPeriod = false;\n      this.sweepCounter = this.sweepCounterMax + 1;\n    }\n  },\n\n  updateSampleValue: function() {\n    if (this.isEnabled && this.lengthCounter > 0 && this.progTimerMax > 7) {\n      if (\n        this.sweepMode === 0 &&\n        this.progTimerMax + (this.progTimerMax >> this.sweepShiftAmount) > 4095\n      ) {\n        //if (this.sweepCarry) {\n        this.sampleValue = 0;\n      } else {\n        this.sampleValue =\n          this.masterVolume *\n          this.dutyLookup[(this.dutyMode << 3) + this.squareCounter];\n      }\n    } else {\n      this.sampleValue = 0;\n    }\n  },\n\n  writeReg: function(address, value) {\n    var addrAdd = this.sqr1 ? 0 : 4;\n    if (address === 0x4000 + addrAdd) {\n      // Volume/Envelope decay:\n      this.envDecayDisable = (value & 0x10) !== 0;\n      this.envDecayRate = value & 0xf;\n      this.envDecayLoopEnable = (value & 0x20) !== 0;\n      this.dutyMode = (value >> 6) & 0x3;\n      this.lengthCounterEnable = (value & 0x20) === 0;\n      if (this.envDecayDisable) {\n        this.masterVolume = this.envDecayRate;\n      } else {\n        this.masterVolume = this.envVolume;\n      }\n      this.updateSampleValue();\n    } else if (address === 0x4001 + addrAdd) {\n      // Sweep:\n      this.sweepActive = (value & 0x80) !== 0;\n      this.sweepCounterMax = (value >> 4) & 7;\n      this.sweepMode = (value >> 3) & 1;\n      this.sweepShiftAmount = value & 7;\n      this.updateSweepPeriod = true;\n    } else if (address === 0x4002 + addrAdd) {\n      // Programmable timer:\n      this.progTimerMax &= 0x700;\n      this.progTimerMax |= value;\n    } else if (address === 0x4003 + addrAdd) {\n      // Programmable timer, length counter\n      this.progTimerMax &= 0xff;\n      this.progTimerMax |= (value & 0x7) << 8;\n\n      if (this.isEnabled) {\n        this.lengthCounter = this.papu.getLengthMax(value & 0xf8);\n      }\n\n      this.envReset = true;\n    }\n  },\n\n  setEnabled: function(value) {\n    this.isEnabled = value;\n    if (!value) {\n      this.lengthCounter = 0;\n    }\n    this.updateSampleValue();\n  },\n\n  getLengthStatus: function() {\n    return this.lengthCounter === 0 || !this.isEnabled ? 0 : 1;\n  }\n};\n\nvar ChannelTriangle = function(papu) {\n  this.papu = papu;\n\n  this.isEnabled = null;\n  this.sampleCondition = null;\n  this.lengthCounterEnable = null;\n  this.lcHalt = null;\n  this.lcControl = null;\n\n  this.progTimerCount = null;\n  this.progTimerMax = null;\n  this.triangleCounter = null;\n  this.lengthCounter = null;\n  this.linearCounter = null;\n  this.lcLoadValue = null;\n  this.sampleValue = null;\n  this.tmp = null;\n\n  this.reset();\n};\n\nChannelTriangle.prototype = {\n  reset: function() {\n    this.progTimerCount = 0;\n    this.progTimerMax = 0;\n    this.triangleCounter = 0;\n    this.isEnabled = false;\n    this.sampleCondition = false;\n    this.lengthCounter = 0;\n    this.lengthCounterEnable = false;\n    this.linearCounter = 0;\n    this.lcLoadValue = 0;\n    this.lcHalt = true;\n    this.lcControl = false;\n    this.tmp = 0;\n    this.sampleValue = 0xf;\n  },\n\n  clockLengthCounter: function() {\n    if (this.lengthCounterEnable && this.lengthCounter > 0) {\n      this.lengthCounter--;\n      if (this.lengthCounter === 0) {\n        this.updateSampleCondition();\n      }\n    }\n  },\n\n  clockLinearCounter: function() {\n    if (this.lcHalt) {\n      // Load:\n      this.linearCounter = this.lcLoadValue;\n      this.updateSampleCondition();\n    } else if (this.linearCounter > 0) {\n      // Decrement:\n      this.linearCounter--;\n      this.updateSampleCondition();\n    }\n    if (!this.lcControl) {\n      // Clear halt flag:\n      this.lcHalt = false;\n    }\n  },\n\n  getLengthStatus: function() {\n    return this.lengthCounter === 0 || !this.isEnabled ? 0 : 1;\n  },\n\n  // eslint-disable-next-line no-unused-vars\n  readReg: function(address) {\n    return 0;\n  },\n\n  writeReg: function(address, value) {\n    if (address === 0x4008) {\n      // New values for linear counter:\n      this.lcControl = (value & 0x80) !== 0;\n      this.lcLoadValue = value & 0x7f;\n\n      // Length counter enable:\n      this.lengthCounterEnable = !this.lcControl;\n    } else if (address === 0x400a) {\n      // Programmable timer:\n      this.progTimerMax &= 0x700;\n      this.progTimerMax |= value;\n    } else if (address === 0x400b) {\n      // Programmable timer, length counter\n      this.progTimerMax &= 0xff;\n      this.progTimerMax |= (value & 0x07) << 8;\n      this.lengthCounter = this.papu.getLengthMax(value & 0xf8);\n      this.lcHalt = true;\n    }\n\n    this.updateSampleCondition();\n  },\n\n  clockProgrammableTimer: function(nCycles) {\n    if (this.progTimerMax > 0) {\n      this.progTimerCount += nCycles;\n      while (\n        this.progTimerMax > 0 &&\n        this.progTimerCount >= this.progTimerMax\n      ) {\n        this.progTimerCount -= this.progTimerMax;\n        if (\n          this.isEnabled &&\n          this.lengthCounter > 0 &&\n          this.linearCounter > 0\n        ) {\n          this.clockTriangleGenerator();\n        }\n      }\n    }\n  },\n\n  clockTriangleGenerator: function() {\n    this.triangleCounter++;\n    this.triangleCounter &= 0x1f;\n  },\n\n  setEnabled: function(value) {\n    this.isEnabled = value;\n    if (!value) {\n      this.lengthCounter = 0;\n    }\n    this.updateSampleCondition();\n  },\n\n  updateSampleCondition: function() {\n    this.sampleCondition =\n      this.isEnabled &&\n      this.progTimerMax > 7 &&\n      this.linearCounter > 0 &&\n      this.lengthCounter > 0;\n  }\n};\n\nmodule.exports = PAPU;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/papu.js\n// module id = 7\n// module chunks = 0 1","var Mappers = require(\"./mappers\");\nvar Tile = require(\"./tile\");\n\nvar ROM = function(nes) {\n  this.nes = nes;\n\n  this.mapperName = new Array(92);\n\n  for (var i = 0; i < 92; i++) {\n    this.mapperName[i] = \"Unknown Mapper\";\n  }\n  this.mapperName[0] = \"Direct Access\";\n  this.mapperName[1] = \"Nintendo MMC1\";\n  this.mapperName[2] = \"UNROM\";\n  this.mapperName[3] = \"CNROM\";\n  this.mapperName[4] = \"Nintendo MMC3\";\n  this.mapperName[5] = \"Nintendo MMC5\";\n  this.mapperName[6] = \"FFE F4xxx\";\n  this.mapperName[7] = \"AOROM\";\n  this.mapperName[8] = \"FFE F3xxx\";\n  this.mapperName[9] = \"Nintendo MMC2\";\n  this.mapperName[10] = \"Nintendo MMC4\";\n  this.mapperName[11] = \"Color Dreams Chip\";\n  this.mapperName[12] = \"FFE F6xxx\";\n  this.mapperName[15] = \"100-in-1 switch\";\n  this.mapperName[16] = \"Bandai chip\";\n  this.mapperName[17] = \"FFE F8xxx\";\n  this.mapperName[18] = \"Jaleco SS8806 chip\";\n  this.mapperName[19] = \"Namcot 106 chip\";\n  this.mapperName[20] = \"Famicom Disk System\";\n  this.mapperName[21] = \"Konami VRC4a\";\n  this.mapperName[22] = \"Konami VRC2a\";\n  this.mapperName[23] = \"Konami VRC2a\";\n  this.mapperName[24] = \"Konami VRC6\";\n  this.mapperName[25] = \"Konami VRC4b\";\n  this.mapperName[32] = \"Irem G-101 chip\";\n  this.mapperName[33] = \"Taito TC0190/TC0350\";\n  this.mapperName[34] = \"32kB ROM switch\";\n\n  this.mapperName[64] = \"Tengen RAMBO-1 chip\";\n  this.mapperName[65] = \"Irem H-3001 chip\";\n  this.mapperName[66] = \"GNROM switch\";\n  this.mapperName[67] = \"SunSoft3 chip\";\n  this.mapperName[68] = \"SunSoft4 chip\";\n  this.mapperName[69] = \"SunSoft5 FME-7 chip\";\n  this.mapperName[71] = \"Camerica chip\";\n  this.mapperName[78] = \"Irem 74HC161/32-based\";\n  this.mapperName[91] = \"Pirate HK-SF3 chip\";\n};\n\nROM.prototype = {\n  // Mirroring types:\n  VERTICAL_MIRRORING: 0,\n  HORIZONTAL_MIRRORING: 1,\n  FOURSCREEN_MIRRORING: 2,\n  SINGLESCREEN_MIRRORING: 3,\n  SINGLESCREEN_MIRRORING2: 4,\n  SINGLESCREEN_MIRRORING3: 5,\n  SINGLESCREEN_MIRRORING4: 6,\n  CHRROM_MIRRORING: 7,\n\n  header: null,\n  rom: null,\n  vrom: null,\n  vromTile: null,\n\n  romCount: null,\n  vromCount: null,\n  mirroring: null,\n  batteryRam: null,\n  trainer: null,\n  fourScreen: null,\n  mapperType: null,\n  valid: false,\n\n  load: function(data) {\n    var i, j, v;\n\n    if (data.indexOf(\"NES\\x1a\") === -1) {\n      throw new Error(\"Not a valid NES ROM.\");\n    }\n    this.header = new Array(16);\n    for (i = 0; i < 16; i++) {\n      this.header[i] = data.charCodeAt(i) & 0xff;\n    }\n    this.romCount = this.header[4];\n    this.vromCount = this.header[5] * 2; // Get the number of 4kB banks, not 8kB\n    this.mirroring = (this.header[6] & 1) !== 0 ? 1 : 0;\n    this.batteryRam = (this.header[6] & 2) !== 0;\n    this.trainer = (this.header[6] & 4) !== 0;\n    this.fourScreen = (this.header[6] & 8) !== 0;\n    this.mapperType = (this.header[6] >> 4) | (this.header[7] & 0xf0);\n    /* TODO\n        if (this.batteryRam)\n            this.loadBatteryRam();*/\n    // Check whether byte 8-15 are zero's:\n    var foundError = false;\n    for (i = 8; i < 16; i++) {\n      if (this.header[i] !== 0) {\n        foundError = true;\n        break;\n      }\n    }\n    if (foundError) {\n      this.mapperType &= 0xf; // Ignore byte 7\n    }\n    // Load PRG-ROM banks:\n    this.rom = new Array(this.romCount);\n    var offset = 16;\n    for (i = 0; i < this.romCount; i++) {\n      this.rom[i] = new Uint8Array(16384);\n      for (j = 0; j < 16384; j++) {\n        if (offset + j >= data.length) {\n          break;\n        }\n        this.rom[i][j] = data.charCodeAt(offset + j) & 0xff;\n      }\n      offset += 16384;\n    }\n    // Load CHR-ROM banks:\n    this.vrom = new Array(this.vromCount);\n    for (i = 0; i < this.vromCount; i++) {\n      this.vrom[i] = new Uint8Array(4096);\n      for (j = 0; j < 4096; j++) {\n        if (offset + j >= data.length) {\n          break;\n        }\n        this.vrom[i][j] = data.charCodeAt(offset + j) & 0xff;\n      }\n      offset += 4096;\n    }\n\n    // Create VROM tiles:\n    this.vromTile = new Array(this.vromCount);\n    for (i = 0; i < this.vromCount; i++) {\n      this.vromTile[i] = new Array(256);\n      for (j = 0; j < 256; j++) {\n        this.vromTile[i][j] = new Tile();\n      }\n    }\n\n    // Convert CHR-ROM banks to tiles:\n    var tileIndex;\n    var leftOver;\n    for (v = 0; v < this.vromCount; v++) {\n      for (i = 0; i < 4096; i++) {\n        tileIndex = i >> 4;\n        leftOver = i % 16;\n        if (leftOver < 8) {\n          this.vromTile[v][tileIndex].setScanline(\n            leftOver,\n            this.vrom[v][i],\n            this.vrom[v][i + 8]\n          );\n        } else {\n          this.vromTile[v][tileIndex].setScanline(\n            leftOver - 8,\n            this.vrom[v][i - 8],\n            this.vrom[v][i]\n          );\n        }\n      }\n    }\n\n    this.valid = true;\n  },\n\n  getMirroringType: function() {\n    if (this.fourScreen) {\n      return this.FOURSCREEN_MIRRORING;\n    }\n    if (this.mirroring === 0) {\n      return this.HORIZONTAL_MIRRORING;\n    }\n    return this.VERTICAL_MIRRORING;\n  },\n\n  getMapperName: function() {\n    if (this.mapperType >= 0 && this.mapperType < this.mapperName.length) {\n      return this.mapperName[this.mapperType];\n    }\n    return \"Unknown Mapper, \" + this.mapperType;\n  },\n\n  mapperSupported: function() {\n    return typeof Mappers[this.mapperType] !== \"undefined\";\n  },\n\n  createMapper: function() {\n    if (this.mapperSupported()) {\n      return new Mappers[this.mapperType](this.nes);\n    } else {\n      throw new Error(\n        \"This ROM uses a mapper not supported by JSNES: \" +\n          this.getMapperName() +\n          \"(\" +\n          this.mapperType +\n          \")\"\n      );\n    }\n  }\n};\n\nmodule.exports = ROM;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/rom.js\n// module id = 8\n// module chunks = 0 1","var utils = require(\"./utils\");\n\nvar Mappers = {};\n\nMappers[0] = function(nes) {\n  this.nes = nes;\n};\n\nMappers[0].prototype = {\n  reset: function() {\n    this.joy1StrobeState = 0;\n    this.joy2StrobeState = 0;\n    this.joypadLastWrite = 0;\n\n    this.zapperFired = false;\n    this.zapperX = null;\n    this.zapperY = null;\n  },\n\n  write: function(address, value) {\n    if (address < 0x2000) {\n      // Mirroring of RAM:\n      this.nes.cpu.mem[address & 0x7ff] = value;\n    } else if (address > 0x4017) {\n      this.nes.cpu.mem[address] = value;\n      if (address >= 0x6000 && address < 0x8000) {\n        // Write to persistent RAM\n        this.nes.opts.onBatteryRamWrite(address, value);\n      }\n    } else if (address > 0x2007 && address < 0x4000) {\n      this.regWrite(0x2000 + (address & 0x7), value);\n    } else {\n      this.regWrite(address, value);\n    }\n  },\n\n  writelow: function(address, value) {\n    if (address < 0x2000) {\n      // Mirroring of RAM:\n      this.nes.cpu.mem[address & 0x7ff] = value;\n    } else if (address > 0x4017) {\n      this.nes.cpu.mem[address] = value;\n    } else if (address > 0x2007 && address < 0x4000) {\n      this.regWrite(0x2000 + (address & 0x7), value);\n    } else {\n      this.regWrite(address, value);\n    }\n  },\n\n  load: function(address) {\n    // Wrap around:\n    address &= 0xffff;\n\n    // Check address range:\n    if (address > 0x4017) {\n      // ROM:\n      return this.nes.cpu.mem[address];\n    } else if (address >= 0x2000) {\n      // I/O Ports.\n      return this.regLoad(address);\n    } else {\n      // RAM (mirrored)\n      return this.nes.cpu.mem[address & 0x7ff];\n    }\n  },\n\n  regLoad: function(address) {\n    switch (\n      address >> 12 // use fourth nibble (0xF000)\n    ) {\n      case 0:\n        break;\n\n      case 1:\n        break;\n\n      case 2:\n      // Fall through to case 3\n      case 3:\n        // PPU Registers\n        switch (address & 0x7) {\n          case 0x0:\n            // 0x2000:\n            // PPU Control Register 1.\n            // (the value is stored both\n            // in main memory and in the\n            // PPU as flags):\n            // (not in the real NES)\n            return this.nes.cpu.mem[0x2000];\n\n          case 0x1:\n            // 0x2001:\n            // PPU Control Register 2.\n            // (the value is stored both\n            // in main memory and in the\n            // PPU as flags):\n            // (not in the real NES)\n            return this.nes.cpu.mem[0x2001];\n\n          case 0x2:\n            // 0x2002:\n            // PPU Status Register.\n            // The value is stored in\n            // main memory in addition\n            // to as flags in the PPU.\n            // (not in the real NES)\n            return this.nes.ppu.readStatusRegister();\n\n          case 0x3:\n            return 0;\n\n          case 0x4:\n            // 0x2004:\n            // Sprite Memory read.\n            return this.nes.ppu.sramLoad();\n          case 0x5:\n            return 0;\n\n          case 0x6:\n            return 0;\n\n          case 0x7:\n            // 0x2007:\n            // VRAM read:\n            return this.nes.ppu.vramLoad();\n        }\n        break;\n      case 4:\n        // Sound+Joypad registers\n        switch (address - 0x4015) {\n          case 0:\n            // 0x4015:\n            // Sound channel enable, DMC Status\n            return this.nes.papu.readReg(address);\n\n          case 1:\n            // 0x4016:\n            // Joystick 1 + Strobe\n            return this.joy1Read();\n\n          case 2:\n            // 0x4017:\n            // Joystick 2 + Strobe\n            // https://wiki.nesdev.com/w/index.php/Zapper\n            var w;\n\n            if (\n              this.zapperX !== null &&\n              this.zapperY !== null &&\n              this.nes.ppu.isPixelWhite(this.zapperX, this.zapperY)\n            ) {\n              w = 0;\n            } else {\n              w = 0x1 << 3;\n            }\n\n            if (this.zapperFired) {\n              w |= 0x1 << 4;\n            }\n            return (this.joy2Read() | w) & 0xffff;\n        }\n        break;\n    }\n    return 0;\n  },\n\n  regWrite: function(address, value) {\n    switch (address) {\n      case 0x2000:\n        // PPU Control register 1\n        this.nes.cpu.mem[address] = value;\n        this.nes.ppu.updateControlReg1(value);\n        break;\n\n      case 0x2001:\n        // PPU Control register 2\n        this.nes.cpu.mem[address] = value;\n        this.nes.ppu.updateControlReg2(value);\n        break;\n\n      case 0x2003:\n        // Set Sprite RAM address:\n        this.nes.ppu.writeSRAMAddress(value);\n        break;\n\n      case 0x2004:\n        // Write to Sprite RAM:\n        this.nes.ppu.sramWrite(value);\n        break;\n\n      case 0x2005:\n        // Screen Scroll offsets:\n        this.nes.ppu.scrollWrite(value);\n        break;\n\n      case 0x2006:\n        // Set VRAM address:\n        this.nes.ppu.writeVRAMAddress(value);\n        break;\n\n      case 0x2007:\n        // Write to VRAM:\n        this.nes.ppu.vramWrite(value);\n        break;\n\n      case 0x4014:\n        // Sprite Memory DMA Access\n        this.nes.ppu.sramDMA(value);\n        break;\n\n      case 0x4015:\n        // Sound Channel Switch, DMC Status\n        this.nes.papu.writeReg(address, value);\n        break;\n\n      case 0x4016:\n        // Joystick 1 + Strobe\n        if ((value & 1) === 0 && (this.joypadLastWrite & 1) === 1) {\n          this.joy1StrobeState = 0;\n          this.joy2StrobeState = 0;\n        }\n        this.joypadLastWrite = value;\n        break;\n\n      case 0x4017:\n        // Sound channel frame sequencer:\n        this.nes.papu.writeReg(address, value);\n        break;\n\n      default:\n        // Sound registers\n        // console.log(\"write to sound reg\");\n        if (address >= 0x4000 && address <= 0x4017) {\n          this.nes.papu.writeReg(address, value);\n        }\n    }\n  },\n\n  joy1Read: function() {\n    var ret;\n\n    switch (this.joy1StrobeState) {\n      case 0:\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n        ret = this.nes.controllers[1].state[this.joy1StrobeState];\n        break;\n      case 8:\n      case 9:\n      case 10:\n      case 11:\n      case 12:\n      case 13:\n      case 14:\n      case 15:\n      case 16:\n      case 17:\n      case 18:\n        ret = 0;\n        break;\n      case 19:\n        ret = 1;\n        break;\n      default:\n        ret = 0;\n    }\n\n    this.joy1StrobeState++;\n    if (this.joy1StrobeState === 24) {\n      this.joy1StrobeState = 0;\n    }\n\n    return ret;\n  },\n\n  joy2Read: function() {\n    var ret;\n\n    switch (this.joy2StrobeState) {\n      case 0:\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n        ret = this.nes.controllers[2].state[this.joy2StrobeState];\n        break;\n      case 8:\n      case 9:\n      case 10:\n      case 11:\n      case 12:\n      case 13:\n      case 14:\n      case 15:\n      case 16:\n      case 17:\n      case 18:\n        ret = 0;\n        break;\n      case 19:\n        ret = 1;\n        break;\n      default:\n        ret = 0;\n    }\n\n    this.joy2StrobeState++;\n    if (this.joy2StrobeState === 24) {\n      this.joy2StrobeState = 0;\n    }\n\n    return ret;\n  },\n\n  loadROM: function() {\n    if (!this.nes.rom.valid || this.nes.rom.romCount < 1) {\n      throw new Error(\"NoMapper: Invalid ROM! Unable to load.\");\n    }\n\n    // Load ROM into memory:\n    this.loadPRGROM();\n\n    // Load CHR-ROM:\n    this.loadCHRROM();\n\n    // Load Battery RAM (if present):\n    this.loadBatteryRam();\n\n    // Reset IRQ:\n    //nes.getCpu().doResetInterrupt();\n    this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n  },\n\n  loadPRGROM: function() {\n    if (this.nes.rom.romCount > 1) {\n      // Load the two first banks into memory.\n      this.loadRomBank(0, 0x8000);\n      this.loadRomBank(1, 0xc000);\n    } else {\n      // Load the one bank into both memory locations:\n      this.loadRomBank(0, 0x8000);\n      this.loadRomBank(0, 0xc000);\n    }\n  },\n\n  loadCHRROM: function() {\n    // console.log(\"Loading CHR ROM..\");\n    if (this.nes.rom.vromCount > 0) {\n      if (this.nes.rom.vromCount === 1) {\n        this.loadVromBank(0, 0x0000);\n        this.loadVromBank(0, 0x1000);\n      } else {\n        this.loadVromBank(0, 0x0000);\n        this.loadVromBank(1, 0x1000);\n      }\n    } else {\n      //System.out.println(\"There aren't any CHR-ROM banks..\");\n    }\n  },\n\n  loadBatteryRam: function() {\n    if (this.nes.rom.batteryRam) {\n      var ram = this.nes.rom.batteryRam;\n      if (ram !== null && ram.length === 0x2000) {\n        // Load Battery RAM into memory:\n        utils.copyArrayElements(ram, 0, this.nes.cpu.mem, 0x6000, 0x2000);\n      }\n    }\n  },\n\n  loadRomBank: function(bank, address) {\n    // Loads a ROM bank into the specified address.\n    bank %= this.nes.rom.romCount;\n    //var data = this.nes.rom.rom[bank];\n    //cpuMem.write(address,data,data.length);\n    utils.copyArrayElements(\n      this.nes.rom.rom[bank],\n      0,\n      this.nes.cpu.mem,\n      address,\n      16384\n    );\n  },\n\n  loadVromBank: function(bank, address) {\n    if (this.nes.rom.vromCount === 0) {\n      return;\n    }\n    this.nes.ppu.triggerRendering();\n\n    utils.copyArrayElements(\n      this.nes.rom.vrom[bank % this.nes.rom.vromCount],\n      0,\n      this.nes.ppu.vramMem,\n      address,\n      4096\n    );\n\n    var vromTile = this.nes.rom.vromTile[bank % this.nes.rom.vromCount];\n    utils.copyArrayElements(\n      vromTile,\n      0,\n      this.nes.ppu.ptTile,\n      address >> 4,\n      256\n    );\n  },\n\n  load32kRomBank: function(bank, address) {\n    this.loadRomBank((bank * 2) % this.nes.rom.romCount, address);\n    this.loadRomBank((bank * 2 + 1) % this.nes.rom.romCount, address + 16384);\n  },\n\n  load8kVromBank: function(bank4kStart, address) {\n    if (this.nes.rom.vromCount === 0) {\n      return;\n    }\n    this.nes.ppu.triggerRendering();\n\n    this.loadVromBank(bank4kStart % this.nes.rom.vromCount, address);\n    this.loadVromBank(\n      (bank4kStart + 1) % this.nes.rom.vromCount,\n      address + 4096\n    );\n  },\n\n  load1kVromBank: function(bank1k, address) {\n    if (this.nes.rom.vromCount === 0) {\n      return;\n    }\n    this.nes.ppu.triggerRendering();\n\n    var bank4k = Math.floor(bank1k / 4) % this.nes.rom.vromCount;\n    var bankoffset = (bank1k % 4) * 1024;\n    utils.copyArrayElements(\n      this.nes.rom.vrom[bank4k],\n      bankoffset,\n      this.nes.ppu.vramMem,\n      address,\n      1024\n    );\n\n    // Update tiles:\n    var vromTile = this.nes.rom.vromTile[bank4k];\n    var baseIndex = address >> 4;\n    for (var i = 0; i < 64; i++) {\n      this.nes.ppu.ptTile[baseIndex + i] = vromTile[(bank1k % 4 << 6) + i];\n    }\n  },\n\n  load2kVromBank: function(bank2k, address) {\n    if (this.nes.rom.vromCount === 0) {\n      return;\n    }\n    this.nes.ppu.triggerRendering();\n\n    var bank4k = Math.floor(bank2k / 2) % this.nes.rom.vromCount;\n    var bankoffset = (bank2k % 2) * 2048;\n    utils.copyArrayElements(\n      this.nes.rom.vrom[bank4k],\n      bankoffset,\n      this.nes.ppu.vramMem,\n      address,\n      2048\n    );\n\n    // Update tiles:\n    var vromTile = this.nes.rom.vromTile[bank4k];\n    var baseIndex = address >> 4;\n    for (var i = 0; i < 128; i++) {\n      this.nes.ppu.ptTile[baseIndex + i] = vromTile[(bank2k % 2 << 7) + i];\n    }\n  },\n\n  load8kRomBank: function(bank8k, address) {\n    var bank16k = Math.floor(bank8k / 2) % this.nes.rom.romCount;\n    var offset = (bank8k % 2) * 8192;\n\n    //this.nes.cpu.mem.write(address,this.nes.rom.rom[bank16k],offset,8192);\n    utils.copyArrayElements(\n      this.nes.rom.rom[bank16k],\n      offset,\n      this.nes.cpu.mem,\n      address,\n      8192\n    );\n  },\n\n  clockIrqCounter: function() {\n    // Does nothing. This is used by the MMC3 mapper.\n  },\n\n  // eslint-disable-next-line no-unused-vars\n  latchAccess: function(address) {\n    // Does nothing. This is used by MMC2.\n  },\n\n  toJSON: function() {\n    return {\n      joy1StrobeState: this.joy1StrobeState,\n      joy2StrobeState: this.joy2StrobeState,\n      joypadLastWrite: this.joypadLastWrite\n    };\n  },\n\n  fromJSON: function(s) {\n    this.joy1StrobeState = s.joy1StrobeState;\n    this.joy2StrobeState = s.joy2StrobeState;\n    this.joypadLastWrite = s.joypadLastWrite;\n  }\n};\n\nMappers[1] = function(nes) {\n  this.nes = nes;\n};\n\nMappers[1].prototype = new Mappers[0]();\n\nMappers[1].prototype.reset = function() {\n  Mappers[0].prototype.reset.apply(this);\n\n  // 5-bit buffer:\n  this.regBuffer = 0;\n  this.regBufferCounter = 0;\n\n  // Register 0:\n  this.mirroring = 0;\n  this.oneScreenMirroring = 0;\n  this.prgSwitchingArea = 1;\n  this.prgSwitchingSize = 1;\n  this.vromSwitchingSize = 0;\n\n  // Register 1:\n  this.romSelectionReg0 = 0;\n\n  // Register 2:\n  this.romSelectionReg1 = 0;\n\n  // Register 3:\n  this.romBankSelect = 0;\n};\n\nMappers[1].prototype.write = function(address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  }\n\n  // See what should be done with the written value:\n  if ((value & 128) !== 0) {\n    // Reset buffering:\n    this.regBufferCounter = 0;\n    this.regBuffer = 0;\n\n    // Reset register:\n    if (this.getRegNumber(address) === 0) {\n      this.prgSwitchingArea = 1;\n      this.prgSwitchingSize = 1;\n    }\n  } else {\n    // Continue buffering:\n    //regBuffer = (regBuffer & (0xFF-(1<<regBufferCounter))) | ((value & (1<<regBufferCounter))<<regBufferCounter);\n    this.regBuffer =\n      (this.regBuffer & (0xff - (1 << this.regBufferCounter))) |\n      ((value & 1) << this.regBufferCounter);\n    this.regBufferCounter++;\n\n    if (this.regBufferCounter === 5) {\n      // Use the buffered value:\n      this.setReg(this.getRegNumber(address), this.regBuffer);\n\n      // Reset buffer:\n      this.regBuffer = 0;\n      this.regBufferCounter = 0;\n    }\n  }\n};\n\nMappers[1].prototype.setReg = function(reg, value) {\n  var tmp;\n\n  switch (reg) {\n    case 0:\n      // Mirroring:\n      tmp = value & 3;\n      if (tmp !== this.mirroring) {\n        // Set mirroring:\n        this.mirroring = tmp;\n        if ((this.mirroring & 2) === 0) {\n          // SingleScreen mirroring overrides the other setting:\n          this.nes.ppu.setMirroring(this.nes.rom.SINGLESCREEN_MIRRORING);\n        } else if ((this.mirroring & 1) !== 0) {\n          // Not overridden by SingleScreen mirroring.\n          this.nes.ppu.setMirroring(this.nes.rom.HORIZONTAL_MIRRORING);\n        } else {\n          this.nes.ppu.setMirroring(this.nes.rom.VERTICAL_MIRRORING);\n        }\n      }\n\n      // PRG Switching Area;\n      this.prgSwitchingArea = (value >> 2) & 1;\n\n      // PRG Switching Size:\n      this.prgSwitchingSize = (value >> 3) & 1;\n\n      // VROM Switching Size:\n      this.vromSwitchingSize = (value >> 4) & 1;\n\n      break;\n\n    case 1:\n      // ROM selection:\n      this.romSelectionReg0 = (value >> 4) & 1;\n\n      // Check whether the cart has VROM:\n      if (this.nes.rom.vromCount > 0) {\n        // Select VROM bank at 0x0000:\n        if (this.vromSwitchingSize === 0) {\n          // Swap 8kB VROM:\n          if (this.romSelectionReg0 === 0) {\n            this.load8kVromBank(value & 0xf, 0x0000);\n          } else {\n            this.load8kVromBank(\n              Math.floor(this.nes.rom.vromCount / 2) + (value & 0xf),\n              0x0000\n            );\n          }\n        } else {\n          // Swap 4kB VROM:\n          if (this.romSelectionReg0 === 0) {\n            this.loadVromBank(value & 0xf, 0x0000);\n          } else {\n            this.loadVromBank(\n              Math.floor(this.nes.rom.vromCount / 2) + (value & 0xf),\n              0x0000\n            );\n          }\n        }\n      }\n\n      break;\n\n    case 2:\n      // ROM selection:\n      this.romSelectionReg1 = (value >> 4) & 1;\n\n      // Check whether the cart has VROM:\n      if (this.nes.rom.vromCount > 0) {\n        // Select VROM bank at 0x1000:\n        if (this.vromSwitchingSize === 1) {\n          // Swap 4kB of VROM:\n          if (this.romSelectionReg1 === 0) {\n            this.loadVromBank(value & 0xf, 0x1000);\n          } else {\n            this.loadVromBank(\n              Math.floor(this.nes.rom.vromCount / 2) + (value & 0xf),\n              0x1000\n            );\n          }\n        }\n      }\n      break;\n\n    default:\n      // Select ROM bank:\n      // -------------------------\n      tmp = value & 0xf;\n      var bank;\n      var baseBank = 0;\n\n      if (this.nes.rom.romCount >= 32) {\n        // 1024 kB cart\n        if (this.vromSwitchingSize === 0) {\n          if (this.romSelectionReg0 === 1) {\n            baseBank = 16;\n          }\n        } else {\n          baseBank =\n            (this.romSelectionReg0 | (this.romSelectionReg1 << 1)) << 3;\n        }\n      } else if (this.nes.rom.romCount >= 16) {\n        // 512 kB cart\n        if (this.romSelectionReg0 === 1) {\n          baseBank = 8;\n        }\n      }\n\n      if (this.prgSwitchingSize === 0) {\n        // 32kB\n        bank = baseBank + (value & 0xf);\n        this.load32kRomBank(bank, 0x8000);\n      } else {\n        // 16kB\n        bank = baseBank * 2 + (value & 0xf);\n        if (this.prgSwitchingArea === 0) {\n          this.loadRomBank(bank, 0xc000);\n        } else {\n          this.loadRomBank(bank, 0x8000);\n        }\n      }\n  }\n};\n\n// Returns the register number from the address written to:\nMappers[1].prototype.getRegNumber = function(address) {\n  if (address >= 0x8000 && address <= 0x9fff) {\n    return 0;\n  } else if (address >= 0xa000 && address <= 0xbfff) {\n    return 1;\n  } else if (address >= 0xc000 && address <= 0xdfff) {\n    return 2;\n  } else {\n    return 3;\n  }\n};\n\nMappers[1].prototype.loadROM = function() {\n  if (!this.nes.rom.valid) {\n    throw new Error(\"MMC1: Invalid ROM! Unable to load.\");\n  }\n\n  // Load PRG-ROM:\n  this.loadRomBank(0, 0x8000); //   First ROM bank..\n  this.loadRomBank(this.nes.rom.romCount - 1, 0xc000); // ..and last ROM bank.\n\n  // Load CHR-ROM:\n  this.loadCHRROM();\n\n  // Load Battery RAM (if present):\n  this.loadBatteryRam();\n\n  // Do Reset-Interrupt:\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n};\n\n// eslint-disable-next-line no-unused-vars\nMappers[1].prototype.switchLowHighPrgRom = function(oldSetting) {\n  // not yet.\n};\n\nMappers[1].prototype.switch16to32 = function() {\n  // not yet.\n};\n\nMappers[1].prototype.switch32to16 = function() {\n  // not yet.\n};\n\nMappers[1].prototype.toJSON = function() {\n  var s = Mappers[0].prototype.toJSON.apply(this);\n  s.mirroring = this.mirroring;\n  s.oneScreenMirroring = this.oneScreenMirroring;\n  s.prgSwitchingArea = this.prgSwitchingArea;\n  s.prgSwitchingSize = this.prgSwitchingSize;\n  s.vromSwitchingSize = this.vromSwitchingSize;\n  s.romSelectionReg0 = this.romSelectionReg0;\n  s.romSelectionReg1 = this.romSelectionReg1;\n  s.romBankSelect = this.romBankSelect;\n  s.regBuffer = this.regBuffer;\n  s.regBufferCounter = this.regBufferCounter;\n  return s;\n};\n\nMappers[1].prototype.fromJSON = function(s) {\n  Mappers[0].prototype.fromJSON.apply(this, arguments);\n  this.mirroring = s.mirroring;\n  this.oneScreenMirroring = s.oneScreenMirroring;\n  this.prgSwitchingArea = s.prgSwitchingArea;\n  this.prgSwitchingSize = s.prgSwitchingSize;\n  this.vromSwitchingSize = s.vromSwitchingSize;\n  this.romSelectionReg0 = s.romSelectionReg0;\n  this.romSelectionReg1 = s.romSelectionReg1;\n  this.romBankSelect = s.romBankSelect;\n  this.regBuffer = s.regBuffer;\n  this.regBufferCounter = s.regBufferCounter;\n};\n\nMappers[2] = function(nes) {\n  this.nes = nes;\n};\n\nMappers[2].prototype = new Mappers[0]();\n\nMappers[2].prototype.write = function(address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    // This is a ROM bank select command.\n    // Swap in the given ROM bank at 0x8000:\n    this.loadRomBank(value, 0x8000);\n  }\n};\n\nMappers[2].prototype.loadROM = function() {\n  if (!this.nes.rom.valid) {\n    throw new Error(\"UNROM: Invalid ROM! Unable to load.\");\n  }\n\n  // Load PRG-ROM:\n  this.loadRomBank(0, 0x8000);\n  this.loadRomBank(this.nes.rom.romCount - 1, 0xc000);\n\n  // Load CHR-ROM:\n  this.loadCHRROM();\n\n  // Do Reset-Interrupt:\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n};\n\n/**\n * Mapper 003 (CNROM)\n *\n * @constructor\n * @example Solomon's Key, Arkanoid, Arkista's Ring, Bump 'n' Jump, Cybernoid\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_003\n */\nMappers[3] = function(nes) {\n  this.nes = nes;\n};\n\nMappers[3].prototype = new Mappers[0]();\n\nMappers[3].prototype.write = function(address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    // This is a ROM bank select command.\n    // Swap in the given ROM bank at 0x8000:\n    // This is a VROM bank select command.\n    // Swap in the given VROM bank at 0x0000:\n    var bank = (value % (this.nes.rom.vromCount / 2)) * 2;\n    this.loadVromBank(bank, 0x0000);\n    this.loadVromBank(bank + 1, 0x1000);\n    this.load8kVromBank(value * 2, 0x0000);\n  }\n};\n\nMappers[4] = function(nes) {\n  this.nes = nes;\n\n  this.CMD_SEL_2_1K_VROM_0000 = 0;\n  this.CMD_SEL_2_1K_VROM_0800 = 1;\n  this.CMD_SEL_1K_VROM_1000 = 2;\n  this.CMD_SEL_1K_VROM_1400 = 3;\n  this.CMD_SEL_1K_VROM_1800 = 4;\n  this.CMD_SEL_1K_VROM_1C00 = 5;\n  this.CMD_SEL_ROM_PAGE1 = 6;\n  this.CMD_SEL_ROM_PAGE2 = 7;\n\n  this.command = null;\n  this.prgAddressSelect = null;\n  this.chrAddressSelect = null;\n  this.irqCounter = 0xff;\n  this.irqLatchValue = 0xff;\n  this.irqReload = 0;\n  this.irqEnable = 0;\n  this.prgAddressChanged = false;\n};\n\nMappers[4].prototype = new Mappers[0]();\n\nMappers[4].prototype.write = function(address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  }\n\n  switch (address & 0xe001) {\n    case 0x8000:\n      // Command/Address Select register\n      this.command = value & 7;\n      var tmp = (value >> 6) & 1;\n      if (tmp !== this.prgAddressSelect) {\n        this.prgAddressChanged = true;\n      }\n      this.prgAddressSelect = tmp;\n      this.chrAddressSelect = (value >> 7) & 1;\n      break;\n\n    case 0x8001:\n      // Page number for command\n      this.executeCommand(this.command, value);\n      break;\n\n    case 0xa000:\n      // Mirroring select\n      if ((value & 1) !== 0) {\n        this.nes.ppu.setMirroring(this.nes.rom.HORIZONTAL_MIRRORING);\n      } else {\n        this.nes.ppu.setMirroring(this.nes.rom.VERTICAL_MIRRORING);\n      }\n      break;\n\n    case 0xa001:\n      // SaveRAM Toggle\n      // TODO\n      //nes.getRom().setSaveState((value&1)!=0);\n      break;\n\n    case 0xc000:\n      // IRQ Latch register\n      this.irqLatchValue = value;\n      break;\n\n    case 0xc001:\n      // IRQ Reload register (TODO: copy at next rising A12)\n      this.irqReload = 1;\n      break;\n\n    case 0xe000:\n      // IRQ Control Reg 0 (disable, ack)\n      this.irqEnable = 0;\n      break;\n\n    case 0xe001:\n      // IRQ Control Reg 1 (enable)\n      this.irqEnable = 1;\n      break;\n\n    default:\n    // Not a MMC3 register.\n    // The game has probably crashed,\n    // since it tries to write to ROM..\n    // IGNORE.\n  }\n};\n\nMappers[4].prototype.executeCommand = function(cmd, arg) {\n  switch (cmd) {\n    case this.CMD_SEL_2_1K_VROM_0000:\n      // Select 2 1KB VROM pages at 0x0000:\n      if (this.chrAddressSelect === 0) {\n        this.load1kVromBank(arg, 0x0000);\n        this.load1kVromBank(arg + 1, 0x0400);\n      } else {\n        this.load1kVromBank(arg, 0x1000);\n        this.load1kVromBank(arg + 1, 0x1400);\n      }\n      break;\n\n    case this.CMD_SEL_2_1K_VROM_0800:\n      // Select 2 1KB VROM pages at 0x0800:\n      if (this.chrAddressSelect === 0) {\n        this.load1kVromBank(arg, 0x0800);\n        this.load1kVromBank(arg + 1, 0x0c00);\n      } else {\n        this.load1kVromBank(arg, 0x1800);\n        this.load1kVromBank(arg + 1, 0x1c00);\n      }\n      break;\n\n    case this.CMD_SEL_1K_VROM_1000:\n      // Select 1K VROM Page at 0x1000:\n      if (this.chrAddressSelect === 0) {\n        this.load1kVromBank(arg, 0x1000);\n      } else {\n        this.load1kVromBank(arg, 0x0000);\n      }\n      break;\n\n    case this.CMD_SEL_1K_VROM_1400:\n      // Select 1K VROM Page at 0x1400:\n      if (this.chrAddressSelect === 0) {\n        this.load1kVromBank(arg, 0x1400);\n      } else {\n        this.load1kVromBank(arg, 0x0400);\n      }\n      break;\n\n    case this.CMD_SEL_1K_VROM_1800:\n      // Select 1K VROM Page at 0x1800:\n      if (this.chrAddressSelect === 0) {\n        this.load1kVromBank(arg, 0x1800);\n      } else {\n        this.load1kVromBank(arg, 0x0800);\n      }\n      break;\n\n    case this.CMD_SEL_1K_VROM_1C00:\n      // Select 1K VROM Page at 0x1C00:\n      if (this.chrAddressSelect === 0) {\n        this.load1kVromBank(arg, 0x1c00);\n      } else {\n        this.load1kVromBank(arg, 0x0c00);\n      }\n      break;\n\n    case this.CMD_SEL_ROM_PAGE1:\n      if (this.prgAddressChanged) {\n        // Load the two hardwired banks:\n        if (this.prgAddressSelect === 0) {\n          this.load8kRomBank((this.nes.rom.romCount - 1) * 2, 0xc000);\n        } else {\n          this.load8kRomBank((this.nes.rom.romCount - 1) * 2, 0x8000);\n        }\n        this.prgAddressChanged = false;\n      }\n\n      // Select first switchable ROM page:\n      if (this.prgAddressSelect === 0) {\n        this.load8kRomBank(arg, 0x8000);\n      } else {\n        this.load8kRomBank(arg, 0xc000);\n      }\n      break;\n\n    case this.CMD_SEL_ROM_PAGE2:\n      // Select second switchable ROM page:\n      this.load8kRomBank(arg, 0xa000);\n\n      // hardwire appropriate bank:\n      if (this.prgAddressChanged) {\n        // Load the two hardwired banks:\n        if (this.prgAddressSelect === 0) {\n          this.load8kRomBank((this.nes.rom.romCount - 1) * 2, 0xc000);\n        } else {\n          this.load8kRomBank((this.nes.rom.romCount - 1) * 2, 0x8000);\n        }\n        this.prgAddressChanged = false;\n      }\n  }\n};\n\nMappers[4].prototype.loadROM = function() {\n  if (!this.nes.rom.valid) {\n    throw new Error(\"MMC3: Invalid ROM! Unable to load.\");\n  }\n\n  // Load hardwired PRG banks (0xC000 and 0xE000):\n  this.load8kRomBank((this.nes.rom.romCount - 1) * 2, 0xc000);\n  this.load8kRomBank((this.nes.rom.romCount - 1) * 2 + 1, 0xe000);\n\n  // Load swappable PRG banks (0x8000 and 0xA000):\n  this.load8kRomBank(0, 0x8000);\n  this.load8kRomBank(1, 0xa000);\n\n  // Load CHR-ROM:\n  this.loadCHRROM();\n\n  // Load Battery RAM (if present):\n  this.loadBatteryRam();\n\n  // Do Reset-Interrupt:\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n};\n\nMappers[4].prototype.clockIrqCounter = function() {\n  if (this.irqReload === 1) {\n    this.irqCounter = this.irqLatchValue;\n    this.irqReload = 0;\n  }\n  this.irqCounter--;\n  if (this.irqCounter < 0) {\n    if (this.irqEnable === 1) {\n      this.nes.cpu.requestIrq(this.nes.cpu.IRQ_NORMAL);\n    }\n    this.irqCounter = this.irqLatchValue;\n  }\n};\n\nMappers[4].prototype.toJSON = function() {\n  var s = Mappers[0].prototype.toJSON.apply(this);\n  s.command = this.command;\n  s.prgAddressSelect = this.prgAddressSelect;\n  s.chrAddressSelect = this.chrAddressSelect;\n  s.irqReload = this.irqReload;\n  s.irqCounter = this.irqCounter;\n  s.irqLatchValue = this.irqLatchValue;\n  s.irqEnable = this.irqEnable;\n  s.prgAddressChanged = this.prgAddressChanged;\n  return s;\n};\n\nMappers[4].prototype.fromJSON = function(s) {\n  Mappers[0].prototype.fromJSON.apply(this, arguments);\n  this.command = s.command;\n  this.prgAddressSelect = s.prgAddressSelect;\n  this.chrAddressSelect = s.chrAddressSelect;\n  this.irqReload = s.irqReload;\n  this.irqCounter = s.irqCounter;\n  this.irqLatchValue = s.irqLatchValue;\n  this.irqEnable = s.irqEnable;\n  this.prgAddressChanged = s.prgAddressChanged;\n};\n\n/**\n * Mapper005 (MMC5,ExROM)\n *\n * @example Castlevania 3, Just Breed, Uncharted Waters, Romance of the 3 Kingdoms 2, Laser Invasion, Metal Slader Glory, Uchuu Keibitai SDF, Shin 4 Nin Uchi Mahjong - Yakuman Tengoku\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_005\n * @constructor\n */\nMappers[5] = function(nes) {\n  this.nes = nes;\n};\n\nMappers[5].prototype = new Mappers[0]();\n\nMappers[5].prototype.write = function(address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n  } else {\n    this.load8kVromBank(value, 0x0000);\n  }\n};\n\nMappers[5].prototype.write = function(address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x5000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  }\n\n  switch (address) {\n    case 0x5100:\n      this.prg_size = value & 3;\n      break;\n    case 0x5101:\n      this.chr_size = value & 3;\n      break;\n    case 0x5102:\n      this.sram_we_a = value & 3;\n      break;\n    case 0x5103:\n      this.sram_we_b = value & 3;\n      break;\n    case 0x5104:\n      this.graphic_mode = value & 3;\n      break;\n    case 0x5105:\n      this.nametable_mode = value;\n      this.nametable_type[0] = value & 3;\n      this.load1kVromBank(value & 3, 0x2000);\n      value >>= 2;\n      this.nametable_type[1] = value & 3;\n      this.load1kVromBank(value & 3, 0x2400);\n      value >>= 2;\n      this.nametable_type[2] = value & 3;\n      this.load1kVromBank(value & 3, 0x2800);\n      value >>= 2;\n      this.nametable_type[3] = value & 3;\n      this.load1kVromBank(value & 3, 0x2c00);\n      break;\n    case 0x5106:\n      this.fill_chr = value;\n      break;\n    case 0x5107:\n      this.fill_pal = value & 3;\n      break;\n    case 0x5113:\n      this.SetBank_SRAM(3, value & 3);\n      break;\n    case 0x5114:\n    case 0x5115:\n    case 0x5116:\n    case 0x5117:\n      this.SetBank_CPU(address, value);\n      break;\n    case 0x5120:\n    case 0x5121:\n    case 0x5122:\n    case 0x5123:\n    case 0x5124:\n    case 0x5125:\n    case 0x5126:\n    case 0x5127:\n      this.chr_mode = 0;\n      this.chr_page[0][address & 7] = value;\n      this.SetBank_PPU();\n      break;\n    case 0x5128:\n    case 0x5129:\n    case 0x512a:\n    case 0x512b:\n      this.chr_mode = 1;\n      this.chr_page[1][(address & 3) + 0] = value;\n      this.chr_page[1][(address & 3) + 4] = value;\n      this.SetBank_PPU();\n      break;\n    case 0x5200:\n      this.split_control = value;\n      break;\n    case 0x5201:\n      this.split_scroll = value;\n      break;\n    case 0x5202:\n      this.split_page = value & 0x3f;\n      break;\n    case 0x5203:\n      this.irq_line = value;\n      this.nes.cpu.ClearIRQ();\n      break;\n    case 0x5204:\n      this.irq_enable = value;\n      this.nes.cpu.ClearIRQ();\n      break;\n    case 0x5205:\n      this.mult_a = value;\n      break;\n    case 0x5206:\n      this.mult_b = value;\n      break;\n    default:\n      if (address >= 0x5000 && address <= 0x5015) {\n        this.nes.papu.exWrite(address, value);\n      } else if (address >= 0x5c00 && address <= 0x5fff) {\n        if (this.graphic_mode === 2) {\n          // ExRAM\n          // vram write\n        } else if (this.graphic_mode !== 3) {\n          // Split,ExGraphic\n          if (this.irq_status & 0x40) {\n            // vram write\n          } else {\n            // vram write\n          }\n        }\n      } else if (address >= 0x6000 && address <= 0x7fff) {\n        if (this.sram_we_a === 2 && this.sram_we_b === 1) {\n          // additional ram write\n        }\n      }\n      break;\n  }\n};\n\nMappers[5].prototype.loadROM = function() {\n  if (!this.nes.rom.valid) {\n    throw new Error(\"UNROM: Invalid ROM! Unable to load.\");\n  }\n\n  // Load PRG-ROM:\n  this.load8kRomBank(this.nes.rom.romCount * 2 - 1, 0x8000);\n  this.load8kRomBank(this.nes.rom.romCount * 2 - 1, 0xa000);\n  this.load8kRomBank(this.nes.rom.romCount * 2 - 1, 0xc000);\n  this.load8kRomBank(this.nes.rom.romCount * 2 - 1, 0xe000);\n\n  // Load CHR-ROM:\n  this.loadCHRROM();\n\n  // Do Reset-Interrupt:\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n};\n\n/**\n * Mapper007 (AxROM)\n * @example Battletoads, Time Lord, Marble Madness\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_007\n * @constructor\n */\nMappers[7] = function(nes) {\n  this.nes = nes;\n};\n\nMappers[7].prototype = new Mappers[0]();\n\nMappers[7].prototype.write = function(address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n  } else {\n    this.load32kRomBank(value & 0x7, 0x8000);\n    if (value & 0x10) {\n      this.nes.ppu.setMirroring(this.nes.rom.SINGLESCREEN_MIRRORING2);\n    } else {\n      this.nes.ppu.setMirroring(this.nes.rom.SINGLESCREEN_MIRRORING);\n    }\n  }\n};\n\nMappers[7].prototype.loadROM = function() {\n  if (!this.nes.rom.valid) {\n    throw new Error(\"AOROM: Invalid ROM! Unable to load.\");\n  }\n\n  // Load PRG-ROM:\n  this.loadPRGROM();\n\n  // Load CHR-ROM:\n  this.loadCHRROM();\n\n  // Do Reset-Interrupt:\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n};\n\n/**\n * Mapper 011 (Color Dreams)\n *\n * @description http://wiki.nesdev.com/w/index.php/Color_Dreams\n * @example Crystal Mines, Metal Fighter\n * @constructor\n */\nMappers[11] = function(nes) {\n  this.nes = nes;\n};\n\nMappers[11].prototype = new Mappers[0]();\n\nMappers[11].prototype.write = function(address, value) {\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    // Swap in the given PRG-ROM bank:\n    var prgbank1 = ((value & 0xf) * 2) % this.nes.rom.romCount;\n    var prgbank2 = ((value & 0xf) * 2 + 1) % this.nes.rom.romCount;\n\n    this.loadRomBank(prgbank1, 0x8000);\n    this.loadRomBank(prgbank2, 0xc000);\n\n    if (this.nes.rom.vromCount > 0) {\n      // Swap in the given VROM bank at 0x0000:\n      var bank = ((value >> 4) * 2) % this.nes.rom.vromCount;\n      this.loadVromBank(bank, 0x0000);\n      this.loadVromBank(bank + 1, 0x1000);\n    }\n  }\n};\n\n/**\n * Mapper 034 (BNROM, NINA-01)\n *\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_034\n * @example Darkseed, Mashou, Mission Impossible 2\n * @constructor\n */\nMappers[34] = function(nes) {\n  this.nes = nes;\n};\n\nMappers[34].prototype = new Mappers[0]();\n\nMappers[34].prototype.write = function(address, value) {\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    this.load32kRomBank(value, 0x8000);\n  }\n};\n\n/**\n * Mapper 038\n *\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_038\n * @example Crime Busters\n * @constructor\n */\nMappers[38] = function(nes) {\n  this.nes = nes;\n};\n\nMappers[38].prototype = new Mappers[0]();\n\nMappers[38].prototype.write = function(address, value) {\n  if (address < 0x7000 || address > 0x7fff) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    // Swap in the given PRG-ROM bank at 0x8000:\n    this.load32kRomBank(value & 3, 0x8000);\n\n    // Swap in the given VROM bank at 0x0000:\n    this.load8kVromBank(((value >> 2) & 3) * 2, 0x0000);\n  }\n};\n\n/**\n * Mapper 066 (GxROM)\n *\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_066\n * @example Doraemon, Dragon Power, Gumshoe, Thunder & Lightning,\n * Super Mario Bros. + Duck Hunt\n * @constructor\n */\nMappers[66] = function(nes) {\n  this.nes = nes;\n};\n\nMappers[66].prototype = new Mappers[0]();\n\nMappers[66].prototype.write = function(address, value) {\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    // Swap in the given PRG-ROM bank at 0x8000:\n    this.load32kRomBank((value >> 4) & 3, 0x8000);\n\n    // Swap in the given VROM bank at 0x0000:\n    this.load8kVromBank((value & 3) * 2, 0x0000);\n  }\n};\n\n/**\n * Mapper 094 (UN1ROM)\n *\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_094\n * @example Senjou no Ookami\n * @constructor\n */\nMappers[94] = function(nes) {\n  this.nes = nes;\n};\n\nMappers[94].prototype = new Mappers[0]();\n\nMappers[94].prototype.write = function(address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    // This is a ROM bank select command.\n    // Swap in the given ROM bank at 0x8000:\n    this.loadRomBank(value >> 2, 0x8000);\n  }\n};\n\nMappers[94].prototype.loadROM = function() {\n  if (!this.nes.rom.valid) {\n    throw new Error(\"UN1ROM: Invalid ROM! Unable to load.\");\n  }\n\n  // Load PRG-ROM:\n  this.loadRomBank(0, 0x8000);\n  this.loadRomBank(this.nes.rom.romCount - 1, 0xc000);\n\n  // Load CHR-ROM:\n  this.loadCHRROM();\n\n  // Do Reset-Interrupt:\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n};\n\n/**\n * Mapper 140\n *\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_140\n * @example Bio Senshi Dan - Increaser Tono Tatakai\n * @constructor\n */\nMappers[140] = function(nes) {\n  this.nes = nes;\n};\n\nMappers[140].prototype = new Mappers[0]();\n\nMappers[140].prototype.write = function(address, value) {\n  if (address < 0x6000 || address > 0x7fff) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    // Swap in the given PRG-ROM bank at 0x8000:\n    this.load32kRomBank((value >> 4) & 3, 0x8000);\n\n    // Swap in the given VROM bank at 0x0000:\n    this.load8kVromBank((value & 0xf) * 2, 0x0000);\n  }\n};\n\n/**\n * Mapper 180\n *\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_180\n * @example Crazy Climber\n * @constructor\n */\nMappers[180] = function(nes) {\n  this.nes = nes;\n};\n\nMappers[180].prototype = new Mappers[0]();\n\nMappers[180].prototype.write = function(address, value) {\n  // Writes to addresses other than MMC registers are handled by NoMapper.\n  if (address < 0x8000) {\n    Mappers[0].prototype.write.apply(this, arguments);\n    return;\n  } else {\n    // This is a ROM bank select command.\n    // Swap in the given ROM bank at 0xc000:\n    this.loadRomBank(value, 0xc000);\n  }\n};\n\nMappers[180].prototype.loadROM = function() {\n  if (!this.nes.rom.valid) {\n    throw new Error(\"Mapper 180: Invalid ROM! Unable to load.\");\n  }\n\n  // Load PRG-ROM:\n  this.loadRomBank(0, 0x8000);\n  this.loadRomBank(this.nes.rom.romCount - 1, 0xc000);\n\n  // Load CHR-ROM:\n  this.loadCHRROM();\n\n  // Do Reset-Interrupt:\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\n};\n\nmodule.exports = Mappers;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/mappers.js\n// module id = 9\n// module chunks = 0 1"],"sourceRoot":""}